Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    TEXT

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> sentencia
Rule 2     sentencias -> sentencia sentencias
Rule 3     sentencia -> def_variable
Rule 4     sentencia -> put_variable
Rule 5     sentencia -> add_variable
Rule 6     sentencia -> continue_up
Rule 7     sentencia -> continue_down
Rule 8     sentencia -> continue_right
Rule 9     sentencia -> continue_left
Rule 10    sentencia -> pos
Rule 11    sentencia -> posx
Rule 12    sentencia -> posy
Rule 13    sentencia -> use_color
Rule 14    sentencia -> down
Rule 15    sentencia -> up
Rule 16    sentencia -> beginning
Rule 17    sentencia -> for_loop
Rule 18    sentencia -> case
Rule 19    sentencia -> repeat_until
Rule 20    sentencia -> while
Rule 21    sentencia -> equal
Rule 22    sentencia -> and
Rule 23    sentencia -> or
Rule 24    sentencia -> greater
Rule 25    sentencia -> smaller
Rule 26    sentencia -> substr
Rule 27    sentencia -> random
Rule 28    sentencia -> mult
Rule 29    sentencia -> div
Rule 30    sentencia -> sum
Rule 31    sentencia -> proc
Rule 32    sentencia -> invocacion_proc
Rule 33    def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 34    put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 35    add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA
Rule 36    add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 37    continue_up -> CONUP valor PUNTOCOMA
Rule 38    continue_down -> CONDOWN valor PUNTOCOMA
Rule 39    continue_right -> CONRIGHT valor PUNTOCOMA
Rule 40    continue_left -> CONLEFT valor PUNTOCOMA
Rule 41    pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA
Rule 42    posx -> POSX valor PUNTOCOMA
Rule 43    posy -> POSY valor PUNTOCOMA
Rule 44    use_color -> USECOLOR valor PUNTOCOMA
Rule 45    down -> DOWN PUNTOCOMA
Rule 46    up -> UP PUNTOCOMA
Rule 47    beginning -> BEGIN PUNTOCOMA
Rule 48    for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
Rule 49    case -> CASE VARIABLE when_cases end_case
Rule 50    when_cases -> when_cases when_case
Rule 51    when_cases -> when_case
Rule 52    when_case -> WHEN valor THEN BRAIZQ sentencias BRADER
Rule 53    end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA
Rule 54    end_case -> END CASE PUNTOCOMA
Rule 55    repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
Rule 56    while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
Rule 57    equal -> EQUAL PARIZQ valor COMA valor PARDER
Rule 58    equal -> EQUAL PARIZQ condicion COMA condicion PARDER
Rule 59    and -> AND PARIZQ valor COMA valor PARDER
Rule 60    and -> AND PARIZQ condicion COMA condicion PARDER
Rule 61    or -> OR PARIZQ valor COMA valor PARDER
Rule 62    or -> OR PARIZQ condicion COMA condicion PARDER
Rule 63    greater -> GREATER PARIZQ valor COMA valor PARDER
Rule 64    smaller -> SMALLER PARIZQ valor COMA valor PARDER
Rule 65    substr -> SUBSTR PARIZQ valor COMA valor PARDER
Rule 66    random -> RANDOM PARIZQ valor PARDER
Rule 67    mult -> MULT PARIZQ valor COMA valor PARDER
Rule 68    div -> DIV PARIZQ valor COMA valor PARDER
Rule 69    sum -> SUM PARIZQ valor COMA valor PARDER
Rule 70    proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
Rule 71    proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
Rule 72    lista_parametros -> VARIABLE
Rule 73    lista_parametros -> VARIABLE COMA lista_parametros
Rule 74    invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
Rule 75    invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA
Rule 76    lista_argumentos -> valor
Rule 77    lista_argumentos -> valor COMA lista_argumentos
Rule 78    valor -> NUMBER
Rule 79    valor -> VARIABLE
Rule 80    valor -> expr
Rule 81    valor -> TRUE
Rule 82    valor -> FALSE
Rule 83    expr -> ADD PARIZQ VARIABLE PARDER
Rule 84    expr -> ADD PARIZQ VARIABLE COMA valor PARDER
Rule 85    expr -> valor OP_MULT valor
Rule 86    expr -> valor OP_DIV valor
Rule 87    expr -> valor OP_SUM valor
Rule 88    expr -> valor OP_SUB valor
Rule 89    expr -> substr
Rule 90    expr -> random
Rule 91    expr -> mult
Rule 92    expr -> div
Rule 93    expr -> sum
Rule 94    condicion -> valor OP_EQUAL valor
Rule 95    condicion -> valor OP_GREATER valor
Rule 96    condicion -> valor OP_SMALLER valor
Rule 97    condicion -> valor OP_AND valor
Rule 98    condicion -> valor OP_OR valor
Rule 99    condicion -> equal
Rule 100   condicion -> greater
Rule 101   condicion -> smaller
Rule 102   condicion -> and
Rule 103   condicion -> or

Terminals, with rules where they appear

ADD                  : 35 36 83 84
AND                  : 59 60
BEGIN                : 47
BRADER               : 48 52 53 55 55 56 56 70 71
BRAIZQ               : 48 52 53 55 55 56 56 70 71
CASE                 : 49 53 54
COMA                 : 33 34 36 41 57 58 59 60 61 62 63 64 65 67 68 69 73 77 84
COMMENT              : 
CONDOWN              : 38
CONLEFT              : 40
CONRIGHT             : 39
CONUP                : 37
DEF                  : 33
DIV                  : 68
DOWN                 : 45
ELSE                 : 53
END                  : 48 53 54 70 71
EQUAL                : 57 58
FALSE                : 82
FOR                  : 48
GREATER              : 63
LOOP                 : 48 48
MULT                 : 67
NUMBER               : 78
OP_AND               : 97
OP_DIV               : 86
OP_EQUAL             : 94
OP_GREATER           : 95
OP_MULT              : 85
OP_OR                : 98
OP_SMALLER           : 96
OP_SUB               : 88
OP_SUM               : 87
OR                   : 61 62
PARDER               : 33 34 35 36 41 48 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 74 75 83 84
PARIZQ               : 33 34 35 36 41 48 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 74 75 83 84
POS                  : 41
POSX                 : 42
POSY                 : 43
PROC                 : 70 71
PUNTOCOMA            : 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 53 54 55 56 70 70 71 71 74 75
PUT                  : 34
RANDOM               : 66
REPEAT               : 55
SMALLER              : 64
SUBSTR               : 65
SUM                  : 69
TEXT                 : 
THEN                 : 52
TO                   : 48
TRUE                 : 81
UNTIL                : 55
UP                   : 46
USECOLOR             : 44
VARIABLE             : 33 34 35 36 48 49 70 71 72 73 74 75 79 83 84
WHEN                 : 52
WHEND                : 56
WHILE                : 56
error                : 

Nonterminals, with rules where they appear

add_variable         : 5
and                  : 22 102
beginning            : 16
case                 : 18
condicion            : 55 56 58 58 60 60 62 62
continue_down        : 7
continue_left        : 9
continue_right       : 8
continue_up          : 6
def_variable         : 3
div                  : 29 92
down                 : 14
end_case             : 49
equal                : 21 99
expr                 : 80
for_loop             : 17
greater              : 24 100
invocacion_proc      : 32
lista_argumentos     : 74 77
lista_parametros     : 70 73
mult                 : 28 91
or                   : 23 103
pos                  : 10
posx                 : 11
posy                 : 12
proc                 : 31
put_variable         : 4
random               : 27 90
repeat_until         : 19
sentencia            : 1 2
sentencias           : 2 48 52 53 55 56 70 71 0
smaller              : 25 101
substr               : 26 89
sum                  : 30 93
up                   : 15
use_color            : 13
valor                : 33 34 36 37 38 39 40 41 41 42 43 44 48 48 52 57 57 59 59 61 61 63 63 64 64 65 65 66 67 67 68 68 69 69 76 77 84 85 85 86 86 87 87 88 88 94 94 95 95 96 96 97 97 98 98
when_case            : 50 51
when_cases           : 49 50
while                : 20

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 1
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> sentencia .
    (2) sentencias -> sentencia . sentencias
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    $end            reduce using rule 1 (sentencias -> sentencia .)
    BRADER          reduce using rule 1 (sentencias -> sentencia .)
    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencia                      shift and go to state 2
    sentencias                     shift and go to state 63
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 3

    (3) sentencia -> def_variable .

    DEF             reduce using rule 3 (sentencia -> def_variable .)
    PUT             reduce using rule 3 (sentencia -> def_variable .)
    ADD             reduce using rule 3 (sentencia -> def_variable .)
    CONUP           reduce using rule 3 (sentencia -> def_variable .)
    CONDOWN         reduce using rule 3 (sentencia -> def_variable .)
    CONRIGHT        reduce using rule 3 (sentencia -> def_variable .)
    CONLEFT         reduce using rule 3 (sentencia -> def_variable .)
    POS             reduce using rule 3 (sentencia -> def_variable .)
    POSX            reduce using rule 3 (sentencia -> def_variable .)
    POSY            reduce using rule 3 (sentencia -> def_variable .)
    USECOLOR        reduce using rule 3 (sentencia -> def_variable .)
    DOWN            reduce using rule 3 (sentencia -> def_variable .)
    UP              reduce using rule 3 (sentencia -> def_variable .)
    BEGIN           reduce using rule 3 (sentencia -> def_variable .)
    FOR             reduce using rule 3 (sentencia -> def_variable .)
    CASE            reduce using rule 3 (sentencia -> def_variable .)
    REPEAT          reduce using rule 3 (sentencia -> def_variable .)
    WHILE           reduce using rule 3 (sentencia -> def_variable .)
    EQUAL           reduce using rule 3 (sentencia -> def_variable .)
    AND             reduce using rule 3 (sentencia -> def_variable .)
    OR              reduce using rule 3 (sentencia -> def_variable .)
    GREATER         reduce using rule 3 (sentencia -> def_variable .)
    SMALLER         reduce using rule 3 (sentencia -> def_variable .)
    SUBSTR          reduce using rule 3 (sentencia -> def_variable .)
    RANDOM          reduce using rule 3 (sentencia -> def_variable .)
    MULT            reduce using rule 3 (sentencia -> def_variable .)
    DIV             reduce using rule 3 (sentencia -> def_variable .)
    SUM             reduce using rule 3 (sentencia -> def_variable .)
    PROC            reduce using rule 3 (sentencia -> def_variable .)
    VARIABLE        reduce using rule 3 (sentencia -> def_variable .)
    $end            reduce using rule 3 (sentencia -> def_variable .)
    BRADER          reduce using rule 3 (sentencia -> def_variable .)


state 4

    (4) sentencia -> put_variable .

    DEF             reduce using rule 4 (sentencia -> put_variable .)
    PUT             reduce using rule 4 (sentencia -> put_variable .)
    ADD             reduce using rule 4 (sentencia -> put_variable .)
    CONUP           reduce using rule 4 (sentencia -> put_variable .)
    CONDOWN         reduce using rule 4 (sentencia -> put_variable .)
    CONRIGHT        reduce using rule 4 (sentencia -> put_variable .)
    CONLEFT         reduce using rule 4 (sentencia -> put_variable .)
    POS             reduce using rule 4 (sentencia -> put_variable .)
    POSX            reduce using rule 4 (sentencia -> put_variable .)
    POSY            reduce using rule 4 (sentencia -> put_variable .)
    USECOLOR        reduce using rule 4 (sentencia -> put_variable .)
    DOWN            reduce using rule 4 (sentencia -> put_variable .)
    UP              reduce using rule 4 (sentencia -> put_variable .)
    BEGIN           reduce using rule 4 (sentencia -> put_variable .)
    FOR             reduce using rule 4 (sentencia -> put_variable .)
    CASE            reduce using rule 4 (sentencia -> put_variable .)
    REPEAT          reduce using rule 4 (sentencia -> put_variable .)
    WHILE           reduce using rule 4 (sentencia -> put_variable .)
    EQUAL           reduce using rule 4 (sentencia -> put_variable .)
    AND             reduce using rule 4 (sentencia -> put_variable .)
    OR              reduce using rule 4 (sentencia -> put_variable .)
    GREATER         reduce using rule 4 (sentencia -> put_variable .)
    SMALLER         reduce using rule 4 (sentencia -> put_variable .)
    SUBSTR          reduce using rule 4 (sentencia -> put_variable .)
    RANDOM          reduce using rule 4 (sentencia -> put_variable .)
    MULT            reduce using rule 4 (sentencia -> put_variable .)
    DIV             reduce using rule 4 (sentencia -> put_variable .)
    SUM             reduce using rule 4 (sentencia -> put_variable .)
    PROC            reduce using rule 4 (sentencia -> put_variable .)
    VARIABLE        reduce using rule 4 (sentencia -> put_variable .)
    $end            reduce using rule 4 (sentencia -> put_variable .)
    BRADER          reduce using rule 4 (sentencia -> put_variable .)


state 5

    (5) sentencia -> add_variable .

    DEF             reduce using rule 5 (sentencia -> add_variable .)
    PUT             reduce using rule 5 (sentencia -> add_variable .)
    ADD             reduce using rule 5 (sentencia -> add_variable .)
    CONUP           reduce using rule 5 (sentencia -> add_variable .)
    CONDOWN         reduce using rule 5 (sentencia -> add_variable .)
    CONRIGHT        reduce using rule 5 (sentencia -> add_variable .)
    CONLEFT         reduce using rule 5 (sentencia -> add_variable .)
    POS             reduce using rule 5 (sentencia -> add_variable .)
    POSX            reduce using rule 5 (sentencia -> add_variable .)
    POSY            reduce using rule 5 (sentencia -> add_variable .)
    USECOLOR        reduce using rule 5 (sentencia -> add_variable .)
    DOWN            reduce using rule 5 (sentencia -> add_variable .)
    UP              reduce using rule 5 (sentencia -> add_variable .)
    BEGIN           reduce using rule 5 (sentencia -> add_variable .)
    FOR             reduce using rule 5 (sentencia -> add_variable .)
    CASE            reduce using rule 5 (sentencia -> add_variable .)
    REPEAT          reduce using rule 5 (sentencia -> add_variable .)
    WHILE           reduce using rule 5 (sentencia -> add_variable .)
    EQUAL           reduce using rule 5 (sentencia -> add_variable .)
    AND             reduce using rule 5 (sentencia -> add_variable .)
    OR              reduce using rule 5 (sentencia -> add_variable .)
    GREATER         reduce using rule 5 (sentencia -> add_variable .)
    SMALLER         reduce using rule 5 (sentencia -> add_variable .)
    SUBSTR          reduce using rule 5 (sentencia -> add_variable .)
    RANDOM          reduce using rule 5 (sentencia -> add_variable .)
    MULT            reduce using rule 5 (sentencia -> add_variable .)
    DIV             reduce using rule 5 (sentencia -> add_variable .)
    SUM             reduce using rule 5 (sentencia -> add_variable .)
    PROC            reduce using rule 5 (sentencia -> add_variable .)
    VARIABLE        reduce using rule 5 (sentencia -> add_variable .)
    $end            reduce using rule 5 (sentencia -> add_variable .)
    BRADER          reduce using rule 5 (sentencia -> add_variable .)


state 6

    (6) sentencia -> continue_up .

    DEF             reduce using rule 6 (sentencia -> continue_up .)
    PUT             reduce using rule 6 (sentencia -> continue_up .)
    ADD             reduce using rule 6 (sentencia -> continue_up .)
    CONUP           reduce using rule 6 (sentencia -> continue_up .)
    CONDOWN         reduce using rule 6 (sentencia -> continue_up .)
    CONRIGHT        reduce using rule 6 (sentencia -> continue_up .)
    CONLEFT         reduce using rule 6 (sentencia -> continue_up .)
    POS             reduce using rule 6 (sentencia -> continue_up .)
    POSX            reduce using rule 6 (sentencia -> continue_up .)
    POSY            reduce using rule 6 (sentencia -> continue_up .)
    USECOLOR        reduce using rule 6 (sentencia -> continue_up .)
    DOWN            reduce using rule 6 (sentencia -> continue_up .)
    UP              reduce using rule 6 (sentencia -> continue_up .)
    BEGIN           reduce using rule 6 (sentencia -> continue_up .)
    FOR             reduce using rule 6 (sentencia -> continue_up .)
    CASE            reduce using rule 6 (sentencia -> continue_up .)
    REPEAT          reduce using rule 6 (sentencia -> continue_up .)
    WHILE           reduce using rule 6 (sentencia -> continue_up .)
    EQUAL           reduce using rule 6 (sentencia -> continue_up .)
    AND             reduce using rule 6 (sentencia -> continue_up .)
    OR              reduce using rule 6 (sentencia -> continue_up .)
    GREATER         reduce using rule 6 (sentencia -> continue_up .)
    SMALLER         reduce using rule 6 (sentencia -> continue_up .)
    SUBSTR          reduce using rule 6 (sentencia -> continue_up .)
    RANDOM          reduce using rule 6 (sentencia -> continue_up .)
    MULT            reduce using rule 6 (sentencia -> continue_up .)
    DIV             reduce using rule 6 (sentencia -> continue_up .)
    SUM             reduce using rule 6 (sentencia -> continue_up .)
    PROC            reduce using rule 6 (sentencia -> continue_up .)
    VARIABLE        reduce using rule 6 (sentencia -> continue_up .)
    $end            reduce using rule 6 (sentencia -> continue_up .)
    BRADER          reduce using rule 6 (sentencia -> continue_up .)


state 7

    (7) sentencia -> continue_down .

    DEF             reduce using rule 7 (sentencia -> continue_down .)
    PUT             reduce using rule 7 (sentencia -> continue_down .)
    ADD             reduce using rule 7 (sentencia -> continue_down .)
    CONUP           reduce using rule 7 (sentencia -> continue_down .)
    CONDOWN         reduce using rule 7 (sentencia -> continue_down .)
    CONRIGHT        reduce using rule 7 (sentencia -> continue_down .)
    CONLEFT         reduce using rule 7 (sentencia -> continue_down .)
    POS             reduce using rule 7 (sentencia -> continue_down .)
    POSX            reduce using rule 7 (sentencia -> continue_down .)
    POSY            reduce using rule 7 (sentencia -> continue_down .)
    USECOLOR        reduce using rule 7 (sentencia -> continue_down .)
    DOWN            reduce using rule 7 (sentencia -> continue_down .)
    UP              reduce using rule 7 (sentencia -> continue_down .)
    BEGIN           reduce using rule 7 (sentencia -> continue_down .)
    FOR             reduce using rule 7 (sentencia -> continue_down .)
    CASE            reduce using rule 7 (sentencia -> continue_down .)
    REPEAT          reduce using rule 7 (sentencia -> continue_down .)
    WHILE           reduce using rule 7 (sentencia -> continue_down .)
    EQUAL           reduce using rule 7 (sentencia -> continue_down .)
    AND             reduce using rule 7 (sentencia -> continue_down .)
    OR              reduce using rule 7 (sentencia -> continue_down .)
    GREATER         reduce using rule 7 (sentencia -> continue_down .)
    SMALLER         reduce using rule 7 (sentencia -> continue_down .)
    SUBSTR          reduce using rule 7 (sentencia -> continue_down .)
    RANDOM          reduce using rule 7 (sentencia -> continue_down .)
    MULT            reduce using rule 7 (sentencia -> continue_down .)
    DIV             reduce using rule 7 (sentencia -> continue_down .)
    SUM             reduce using rule 7 (sentencia -> continue_down .)
    PROC            reduce using rule 7 (sentencia -> continue_down .)
    VARIABLE        reduce using rule 7 (sentencia -> continue_down .)
    $end            reduce using rule 7 (sentencia -> continue_down .)
    BRADER          reduce using rule 7 (sentencia -> continue_down .)


state 8

    (8) sentencia -> continue_right .

    DEF             reduce using rule 8 (sentencia -> continue_right .)
    PUT             reduce using rule 8 (sentencia -> continue_right .)
    ADD             reduce using rule 8 (sentencia -> continue_right .)
    CONUP           reduce using rule 8 (sentencia -> continue_right .)
    CONDOWN         reduce using rule 8 (sentencia -> continue_right .)
    CONRIGHT        reduce using rule 8 (sentencia -> continue_right .)
    CONLEFT         reduce using rule 8 (sentencia -> continue_right .)
    POS             reduce using rule 8 (sentencia -> continue_right .)
    POSX            reduce using rule 8 (sentencia -> continue_right .)
    POSY            reduce using rule 8 (sentencia -> continue_right .)
    USECOLOR        reduce using rule 8 (sentencia -> continue_right .)
    DOWN            reduce using rule 8 (sentencia -> continue_right .)
    UP              reduce using rule 8 (sentencia -> continue_right .)
    BEGIN           reduce using rule 8 (sentencia -> continue_right .)
    FOR             reduce using rule 8 (sentencia -> continue_right .)
    CASE            reduce using rule 8 (sentencia -> continue_right .)
    REPEAT          reduce using rule 8 (sentencia -> continue_right .)
    WHILE           reduce using rule 8 (sentencia -> continue_right .)
    EQUAL           reduce using rule 8 (sentencia -> continue_right .)
    AND             reduce using rule 8 (sentencia -> continue_right .)
    OR              reduce using rule 8 (sentencia -> continue_right .)
    GREATER         reduce using rule 8 (sentencia -> continue_right .)
    SMALLER         reduce using rule 8 (sentencia -> continue_right .)
    SUBSTR          reduce using rule 8 (sentencia -> continue_right .)
    RANDOM          reduce using rule 8 (sentencia -> continue_right .)
    MULT            reduce using rule 8 (sentencia -> continue_right .)
    DIV             reduce using rule 8 (sentencia -> continue_right .)
    SUM             reduce using rule 8 (sentencia -> continue_right .)
    PROC            reduce using rule 8 (sentencia -> continue_right .)
    VARIABLE        reduce using rule 8 (sentencia -> continue_right .)
    $end            reduce using rule 8 (sentencia -> continue_right .)
    BRADER          reduce using rule 8 (sentencia -> continue_right .)


state 9

    (9) sentencia -> continue_left .

    DEF             reduce using rule 9 (sentencia -> continue_left .)
    PUT             reduce using rule 9 (sentencia -> continue_left .)
    ADD             reduce using rule 9 (sentencia -> continue_left .)
    CONUP           reduce using rule 9 (sentencia -> continue_left .)
    CONDOWN         reduce using rule 9 (sentencia -> continue_left .)
    CONRIGHT        reduce using rule 9 (sentencia -> continue_left .)
    CONLEFT         reduce using rule 9 (sentencia -> continue_left .)
    POS             reduce using rule 9 (sentencia -> continue_left .)
    POSX            reduce using rule 9 (sentencia -> continue_left .)
    POSY            reduce using rule 9 (sentencia -> continue_left .)
    USECOLOR        reduce using rule 9 (sentencia -> continue_left .)
    DOWN            reduce using rule 9 (sentencia -> continue_left .)
    UP              reduce using rule 9 (sentencia -> continue_left .)
    BEGIN           reduce using rule 9 (sentencia -> continue_left .)
    FOR             reduce using rule 9 (sentencia -> continue_left .)
    CASE            reduce using rule 9 (sentencia -> continue_left .)
    REPEAT          reduce using rule 9 (sentencia -> continue_left .)
    WHILE           reduce using rule 9 (sentencia -> continue_left .)
    EQUAL           reduce using rule 9 (sentencia -> continue_left .)
    AND             reduce using rule 9 (sentencia -> continue_left .)
    OR              reduce using rule 9 (sentencia -> continue_left .)
    GREATER         reduce using rule 9 (sentencia -> continue_left .)
    SMALLER         reduce using rule 9 (sentencia -> continue_left .)
    SUBSTR          reduce using rule 9 (sentencia -> continue_left .)
    RANDOM          reduce using rule 9 (sentencia -> continue_left .)
    MULT            reduce using rule 9 (sentencia -> continue_left .)
    DIV             reduce using rule 9 (sentencia -> continue_left .)
    SUM             reduce using rule 9 (sentencia -> continue_left .)
    PROC            reduce using rule 9 (sentencia -> continue_left .)
    VARIABLE        reduce using rule 9 (sentencia -> continue_left .)
    $end            reduce using rule 9 (sentencia -> continue_left .)
    BRADER          reduce using rule 9 (sentencia -> continue_left .)


state 10

    (10) sentencia -> pos .

    DEF             reduce using rule 10 (sentencia -> pos .)
    PUT             reduce using rule 10 (sentencia -> pos .)
    ADD             reduce using rule 10 (sentencia -> pos .)
    CONUP           reduce using rule 10 (sentencia -> pos .)
    CONDOWN         reduce using rule 10 (sentencia -> pos .)
    CONRIGHT        reduce using rule 10 (sentencia -> pos .)
    CONLEFT         reduce using rule 10 (sentencia -> pos .)
    POS             reduce using rule 10 (sentencia -> pos .)
    POSX            reduce using rule 10 (sentencia -> pos .)
    POSY            reduce using rule 10 (sentencia -> pos .)
    USECOLOR        reduce using rule 10 (sentencia -> pos .)
    DOWN            reduce using rule 10 (sentencia -> pos .)
    UP              reduce using rule 10 (sentencia -> pos .)
    BEGIN           reduce using rule 10 (sentencia -> pos .)
    FOR             reduce using rule 10 (sentencia -> pos .)
    CASE            reduce using rule 10 (sentencia -> pos .)
    REPEAT          reduce using rule 10 (sentencia -> pos .)
    WHILE           reduce using rule 10 (sentencia -> pos .)
    EQUAL           reduce using rule 10 (sentencia -> pos .)
    AND             reduce using rule 10 (sentencia -> pos .)
    OR              reduce using rule 10 (sentencia -> pos .)
    GREATER         reduce using rule 10 (sentencia -> pos .)
    SMALLER         reduce using rule 10 (sentencia -> pos .)
    SUBSTR          reduce using rule 10 (sentencia -> pos .)
    RANDOM          reduce using rule 10 (sentencia -> pos .)
    MULT            reduce using rule 10 (sentencia -> pos .)
    DIV             reduce using rule 10 (sentencia -> pos .)
    SUM             reduce using rule 10 (sentencia -> pos .)
    PROC            reduce using rule 10 (sentencia -> pos .)
    VARIABLE        reduce using rule 10 (sentencia -> pos .)
    $end            reduce using rule 10 (sentencia -> pos .)
    BRADER          reduce using rule 10 (sentencia -> pos .)


state 11

    (11) sentencia -> posx .

    DEF             reduce using rule 11 (sentencia -> posx .)
    PUT             reduce using rule 11 (sentencia -> posx .)
    ADD             reduce using rule 11 (sentencia -> posx .)
    CONUP           reduce using rule 11 (sentencia -> posx .)
    CONDOWN         reduce using rule 11 (sentencia -> posx .)
    CONRIGHT        reduce using rule 11 (sentencia -> posx .)
    CONLEFT         reduce using rule 11 (sentencia -> posx .)
    POS             reduce using rule 11 (sentencia -> posx .)
    POSX            reduce using rule 11 (sentencia -> posx .)
    POSY            reduce using rule 11 (sentencia -> posx .)
    USECOLOR        reduce using rule 11 (sentencia -> posx .)
    DOWN            reduce using rule 11 (sentencia -> posx .)
    UP              reduce using rule 11 (sentencia -> posx .)
    BEGIN           reduce using rule 11 (sentencia -> posx .)
    FOR             reduce using rule 11 (sentencia -> posx .)
    CASE            reduce using rule 11 (sentencia -> posx .)
    REPEAT          reduce using rule 11 (sentencia -> posx .)
    WHILE           reduce using rule 11 (sentencia -> posx .)
    EQUAL           reduce using rule 11 (sentencia -> posx .)
    AND             reduce using rule 11 (sentencia -> posx .)
    OR              reduce using rule 11 (sentencia -> posx .)
    GREATER         reduce using rule 11 (sentencia -> posx .)
    SMALLER         reduce using rule 11 (sentencia -> posx .)
    SUBSTR          reduce using rule 11 (sentencia -> posx .)
    RANDOM          reduce using rule 11 (sentencia -> posx .)
    MULT            reduce using rule 11 (sentencia -> posx .)
    DIV             reduce using rule 11 (sentencia -> posx .)
    SUM             reduce using rule 11 (sentencia -> posx .)
    PROC            reduce using rule 11 (sentencia -> posx .)
    VARIABLE        reduce using rule 11 (sentencia -> posx .)
    $end            reduce using rule 11 (sentencia -> posx .)
    BRADER          reduce using rule 11 (sentencia -> posx .)


state 12

    (12) sentencia -> posy .

    DEF             reduce using rule 12 (sentencia -> posy .)
    PUT             reduce using rule 12 (sentencia -> posy .)
    ADD             reduce using rule 12 (sentencia -> posy .)
    CONUP           reduce using rule 12 (sentencia -> posy .)
    CONDOWN         reduce using rule 12 (sentencia -> posy .)
    CONRIGHT        reduce using rule 12 (sentencia -> posy .)
    CONLEFT         reduce using rule 12 (sentencia -> posy .)
    POS             reduce using rule 12 (sentencia -> posy .)
    POSX            reduce using rule 12 (sentencia -> posy .)
    POSY            reduce using rule 12 (sentencia -> posy .)
    USECOLOR        reduce using rule 12 (sentencia -> posy .)
    DOWN            reduce using rule 12 (sentencia -> posy .)
    UP              reduce using rule 12 (sentencia -> posy .)
    BEGIN           reduce using rule 12 (sentencia -> posy .)
    FOR             reduce using rule 12 (sentencia -> posy .)
    CASE            reduce using rule 12 (sentencia -> posy .)
    REPEAT          reduce using rule 12 (sentencia -> posy .)
    WHILE           reduce using rule 12 (sentencia -> posy .)
    EQUAL           reduce using rule 12 (sentencia -> posy .)
    AND             reduce using rule 12 (sentencia -> posy .)
    OR              reduce using rule 12 (sentencia -> posy .)
    GREATER         reduce using rule 12 (sentencia -> posy .)
    SMALLER         reduce using rule 12 (sentencia -> posy .)
    SUBSTR          reduce using rule 12 (sentencia -> posy .)
    RANDOM          reduce using rule 12 (sentencia -> posy .)
    MULT            reduce using rule 12 (sentencia -> posy .)
    DIV             reduce using rule 12 (sentencia -> posy .)
    SUM             reduce using rule 12 (sentencia -> posy .)
    PROC            reduce using rule 12 (sentencia -> posy .)
    VARIABLE        reduce using rule 12 (sentencia -> posy .)
    $end            reduce using rule 12 (sentencia -> posy .)
    BRADER          reduce using rule 12 (sentencia -> posy .)


state 13

    (13) sentencia -> use_color .

    DEF             reduce using rule 13 (sentencia -> use_color .)
    PUT             reduce using rule 13 (sentencia -> use_color .)
    ADD             reduce using rule 13 (sentencia -> use_color .)
    CONUP           reduce using rule 13 (sentencia -> use_color .)
    CONDOWN         reduce using rule 13 (sentencia -> use_color .)
    CONRIGHT        reduce using rule 13 (sentencia -> use_color .)
    CONLEFT         reduce using rule 13 (sentencia -> use_color .)
    POS             reduce using rule 13 (sentencia -> use_color .)
    POSX            reduce using rule 13 (sentencia -> use_color .)
    POSY            reduce using rule 13 (sentencia -> use_color .)
    USECOLOR        reduce using rule 13 (sentencia -> use_color .)
    DOWN            reduce using rule 13 (sentencia -> use_color .)
    UP              reduce using rule 13 (sentencia -> use_color .)
    BEGIN           reduce using rule 13 (sentencia -> use_color .)
    FOR             reduce using rule 13 (sentencia -> use_color .)
    CASE            reduce using rule 13 (sentencia -> use_color .)
    REPEAT          reduce using rule 13 (sentencia -> use_color .)
    WHILE           reduce using rule 13 (sentencia -> use_color .)
    EQUAL           reduce using rule 13 (sentencia -> use_color .)
    AND             reduce using rule 13 (sentencia -> use_color .)
    OR              reduce using rule 13 (sentencia -> use_color .)
    GREATER         reduce using rule 13 (sentencia -> use_color .)
    SMALLER         reduce using rule 13 (sentencia -> use_color .)
    SUBSTR          reduce using rule 13 (sentencia -> use_color .)
    RANDOM          reduce using rule 13 (sentencia -> use_color .)
    MULT            reduce using rule 13 (sentencia -> use_color .)
    DIV             reduce using rule 13 (sentencia -> use_color .)
    SUM             reduce using rule 13 (sentencia -> use_color .)
    PROC            reduce using rule 13 (sentencia -> use_color .)
    VARIABLE        reduce using rule 13 (sentencia -> use_color .)
    $end            reduce using rule 13 (sentencia -> use_color .)
    BRADER          reduce using rule 13 (sentencia -> use_color .)


state 14

    (14) sentencia -> down .

    DEF             reduce using rule 14 (sentencia -> down .)
    PUT             reduce using rule 14 (sentencia -> down .)
    ADD             reduce using rule 14 (sentencia -> down .)
    CONUP           reduce using rule 14 (sentencia -> down .)
    CONDOWN         reduce using rule 14 (sentencia -> down .)
    CONRIGHT        reduce using rule 14 (sentencia -> down .)
    CONLEFT         reduce using rule 14 (sentencia -> down .)
    POS             reduce using rule 14 (sentencia -> down .)
    POSX            reduce using rule 14 (sentencia -> down .)
    POSY            reduce using rule 14 (sentencia -> down .)
    USECOLOR        reduce using rule 14 (sentencia -> down .)
    DOWN            reduce using rule 14 (sentencia -> down .)
    UP              reduce using rule 14 (sentencia -> down .)
    BEGIN           reduce using rule 14 (sentencia -> down .)
    FOR             reduce using rule 14 (sentencia -> down .)
    CASE            reduce using rule 14 (sentencia -> down .)
    REPEAT          reduce using rule 14 (sentencia -> down .)
    WHILE           reduce using rule 14 (sentencia -> down .)
    EQUAL           reduce using rule 14 (sentencia -> down .)
    AND             reduce using rule 14 (sentencia -> down .)
    OR              reduce using rule 14 (sentencia -> down .)
    GREATER         reduce using rule 14 (sentencia -> down .)
    SMALLER         reduce using rule 14 (sentencia -> down .)
    SUBSTR          reduce using rule 14 (sentencia -> down .)
    RANDOM          reduce using rule 14 (sentencia -> down .)
    MULT            reduce using rule 14 (sentencia -> down .)
    DIV             reduce using rule 14 (sentencia -> down .)
    SUM             reduce using rule 14 (sentencia -> down .)
    PROC            reduce using rule 14 (sentencia -> down .)
    VARIABLE        reduce using rule 14 (sentencia -> down .)
    $end            reduce using rule 14 (sentencia -> down .)
    BRADER          reduce using rule 14 (sentencia -> down .)


state 15

    (15) sentencia -> up .

    DEF             reduce using rule 15 (sentencia -> up .)
    PUT             reduce using rule 15 (sentencia -> up .)
    ADD             reduce using rule 15 (sentencia -> up .)
    CONUP           reduce using rule 15 (sentencia -> up .)
    CONDOWN         reduce using rule 15 (sentencia -> up .)
    CONRIGHT        reduce using rule 15 (sentencia -> up .)
    CONLEFT         reduce using rule 15 (sentencia -> up .)
    POS             reduce using rule 15 (sentencia -> up .)
    POSX            reduce using rule 15 (sentencia -> up .)
    POSY            reduce using rule 15 (sentencia -> up .)
    USECOLOR        reduce using rule 15 (sentencia -> up .)
    DOWN            reduce using rule 15 (sentencia -> up .)
    UP              reduce using rule 15 (sentencia -> up .)
    BEGIN           reduce using rule 15 (sentencia -> up .)
    FOR             reduce using rule 15 (sentencia -> up .)
    CASE            reduce using rule 15 (sentencia -> up .)
    REPEAT          reduce using rule 15 (sentencia -> up .)
    WHILE           reduce using rule 15 (sentencia -> up .)
    EQUAL           reduce using rule 15 (sentencia -> up .)
    AND             reduce using rule 15 (sentencia -> up .)
    OR              reduce using rule 15 (sentencia -> up .)
    GREATER         reduce using rule 15 (sentencia -> up .)
    SMALLER         reduce using rule 15 (sentencia -> up .)
    SUBSTR          reduce using rule 15 (sentencia -> up .)
    RANDOM          reduce using rule 15 (sentencia -> up .)
    MULT            reduce using rule 15 (sentencia -> up .)
    DIV             reduce using rule 15 (sentencia -> up .)
    SUM             reduce using rule 15 (sentencia -> up .)
    PROC            reduce using rule 15 (sentencia -> up .)
    VARIABLE        reduce using rule 15 (sentencia -> up .)
    $end            reduce using rule 15 (sentencia -> up .)
    BRADER          reduce using rule 15 (sentencia -> up .)


state 16

    (16) sentencia -> beginning .

    DEF             reduce using rule 16 (sentencia -> beginning .)
    PUT             reduce using rule 16 (sentencia -> beginning .)
    ADD             reduce using rule 16 (sentencia -> beginning .)
    CONUP           reduce using rule 16 (sentencia -> beginning .)
    CONDOWN         reduce using rule 16 (sentencia -> beginning .)
    CONRIGHT        reduce using rule 16 (sentencia -> beginning .)
    CONLEFT         reduce using rule 16 (sentencia -> beginning .)
    POS             reduce using rule 16 (sentencia -> beginning .)
    POSX            reduce using rule 16 (sentencia -> beginning .)
    POSY            reduce using rule 16 (sentencia -> beginning .)
    USECOLOR        reduce using rule 16 (sentencia -> beginning .)
    DOWN            reduce using rule 16 (sentencia -> beginning .)
    UP              reduce using rule 16 (sentencia -> beginning .)
    BEGIN           reduce using rule 16 (sentencia -> beginning .)
    FOR             reduce using rule 16 (sentencia -> beginning .)
    CASE            reduce using rule 16 (sentencia -> beginning .)
    REPEAT          reduce using rule 16 (sentencia -> beginning .)
    WHILE           reduce using rule 16 (sentencia -> beginning .)
    EQUAL           reduce using rule 16 (sentencia -> beginning .)
    AND             reduce using rule 16 (sentencia -> beginning .)
    OR              reduce using rule 16 (sentencia -> beginning .)
    GREATER         reduce using rule 16 (sentencia -> beginning .)
    SMALLER         reduce using rule 16 (sentencia -> beginning .)
    SUBSTR          reduce using rule 16 (sentencia -> beginning .)
    RANDOM          reduce using rule 16 (sentencia -> beginning .)
    MULT            reduce using rule 16 (sentencia -> beginning .)
    DIV             reduce using rule 16 (sentencia -> beginning .)
    SUM             reduce using rule 16 (sentencia -> beginning .)
    PROC            reduce using rule 16 (sentencia -> beginning .)
    VARIABLE        reduce using rule 16 (sentencia -> beginning .)
    $end            reduce using rule 16 (sentencia -> beginning .)
    BRADER          reduce using rule 16 (sentencia -> beginning .)


state 17

    (17) sentencia -> for_loop .

    DEF             reduce using rule 17 (sentencia -> for_loop .)
    PUT             reduce using rule 17 (sentencia -> for_loop .)
    ADD             reduce using rule 17 (sentencia -> for_loop .)
    CONUP           reduce using rule 17 (sentencia -> for_loop .)
    CONDOWN         reduce using rule 17 (sentencia -> for_loop .)
    CONRIGHT        reduce using rule 17 (sentencia -> for_loop .)
    CONLEFT         reduce using rule 17 (sentencia -> for_loop .)
    POS             reduce using rule 17 (sentencia -> for_loop .)
    POSX            reduce using rule 17 (sentencia -> for_loop .)
    POSY            reduce using rule 17 (sentencia -> for_loop .)
    USECOLOR        reduce using rule 17 (sentencia -> for_loop .)
    DOWN            reduce using rule 17 (sentencia -> for_loop .)
    UP              reduce using rule 17 (sentencia -> for_loop .)
    BEGIN           reduce using rule 17 (sentencia -> for_loop .)
    FOR             reduce using rule 17 (sentencia -> for_loop .)
    CASE            reduce using rule 17 (sentencia -> for_loop .)
    REPEAT          reduce using rule 17 (sentencia -> for_loop .)
    WHILE           reduce using rule 17 (sentencia -> for_loop .)
    EQUAL           reduce using rule 17 (sentencia -> for_loop .)
    AND             reduce using rule 17 (sentencia -> for_loop .)
    OR              reduce using rule 17 (sentencia -> for_loop .)
    GREATER         reduce using rule 17 (sentencia -> for_loop .)
    SMALLER         reduce using rule 17 (sentencia -> for_loop .)
    SUBSTR          reduce using rule 17 (sentencia -> for_loop .)
    RANDOM          reduce using rule 17 (sentencia -> for_loop .)
    MULT            reduce using rule 17 (sentencia -> for_loop .)
    DIV             reduce using rule 17 (sentencia -> for_loop .)
    SUM             reduce using rule 17 (sentencia -> for_loop .)
    PROC            reduce using rule 17 (sentencia -> for_loop .)
    VARIABLE        reduce using rule 17 (sentencia -> for_loop .)
    $end            reduce using rule 17 (sentencia -> for_loop .)
    BRADER          reduce using rule 17 (sentencia -> for_loop .)


state 18

    (18) sentencia -> case .

    DEF             reduce using rule 18 (sentencia -> case .)
    PUT             reduce using rule 18 (sentencia -> case .)
    ADD             reduce using rule 18 (sentencia -> case .)
    CONUP           reduce using rule 18 (sentencia -> case .)
    CONDOWN         reduce using rule 18 (sentencia -> case .)
    CONRIGHT        reduce using rule 18 (sentencia -> case .)
    CONLEFT         reduce using rule 18 (sentencia -> case .)
    POS             reduce using rule 18 (sentencia -> case .)
    POSX            reduce using rule 18 (sentencia -> case .)
    POSY            reduce using rule 18 (sentencia -> case .)
    USECOLOR        reduce using rule 18 (sentencia -> case .)
    DOWN            reduce using rule 18 (sentencia -> case .)
    UP              reduce using rule 18 (sentencia -> case .)
    BEGIN           reduce using rule 18 (sentencia -> case .)
    FOR             reduce using rule 18 (sentencia -> case .)
    CASE            reduce using rule 18 (sentencia -> case .)
    REPEAT          reduce using rule 18 (sentencia -> case .)
    WHILE           reduce using rule 18 (sentencia -> case .)
    EQUAL           reduce using rule 18 (sentencia -> case .)
    AND             reduce using rule 18 (sentencia -> case .)
    OR              reduce using rule 18 (sentencia -> case .)
    GREATER         reduce using rule 18 (sentencia -> case .)
    SMALLER         reduce using rule 18 (sentencia -> case .)
    SUBSTR          reduce using rule 18 (sentencia -> case .)
    RANDOM          reduce using rule 18 (sentencia -> case .)
    MULT            reduce using rule 18 (sentencia -> case .)
    DIV             reduce using rule 18 (sentencia -> case .)
    SUM             reduce using rule 18 (sentencia -> case .)
    PROC            reduce using rule 18 (sentencia -> case .)
    VARIABLE        reduce using rule 18 (sentencia -> case .)
    $end            reduce using rule 18 (sentencia -> case .)
    BRADER          reduce using rule 18 (sentencia -> case .)


state 19

    (19) sentencia -> repeat_until .

    DEF             reduce using rule 19 (sentencia -> repeat_until .)
    PUT             reduce using rule 19 (sentencia -> repeat_until .)
    ADD             reduce using rule 19 (sentencia -> repeat_until .)
    CONUP           reduce using rule 19 (sentencia -> repeat_until .)
    CONDOWN         reduce using rule 19 (sentencia -> repeat_until .)
    CONRIGHT        reduce using rule 19 (sentencia -> repeat_until .)
    CONLEFT         reduce using rule 19 (sentencia -> repeat_until .)
    POS             reduce using rule 19 (sentencia -> repeat_until .)
    POSX            reduce using rule 19 (sentencia -> repeat_until .)
    POSY            reduce using rule 19 (sentencia -> repeat_until .)
    USECOLOR        reduce using rule 19 (sentencia -> repeat_until .)
    DOWN            reduce using rule 19 (sentencia -> repeat_until .)
    UP              reduce using rule 19 (sentencia -> repeat_until .)
    BEGIN           reduce using rule 19 (sentencia -> repeat_until .)
    FOR             reduce using rule 19 (sentencia -> repeat_until .)
    CASE            reduce using rule 19 (sentencia -> repeat_until .)
    REPEAT          reduce using rule 19 (sentencia -> repeat_until .)
    WHILE           reduce using rule 19 (sentencia -> repeat_until .)
    EQUAL           reduce using rule 19 (sentencia -> repeat_until .)
    AND             reduce using rule 19 (sentencia -> repeat_until .)
    OR              reduce using rule 19 (sentencia -> repeat_until .)
    GREATER         reduce using rule 19 (sentencia -> repeat_until .)
    SMALLER         reduce using rule 19 (sentencia -> repeat_until .)
    SUBSTR          reduce using rule 19 (sentencia -> repeat_until .)
    RANDOM          reduce using rule 19 (sentencia -> repeat_until .)
    MULT            reduce using rule 19 (sentencia -> repeat_until .)
    DIV             reduce using rule 19 (sentencia -> repeat_until .)
    SUM             reduce using rule 19 (sentencia -> repeat_until .)
    PROC            reduce using rule 19 (sentencia -> repeat_until .)
    VARIABLE        reduce using rule 19 (sentencia -> repeat_until .)
    $end            reduce using rule 19 (sentencia -> repeat_until .)
    BRADER          reduce using rule 19 (sentencia -> repeat_until .)


state 20

    (20) sentencia -> while .

    DEF             reduce using rule 20 (sentencia -> while .)
    PUT             reduce using rule 20 (sentencia -> while .)
    ADD             reduce using rule 20 (sentencia -> while .)
    CONUP           reduce using rule 20 (sentencia -> while .)
    CONDOWN         reduce using rule 20 (sentencia -> while .)
    CONRIGHT        reduce using rule 20 (sentencia -> while .)
    CONLEFT         reduce using rule 20 (sentencia -> while .)
    POS             reduce using rule 20 (sentencia -> while .)
    POSX            reduce using rule 20 (sentencia -> while .)
    POSY            reduce using rule 20 (sentencia -> while .)
    USECOLOR        reduce using rule 20 (sentencia -> while .)
    DOWN            reduce using rule 20 (sentencia -> while .)
    UP              reduce using rule 20 (sentencia -> while .)
    BEGIN           reduce using rule 20 (sentencia -> while .)
    FOR             reduce using rule 20 (sentencia -> while .)
    CASE            reduce using rule 20 (sentencia -> while .)
    REPEAT          reduce using rule 20 (sentencia -> while .)
    WHILE           reduce using rule 20 (sentencia -> while .)
    EQUAL           reduce using rule 20 (sentencia -> while .)
    AND             reduce using rule 20 (sentencia -> while .)
    OR              reduce using rule 20 (sentencia -> while .)
    GREATER         reduce using rule 20 (sentencia -> while .)
    SMALLER         reduce using rule 20 (sentencia -> while .)
    SUBSTR          reduce using rule 20 (sentencia -> while .)
    RANDOM          reduce using rule 20 (sentencia -> while .)
    MULT            reduce using rule 20 (sentencia -> while .)
    DIV             reduce using rule 20 (sentencia -> while .)
    SUM             reduce using rule 20 (sentencia -> while .)
    PROC            reduce using rule 20 (sentencia -> while .)
    VARIABLE        reduce using rule 20 (sentencia -> while .)
    $end            reduce using rule 20 (sentencia -> while .)
    BRADER          reduce using rule 20 (sentencia -> while .)


state 21

    (21) sentencia -> equal .

    DEF             reduce using rule 21 (sentencia -> equal .)
    PUT             reduce using rule 21 (sentencia -> equal .)
    ADD             reduce using rule 21 (sentencia -> equal .)
    CONUP           reduce using rule 21 (sentencia -> equal .)
    CONDOWN         reduce using rule 21 (sentencia -> equal .)
    CONRIGHT        reduce using rule 21 (sentencia -> equal .)
    CONLEFT         reduce using rule 21 (sentencia -> equal .)
    POS             reduce using rule 21 (sentencia -> equal .)
    POSX            reduce using rule 21 (sentencia -> equal .)
    POSY            reduce using rule 21 (sentencia -> equal .)
    USECOLOR        reduce using rule 21 (sentencia -> equal .)
    DOWN            reduce using rule 21 (sentencia -> equal .)
    UP              reduce using rule 21 (sentencia -> equal .)
    BEGIN           reduce using rule 21 (sentencia -> equal .)
    FOR             reduce using rule 21 (sentencia -> equal .)
    CASE            reduce using rule 21 (sentencia -> equal .)
    REPEAT          reduce using rule 21 (sentencia -> equal .)
    WHILE           reduce using rule 21 (sentencia -> equal .)
    EQUAL           reduce using rule 21 (sentencia -> equal .)
    AND             reduce using rule 21 (sentencia -> equal .)
    OR              reduce using rule 21 (sentencia -> equal .)
    GREATER         reduce using rule 21 (sentencia -> equal .)
    SMALLER         reduce using rule 21 (sentencia -> equal .)
    SUBSTR          reduce using rule 21 (sentencia -> equal .)
    RANDOM          reduce using rule 21 (sentencia -> equal .)
    MULT            reduce using rule 21 (sentencia -> equal .)
    DIV             reduce using rule 21 (sentencia -> equal .)
    SUM             reduce using rule 21 (sentencia -> equal .)
    PROC            reduce using rule 21 (sentencia -> equal .)
    VARIABLE        reduce using rule 21 (sentencia -> equal .)
    $end            reduce using rule 21 (sentencia -> equal .)
    BRADER          reduce using rule 21 (sentencia -> equal .)


state 22

    (22) sentencia -> and .

    DEF             reduce using rule 22 (sentencia -> and .)
    PUT             reduce using rule 22 (sentencia -> and .)
    ADD             reduce using rule 22 (sentencia -> and .)
    CONUP           reduce using rule 22 (sentencia -> and .)
    CONDOWN         reduce using rule 22 (sentencia -> and .)
    CONRIGHT        reduce using rule 22 (sentencia -> and .)
    CONLEFT         reduce using rule 22 (sentencia -> and .)
    POS             reduce using rule 22 (sentencia -> and .)
    POSX            reduce using rule 22 (sentencia -> and .)
    POSY            reduce using rule 22 (sentencia -> and .)
    USECOLOR        reduce using rule 22 (sentencia -> and .)
    DOWN            reduce using rule 22 (sentencia -> and .)
    UP              reduce using rule 22 (sentencia -> and .)
    BEGIN           reduce using rule 22 (sentencia -> and .)
    FOR             reduce using rule 22 (sentencia -> and .)
    CASE            reduce using rule 22 (sentencia -> and .)
    REPEAT          reduce using rule 22 (sentencia -> and .)
    WHILE           reduce using rule 22 (sentencia -> and .)
    EQUAL           reduce using rule 22 (sentencia -> and .)
    AND             reduce using rule 22 (sentencia -> and .)
    OR              reduce using rule 22 (sentencia -> and .)
    GREATER         reduce using rule 22 (sentencia -> and .)
    SMALLER         reduce using rule 22 (sentencia -> and .)
    SUBSTR          reduce using rule 22 (sentencia -> and .)
    RANDOM          reduce using rule 22 (sentencia -> and .)
    MULT            reduce using rule 22 (sentencia -> and .)
    DIV             reduce using rule 22 (sentencia -> and .)
    SUM             reduce using rule 22 (sentencia -> and .)
    PROC            reduce using rule 22 (sentencia -> and .)
    VARIABLE        reduce using rule 22 (sentencia -> and .)
    $end            reduce using rule 22 (sentencia -> and .)
    BRADER          reduce using rule 22 (sentencia -> and .)


state 23

    (23) sentencia -> or .

    DEF             reduce using rule 23 (sentencia -> or .)
    PUT             reduce using rule 23 (sentencia -> or .)
    ADD             reduce using rule 23 (sentencia -> or .)
    CONUP           reduce using rule 23 (sentencia -> or .)
    CONDOWN         reduce using rule 23 (sentencia -> or .)
    CONRIGHT        reduce using rule 23 (sentencia -> or .)
    CONLEFT         reduce using rule 23 (sentencia -> or .)
    POS             reduce using rule 23 (sentencia -> or .)
    POSX            reduce using rule 23 (sentencia -> or .)
    POSY            reduce using rule 23 (sentencia -> or .)
    USECOLOR        reduce using rule 23 (sentencia -> or .)
    DOWN            reduce using rule 23 (sentencia -> or .)
    UP              reduce using rule 23 (sentencia -> or .)
    BEGIN           reduce using rule 23 (sentencia -> or .)
    FOR             reduce using rule 23 (sentencia -> or .)
    CASE            reduce using rule 23 (sentencia -> or .)
    REPEAT          reduce using rule 23 (sentencia -> or .)
    WHILE           reduce using rule 23 (sentencia -> or .)
    EQUAL           reduce using rule 23 (sentencia -> or .)
    AND             reduce using rule 23 (sentencia -> or .)
    OR              reduce using rule 23 (sentencia -> or .)
    GREATER         reduce using rule 23 (sentencia -> or .)
    SMALLER         reduce using rule 23 (sentencia -> or .)
    SUBSTR          reduce using rule 23 (sentencia -> or .)
    RANDOM          reduce using rule 23 (sentencia -> or .)
    MULT            reduce using rule 23 (sentencia -> or .)
    DIV             reduce using rule 23 (sentencia -> or .)
    SUM             reduce using rule 23 (sentencia -> or .)
    PROC            reduce using rule 23 (sentencia -> or .)
    VARIABLE        reduce using rule 23 (sentencia -> or .)
    $end            reduce using rule 23 (sentencia -> or .)
    BRADER          reduce using rule 23 (sentencia -> or .)


state 24

    (24) sentencia -> greater .

    DEF             reduce using rule 24 (sentencia -> greater .)
    PUT             reduce using rule 24 (sentencia -> greater .)
    ADD             reduce using rule 24 (sentencia -> greater .)
    CONUP           reduce using rule 24 (sentencia -> greater .)
    CONDOWN         reduce using rule 24 (sentencia -> greater .)
    CONRIGHT        reduce using rule 24 (sentencia -> greater .)
    CONLEFT         reduce using rule 24 (sentencia -> greater .)
    POS             reduce using rule 24 (sentencia -> greater .)
    POSX            reduce using rule 24 (sentencia -> greater .)
    POSY            reduce using rule 24 (sentencia -> greater .)
    USECOLOR        reduce using rule 24 (sentencia -> greater .)
    DOWN            reduce using rule 24 (sentencia -> greater .)
    UP              reduce using rule 24 (sentencia -> greater .)
    BEGIN           reduce using rule 24 (sentencia -> greater .)
    FOR             reduce using rule 24 (sentencia -> greater .)
    CASE            reduce using rule 24 (sentencia -> greater .)
    REPEAT          reduce using rule 24 (sentencia -> greater .)
    WHILE           reduce using rule 24 (sentencia -> greater .)
    EQUAL           reduce using rule 24 (sentencia -> greater .)
    AND             reduce using rule 24 (sentencia -> greater .)
    OR              reduce using rule 24 (sentencia -> greater .)
    GREATER         reduce using rule 24 (sentencia -> greater .)
    SMALLER         reduce using rule 24 (sentencia -> greater .)
    SUBSTR          reduce using rule 24 (sentencia -> greater .)
    RANDOM          reduce using rule 24 (sentencia -> greater .)
    MULT            reduce using rule 24 (sentencia -> greater .)
    DIV             reduce using rule 24 (sentencia -> greater .)
    SUM             reduce using rule 24 (sentencia -> greater .)
    PROC            reduce using rule 24 (sentencia -> greater .)
    VARIABLE        reduce using rule 24 (sentencia -> greater .)
    $end            reduce using rule 24 (sentencia -> greater .)
    BRADER          reduce using rule 24 (sentencia -> greater .)


state 25

    (25) sentencia -> smaller .

    DEF             reduce using rule 25 (sentencia -> smaller .)
    PUT             reduce using rule 25 (sentencia -> smaller .)
    ADD             reduce using rule 25 (sentencia -> smaller .)
    CONUP           reduce using rule 25 (sentencia -> smaller .)
    CONDOWN         reduce using rule 25 (sentencia -> smaller .)
    CONRIGHT        reduce using rule 25 (sentencia -> smaller .)
    CONLEFT         reduce using rule 25 (sentencia -> smaller .)
    POS             reduce using rule 25 (sentencia -> smaller .)
    POSX            reduce using rule 25 (sentencia -> smaller .)
    POSY            reduce using rule 25 (sentencia -> smaller .)
    USECOLOR        reduce using rule 25 (sentencia -> smaller .)
    DOWN            reduce using rule 25 (sentencia -> smaller .)
    UP              reduce using rule 25 (sentencia -> smaller .)
    BEGIN           reduce using rule 25 (sentencia -> smaller .)
    FOR             reduce using rule 25 (sentencia -> smaller .)
    CASE            reduce using rule 25 (sentencia -> smaller .)
    REPEAT          reduce using rule 25 (sentencia -> smaller .)
    WHILE           reduce using rule 25 (sentencia -> smaller .)
    EQUAL           reduce using rule 25 (sentencia -> smaller .)
    AND             reduce using rule 25 (sentencia -> smaller .)
    OR              reduce using rule 25 (sentencia -> smaller .)
    GREATER         reduce using rule 25 (sentencia -> smaller .)
    SMALLER         reduce using rule 25 (sentencia -> smaller .)
    SUBSTR          reduce using rule 25 (sentencia -> smaller .)
    RANDOM          reduce using rule 25 (sentencia -> smaller .)
    MULT            reduce using rule 25 (sentencia -> smaller .)
    DIV             reduce using rule 25 (sentencia -> smaller .)
    SUM             reduce using rule 25 (sentencia -> smaller .)
    PROC            reduce using rule 25 (sentencia -> smaller .)
    VARIABLE        reduce using rule 25 (sentencia -> smaller .)
    $end            reduce using rule 25 (sentencia -> smaller .)
    BRADER          reduce using rule 25 (sentencia -> smaller .)


state 26

    (26) sentencia -> substr .

    DEF             reduce using rule 26 (sentencia -> substr .)
    PUT             reduce using rule 26 (sentencia -> substr .)
    ADD             reduce using rule 26 (sentencia -> substr .)
    CONUP           reduce using rule 26 (sentencia -> substr .)
    CONDOWN         reduce using rule 26 (sentencia -> substr .)
    CONRIGHT        reduce using rule 26 (sentencia -> substr .)
    CONLEFT         reduce using rule 26 (sentencia -> substr .)
    POS             reduce using rule 26 (sentencia -> substr .)
    POSX            reduce using rule 26 (sentencia -> substr .)
    POSY            reduce using rule 26 (sentencia -> substr .)
    USECOLOR        reduce using rule 26 (sentencia -> substr .)
    DOWN            reduce using rule 26 (sentencia -> substr .)
    UP              reduce using rule 26 (sentencia -> substr .)
    BEGIN           reduce using rule 26 (sentencia -> substr .)
    FOR             reduce using rule 26 (sentencia -> substr .)
    CASE            reduce using rule 26 (sentencia -> substr .)
    REPEAT          reduce using rule 26 (sentencia -> substr .)
    WHILE           reduce using rule 26 (sentencia -> substr .)
    EQUAL           reduce using rule 26 (sentencia -> substr .)
    AND             reduce using rule 26 (sentencia -> substr .)
    OR              reduce using rule 26 (sentencia -> substr .)
    GREATER         reduce using rule 26 (sentencia -> substr .)
    SMALLER         reduce using rule 26 (sentencia -> substr .)
    SUBSTR          reduce using rule 26 (sentencia -> substr .)
    RANDOM          reduce using rule 26 (sentencia -> substr .)
    MULT            reduce using rule 26 (sentencia -> substr .)
    DIV             reduce using rule 26 (sentencia -> substr .)
    SUM             reduce using rule 26 (sentencia -> substr .)
    PROC            reduce using rule 26 (sentencia -> substr .)
    VARIABLE        reduce using rule 26 (sentencia -> substr .)
    $end            reduce using rule 26 (sentencia -> substr .)
    BRADER          reduce using rule 26 (sentencia -> substr .)


state 27

    (27) sentencia -> random .

    DEF             reduce using rule 27 (sentencia -> random .)
    PUT             reduce using rule 27 (sentencia -> random .)
    ADD             reduce using rule 27 (sentencia -> random .)
    CONUP           reduce using rule 27 (sentencia -> random .)
    CONDOWN         reduce using rule 27 (sentencia -> random .)
    CONRIGHT        reduce using rule 27 (sentencia -> random .)
    CONLEFT         reduce using rule 27 (sentencia -> random .)
    POS             reduce using rule 27 (sentencia -> random .)
    POSX            reduce using rule 27 (sentencia -> random .)
    POSY            reduce using rule 27 (sentencia -> random .)
    USECOLOR        reduce using rule 27 (sentencia -> random .)
    DOWN            reduce using rule 27 (sentencia -> random .)
    UP              reduce using rule 27 (sentencia -> random .)
    BEGIN           reduce using rule 27 (sentencia -> random .)
    FOR             reduce using rule 27 (sentencia -> random .)
    CASE            reduce using rule 27 (sentencia -> random .)
    REPEAT          reduce using rule 27 (sentencia -> random .)
    WHILE           reduce using rule 27 (sentencia -> random .)
    EQUAL           reduce using rule 27 (sentencia -> random .)
    AND             reduce using rule 27 (sentencia -> random .)
    OR              reduce using rule 27 (sentencia -> random .)
    GREATER         reduce using rule 27 (sentencia -> random .)
    SMALLER         reduce using rule 27 (sentencia -> random .)
    SUBSTR          reduce using rule 27 (sentencia -> random .)
    RANDOM          reduce using rule 27 (sentencia -> random .)
    MULT            reduce using rule 27 (sentencia -> random .)
    DIV             reduce using rule 27 (sentencia -> random .)
    SUM             reduce using rule 27 (sentencia -> random .)
    PROC            reduce using rule 27 (sentencia -> random .)
    VARIABLE        reduce using rule 27 (sentencia -> random .)
    $end            reduce using rule 27 (sentencia -> random .)
    BRADER          reduce using rule 27 (sentencia -> random .)


state 28

    (28) sentencia -> mult .

    DEF             reduce using rule 28 (sentencia -> mult .)
    PUT             reduce using rule 28 (sentencia -> mult .)
    ADD             reduce using rule 28 (sentencia -> mult .)
    CONUP           reduce using rule 28 (sentencia -> mult .)
    CONDOWN         reduce using rule 28 (sentencia -> mult .)
    CONRIGHT        reduce using rule 28 (sentencia -> mult .)
    CONLEFT         reduce using rule 28 (sentencia -> mult .)
    POS             reduce using rule 28 (sentencia -> mult .)
    POSX            reduce using rule 28 (sentencia -> mult .)
    POSY            reduce using rule 28 (sentencia -> mult .)
    USECOLOR        reduce using rule 28 (sentencia -> mult .)
    DOWN            reduce using rule 28 (sentencia -> mult .)
    UP              reduce using rule 28 (sentencia -> mult .)
    BEGIN           reduce using rule 28 (sentencia -> mult .)
    FOR             reduce using rule 28 (sentencia -> mult .)
    CASE            reduce using rule 28 (sentencia -> mult .)
    REPEAT          reduce using rule 28 (sentencia -> mult .)
    WHILE           reduce using rule 28 (sentencia -> mult .)
    EQUAL           reduce using rule 28 (sentencia -> mult .)
    AND             reduce using rule 28 (sentencia -> mult .)
    OR              reduce using rule 28 (sentencia -> mult .)
    GREATER         reduce using rule 28 (sentencia -> mult .)
    SMALLER         reduce using rule 28 (sentencia -> mult .)
    SUBSTR          reduce using rule 28 (sentencia -> mult .)
    RANDOM          reduce using rule 28 (sentencia -> mult .)
    MULT            reduce using rule 28 (sentencia -> mult .)
    DIV             reduce using rule 28 (sentencia -> mult .)
    SUM             reduce using rule 28 (sentencia -> mult .)
    PROC            reduce using rule 28 (sentencia -> mult .)
    VARIABLE        reduce using rule 28 (sentencia -> mult .)
    $end            reduce using rule 28 (sentencia -> mult .)
    BRADER          reduce using rule 28 (sentencia -> mult .)


state 29

    (29) sentencia -> div .

    DEF             reduce using rule 29 (sentencia -> div .)
    PUT             reduce using rule 29 (sentencia -> div .)
    ADD             reduce using rule 29 (sentencia -> div .)
    CONUP           reduce using rule 29 (sentencia -> div .)
    CONDOWN         reduce using rule 29 (sentencia -> div .)
    CONRIGHT        reduce using rule 29 (sentencia -> div .)
    CONLEFT         reduce using rule 29 (sentencia -> div .)
    POS             reduce using rule 29 (sentencia -> div .)
    POSX            reduce using rule 29 (sentencia -> div .)
    POSY            reduce using rule 29 (sentencia -> div .)
    USECOLOR        reduce using rule 29 (sentencia -> div .)
    DOWN            reduce using rule 29 (sentencia -> div .)
    UP              reduce using rule 29 (sentencia -> div .)
    BEGIN           reduce using rule 29 (sentencia -> div .)
    FOR             reduce using rule 29 (sentencia -> div .)
    CASE            reduce using rule 29 (sentencia -> div .)
    REPEAT          reduce using rule 29 (sentencia -> div .)
    WHILE           reduce using rule 29 (sentencia -> div .)
    EQUAL           reduce using rule 29 (sentencia -> div .)
    AND             reduce using rule 29 (sentencia -> div .)
    OR              reduce using rule 29 (sentencia -> div .)
    GREATER         reduce using rule 29 (sentencia -> div .)
    SMALLER         reduce using rule 29 (sentencia -> div .)
    SUBSTR          reduce using rule 29 (sentencia -> div .)
    RANDOM          reduce using rule 29 (sentencia -> div .)
    MULT            reduce using rule 29 (sentencia -> div .)
    DIV             reduce using rule 29 (sentencia -> div .)
    SUM             reduce using rule 29 (sentencia -> div .)
    PROC            reduce using rule 29 (sentencia -> div .)
    VARIABLE        reduce using rule 29 (sentencia -> div .)
    $end            reduce using rule 29 (sentencia -> div .)
    BRADER          reduce using rule 29 (sentencia -> div .)


state 30

    (30) sentencia -> sum .

    DEF             reduce using rule 30 (sentencia -> sum .)
    PUT             reduce using rule 30 (sentencia -> sum .)
    ADD             reduce using rule 30 (sentencia -> sum .)
    CONUP           reduce using rule 30 (sentencia -> sum .)
    CONDOWN         reduce using rule 30 (sentencia -> sum .)
    CONRIGHT        reduce using rule 30 (sentencia -> sum .)
    CONLEFT         reduce using rule 30 (sentencia -> sum .)
    POS             reduce using rule 30 (sentencia -> sum .)
    POSX            reduce using rule 30 (sentencia -> sum .)
    POSY            reduce using rule 30 (sentencia -> sum .)
    USECOLOR        reduce using rule 30 (sentencia -> sum .)
    DOWN            reduce using rule 30 (sentencia -> sum .)
    UP              reduce using rule 30 (sentencia -> sum .)
    BEGIN           reduce using rule 30 (sentencia -> sum .)
    FOR             reduce using rule 30 (sentencia -> sum .)
    CASE            reduce using rule 30 (sentencia -> sum .)
    REPEAT          reduce using rule 30 (sentencia -> sum .)
    WHILE           reduce using rule 30 (sentencia -> sum .)
    EQUAL           reduce using rule 30 (sentencia -> sum .)
    AND             reduce using rule 30 (sentencia -> sum .)
    OR              reduce using rule 30 (sentencia -> sum .)
    GREATER         reduce using rule 30 (sentencia -> sum .)
    SMALLER         reduce using rule 30 (sentencia -> sum .)
    SUBSTR          reduce using rule 30 (sentencia -> sum .)
    RANDOM          reduce using rule 30 (sentencia -> sum .)
    MULT            reduce using rule 30 (sentencia -> sum .)
    DIV             reduce using rule 30 (sentencia -> sum .)
    SUM             reduce using rule 30 (sentencia -> sum .)
    PROC            reduce using rule 30 (sentencia -> sum .)
    VARIABLE        reduce using rule 30 (sentencia -> sum .)
    $end            reduce using rule 30 (sentencia -> sum .)
    BRADER          reduce using rule 30 (sentencia -> sum .)


state 31

    (31) sentencia -> proc .

    DEF             reduce using rule 31 (sentencia -> proc .)
    PUT             reduce using rule 31 (sentencia -> proc .)
    ADD             reduce using rule 31 (sentencia -> proc .)
    CONUP           reduce using rule 31 (sentencia -> proc .)
    CONDOWN         reduce using rule 31 (sentencia -> proc .)
    CONRIGHT        reduce using rule 31 (sentencia -> proc .)
    CONLEFT         reduce using rule 31 (sentencia -> proc .)
    POS             reduce using rule 31 (sentencia -> proc .)
    POSX            reduce using rule 31 (sentencia -> proc .)
    POSY            reduce using rule 31 (sentencia -> proc .)
    USECOLOR        reduce using rule 31 (sentencia -> proc .)
    DOWN            reduce using rule 31 (sentencia -> proc .)
    UP              reduce using rule 31 (sentencia -> proc .)
    BEGIN           reduce using rule 31 (sentencia -> proc .)
    FOR             reduce using rule 31 (sentencia -> proc .)
    CASE            reduce using rule 31 (sentencia -> proc .)
    REPEAT          reduce using rule 31 (sentencia -> proc .)
    WHILE           reduce using rule 31 (sentencia -> proc .)
    EQUAL           reduce using rule 31 (sentencia -> proc .)
    AND             reduce using rule 31 (sentencia -> proc .)
    OR              reduce using rule 31 (sentencia -> proc .)
    GREATER         reduce using rule 31 (sentencia -> proc .)
    SMALLER         reduce using rule 31 (sentencia -> proc .)
    SUBSTR          reduce using rule 31 (sentencia -> proc .)
    RANDOM          reduce using rule 31 (sentencia -> proc .)
    MULT            reduce using rule 31 (sentencia -> proc .)
    DIV             reduce using rule 31 (sentencia -> proc .)
    SUM             reduce using rule 31 (sentencia -> proc .)
    PROC            reduce using rule 31 (sentencia -> proc .)
    VARIABLE        reduce using rule 31 (sentencia -> proc .)
    $end            reduce using rule 31 (sentencia -> proc .)
    BRADER          reduce using rule 31 (sentencia -> proc .)


state 32

    (32) sentencia -> invocacion_proc .

    DEF             reduce using rule 32 (sentencia -> invocacion_proc .)
    PUT             reduce using rule 32 (sentencia -> invocacion_proc .)
    ADD             reduce using rule 32 (sentencia -> invocacion_proc .)
    CONUP           reduce using rule 32 (sentencia -> invocacion_proc .)
    CONDOWN         reduce using rule 32 (sentencia -> invocacion_proc .)
    CONRIGHT        reduce using rule 32 (sentencia -> invocacion_proc .)
    CONLEFT         reduce using rule 32 (sentencia -> invocacion_proc .)
    POS             reduce using rule 32 (sentencia -> invocacion_proc .)
    POSX            reduce using rule 32 (sentencia -> invocacion_proc .)
    POSY            reduce using rule 32 (sentencia -> invocacion_proc .)
    USECOLOR        reduce using rule 32 (sentencia -> invocacion_proc .)
    DOWN            reduce using rule 32 (sentencia -> invocacion_proc .)
    UP              reduce using rule 32 (sentencia -> invocacion_proc .)
    BEGIN           reduce using rule 32 (sentencia -> invocacion_proc .)
    FOR             reduce using rule 32 (sentencia -> invocacion_proc .)
    CASE            reduce using rule 32 (sentencia -> invocacion_proc .)
    REPEAT          reduce using rule 32 (sentencia -> invocacion_proc .)
    WHILE           reduce using rule 32 (sentencia -> invocacion_proc .)
    EQUAL           reduce using rule 32 (sentencia -> invocacion_proc .)
    AND             reduce using rule 32 (sentencia -> invocacion_proc .)
    OR              reduce using rule 32 (sentencia -> invocacion_proc .)
    GREATER         reduce using rule 32 (sentencia -> invocacion_proc .)
    SMALLER         reduce using rule 32 (sentencia -> invocacion_proc .)
    SUBSTR          reduce using rule 32 (sentencia -> invocacion_proc .)
    RANDOM          reduce using rule 32 (sentencia -> invocacion_proc .)
    MULT            reduce using rule 32 (sentencia -> invocacion_proc .)
    DIV             reduce using rule 32 (sentencia -> invocacion_proc .)
    SUM             reduce using rule 32 (sentencia -> invocacion_proc .)
    PROC            reduce using rule 32 (sentencia -> invocacion_proc .)
    VARIABLE        reduce using rule 32 (sentencia -> invocacion_proc .)
    $end            reduce using rule 32 (sentencia -> invocacion_proc .)
    BRADER          reduce using rule 32 (sentencia -> invocacion_proc .)


state 33

    (33) def_variable -> DEF . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 64


state 34

    (74) invocacion_proc -> VARIABLE . PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> VARIABLE . PARIZQ PARDER PUNTOCOMA

    PARIZQ          shift and go to state 65


state 35

    (34) put_variable -> PUT . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 66


state 36

    (35) add_variable -> ADD . PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> ADD . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 67


state 37

    (37) continue_up -> CONUP . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 68
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 38

    (38) continue_down -> CONDOWN . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 80
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 39

    (39) continue_right -> CONRIGHT . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 81
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 40

    (40) continue_left -> CONLEFT . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 82
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 41

    (41) pos -> POS . PARIZQ valor COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 83


state 42

    (42) posx -> POSX . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 84
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 43

    (43) posy -> POSY . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 85
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 44

    (44) use_color -> USECOLOR . valor PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 86
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 45

    (45) down -> DOWN . PUNTOCOMA

    PUNTOCOMA       shift and go to state 87


state 46

    (46) up -> UP . PUNTOCOMA

    PUNTOCOMA       shift and go to state 88


state 47

    (47) beginning -> BEGIN . PUNTOCOMA

    PUNTOCOMA       shift and go to state 89


state 48

    (48) for_loop -> FOR . VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    VARIABLE        shift and go to state 90


state 49

    (49) case -> CASE . VARIABLE when_cases end_case

    VARIABLE        shift and go to state 91


state 50

    (55) repeat_until -> REPEAT . BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA

    BRAIZQ          shift and go to state 92


state 51

    (56) while -> WHILE . BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    BRAIZQ          shift and go to state 93


state 52

    (57) equal -> EQUAL . PARIZQ valor COMA valor PARDER
    (58) equal -> EQUAL . PARIZQ condicion COMA condicion PARDER

    PARIZQ          shift and go to state 94


state 53

    (59) and -> AND . PARIZQ valor COMA valor PARDER
    (60) and -> AND . PARIZQ condicion COMA condicion PARDER

    PARIZQ          shift and go to state 95


state 54

    (61) or -> OR . PARIZQ valor COMA valor PARDER
    (62) or -> OR . PARIZQ condicion COMA condicion PARDER

    PARIZQ          shift and go to state 96


state 55

    (63) greater -> GREATER . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 97


state 56

    (64) smaller -> SMALLER . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 98


state 57

    (65) substr -> SUBSTR . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 99


state 58

    (66) random -> RANDOM . PARIZQ valor PARDER

    PARIZQ          shift and go to state 100


state 59

    (67) mult -> MULT . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 101


state 60

    (68) div -> DIV . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 102


state 61

    (69) sum -> SUM . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 103


state 62

    (70) proc -> PROC . VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> PROC . VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA

    VARIABLE        shift and go to state 104


state 63

    (2) sentencias -> sentencia sentencias .

    $end            reduce using rule 2 (sentencias -> sentencia sentencias .)
    BRADER          reduce using rule 2 (sentencias -> sentencia sentencias .)


state 64

    (33) def_variable -> DEF PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 105


state 65

    (74) invocacion_proc -> VARIABLE PARIZQ . lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> VARIABLE PARIZQ . PARDER PUNTOCOMA
    (76) lista_argumentos -> . valor
    (77) lista_argumentos -> . valor COMA lista_argumentos
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    PARDER          shift and go to state 107
    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    lista_argumentos               shift and go to state 106
    valor                          shift and go to state 108
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 66

    (34) put_variable -> PUT PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 109


state 67

    (35) add_variable -> ADD PARIZQ . VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> ADD PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 110


state 68

    (37) continue_up -> CONUP valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 111
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 69

    (78) valor -> NUMBER .

    PUNTOCOMA       reduce using rule 78 (valor -> NUMBER .)
    OP_MULT         reduce using rule 78 (valor -> NUMBER .)
    OP_DIV          reduce using rule 78 (valor -> NUMBER .)
    OP_SUM          reduce using rule 78 (valor -> NUMBER .)
    OP_SUB          reduce using rule 78 (valor -> NUMBER .)
    COMA            reduce using rule 78 (valor -> NUMBER .)
    PARDER          reduce using rule 78 (valor -> NUMBER .)
    OP_EQUAL        reduce using rule 78 (valor -> NUMBER .)
    OP_GREATER      reduce using rule 78 (valor -> NUMBER .)
    OP_SMALLER      reduce using rule 78 (valor -> NUMBER .)
    OP_AND          reduce using rule 78 (valor -> NUMBER .)
    OP_OR           reduce using rule 78 (valor -> NUMBER .)
    TO              reduce using rule 78 (valor -> NUMBER .)
    THEN            reduce using rule 78 (valor -> NUMBER .)
    BRADER          reduce using rule 78 (valor -> NUMBER .)


state 70

    (79) valor -> VARIABLE .

    PUNTOCOMA       reduce using rule 79 (valor -> VARIABLE .)
    OP_MULT         reduce using rule 79 (valor -> VARIABLE .)
    OP_DIV          reduce using rule 79 (valor -> VARIABLE .)
    OP_SUM          reduce using rule 79 (valor -> VARIABLE .)
    OP_SUB          reduce using rule 79 (valor -> VARIABLE .)
    COMA            reduce using rule 79 (valor -> VARIABLE .)
    PARDER          reduce using rule 79 (valor -> VARIABLE .)
    OP_EQUAL        reduce using rule 79 (valor -> VARIABLE .)
    OP_GREATER      reduce using rule 79 (valor -> VARIABLE .)
    OP_SMALLER      reduce using rule 79 (valor -> VARIABLE .)
    OP_AND          reduce using rule 79 (valor -> VARIABLE .)
    OP_OR           reduce using rule 79 (valor -> VARIABLE .)
    TO              reduce using rule 79 (valor -> VARIABLE .)
    THEN            reduce using rule 79 (valor -> VARIABLE .)
    BRADER          reduce using rule 79 (valor -> VARIABLE .)


state 71

    (80) valor -> expr .

    PUNTOCOMA       reduce using rule 80 (valor -> expr .)
    OP_MULT         reduce using rule 80 (valor -> expr .)
    OP_DIV          reduce using rule 80 (valor -> expr .)
    OP_SUM          reduce using rule 80 (valor -> expr .)
    OP_SUB          reduce using rule 80 (valor -> expr .)
    COMA            reduce using rule 80 (valor -> expr .)
    PARDER          reduce using rule 80 (valor -> expr .)
    OP_EQUAL        reduce using rule 80 (valor -> expr .)
    OP_GREATER      reduce using rule 80 (valor -> expr .)
    OP_SMALLER      reduce using rule 80 (valor -> expr .)
    OP_AND          reduce using rule 80 (valor -> expr .)
    OP_OR           reduce using rule 80 (valor -> expr .)
    TO              reduce using rule 80 (valor -> expr .)
    THEN            reduce using rule 80 (valor -> expr .)
    BRADER          reduce using rule 80 (valor -> expr .)


state 72

    (81) valor -> TRUE .

    PUNTOCOMA       reduce using rule 81 (valor -> TRUE .)
    OP_MULT         reduce using rule 81 (valor -> TRUE .)
    OP_DIV          reduce using rule 81 (valor -> TRUE .)
    OP_SUM          reduce using rule 81 (valor -> TRUE .)
    OP_SUB          reduce using rule 81 (valor -> TRUE .)
    COMA            reduce using rule 81 (valor -> TRUE .)
    PARDER          reduce using rule 81 (valor -> TRUE .)
    OP_EQUAL        reduce using rule 81 (valor -> TRUE .)
    OP_GREATER      reduce using rule 81 (valor -> TRUE .)
    OP_SMALLER      reduce using rule 81 (valor -> TRUE .)
    OP_AND          reduce using rule 81 (valor -> TRUE .)
    OP_OR           reduce using rule 81 (valor -> TRUE .)
    TO              reduce using rule 81 (valor -> TRUE .)
    THEN            reduce using rule 81 (valor -> TRUE .)
    BRADER          reduce using rule 81 (valor -> TRUE .)


state 73

    (82) valor -> FALSE .

    PUNTOCOMA       reduce using rule 82 (valor -> FALSE .)
    OP_MULT         reduce using rule 82 (valor -> FALSE .)
    OP_DIV          reduce using rule 82 (valor -> FALSE .)
    OP_SUM          reduce using rule 82 (valor -> FALSE .)
    OP_SUB          reduce using rule 82 (valor -> FALSE .)
    COMA            reduce using rule 82 (valor -> FALSE .)
    PARDER          reduce using rule 82 (valor -> FALSE .)
    OP_EQUAL        reduce using rule 82 (valor -> FALSE .)
    OP_GREATER      reduce using rule 82 (valor -> FALSE .)
    OP_SMALLER      reduce using rule 82 (valor -> FALSE .)
    OP_AND          reduce using rule 82 (valor -> FALSE .)
    OP_OR           reduce using rule 82 (valor -> FALSE .)
    TO              reduce using rule 82 (valor -> FALSE .)
    THEN            reduce using rule 82 (valor -> FALSE .)
    BRADER          reduce using rule 82 (valor -> FALSE .)


state 74

    (83) expr -> ADD . PARIZQ VARIABLE PARDER
    (84) expr -> ADD . PARIZQ VARIABLE COMA valor PARDER

    PARIZQ          shift and go to state 116


state 75

    (89) expr -> substr .

    PUNTOCOMA       reduce using rule 89 (expr -> substr .)
    OP_MULT         reduce using rule 89 (expr -> substr .)
    OP_DIV          reduce using rule 89 (expr -> substr .)
    OP_SUM          reduce using rule 89 (expr -> substr .)
    OP_SUB          reduce using rule 89 (expr -> substr .)
    COMA            reduce using rule 89 (expr -> substr .)
    PARDER          reduce using rule 89 (expr -> substr .)
    OP_EQUAL        reduce using rule 89 (expr -> substr .)
    OP_GREATER      reduce using rule 89 (expr -> substr .)
    OP_SMALLER      reduce using rule 89 (expr -> substr .)
    OP_AND          reduce using rule 89 (expr -> substr .)
    OP_OR           reduce using rule 89 (expr -> substr .)
    TO              reduce using rule 89 (expr -> substr .)
    THEN            reduce using rule 89 (expr -> substr .)
    BRADER          reduce using rule 89 (expr -> substr .)


state 76

    (90) expr -> random .

    PUNTOCOMA       reduce using rule 90 (expr -> random .)
    OP_MULT         reduce using rule 90 (expr -> random .)
    OP_DIV          reduce using rule 90 (expr -> random .)
    OP_SUM          reduce using rule 90 (expr -> random .)
    OP_SUB          reduce using rule 90 (expr -> random .)
    COMA            reduce using rule 90 (expr -> random .)
    PARDER          reduce using rule 90 (expr -> random .)
    OP_EQUAL        reduce using rule 90 (expr -> random .)
    OP_GREATER      reduce using rule 90 (expr -> random .)
    OP_SMALLER      reduce using rule 90 (expr -> random .)
    OP_AND          reduce using rule 90 (expr -> random .)
    OP_OR           reduce using rule 90 (expr -> random .)
    TO              reduce using rule 90 (expr -> random .)
    THEN            reduce using rule 90 (expr -> random .)
    BRADER          reduce using rule 90 (expr -> random .)


state 77

    (91) expr -> mult .

    PUNTOCOMA       reduce using rule 91 (expr -> mult .)
    OP_MULT         reduce using rule 91 (expr -> mult .)
    OP_DIV          reduce using rule 91 (expr -> mult .)
    OP_SUM          reduce using rule 91 (expr -> mult .)
    OP_SUB          reduce using rule 91 (expr -> mult .)
    COMA            reduce using rule 91 (expr -> mult .)
    PARDER          reduce using rule 91 (expr -> mult .)
    OP_EQUAL        reduce using rule 91 (expr -> mult .)
    OP_GREATER      reduce using rule 91 (expr -> mult .)
    OP_SMALLER      reduce using rule 91 (expr -> mult .)
    OP_AND          reduce using rule 91 (expr -> mult .)
    OP_OR           reduce using rule 91 (expr -> mult .)
    TO              reduce using rule 91 (expr -> mult .)
    THEN            reduce using rule 91 (expr -> mult .)
    BRADER          reduce using rule 91 (expr -> mult .)


state 78

    (92) expr -> div .

    PUNTOCOMA       reduce using rule 92 (expr -> div .)
    OP_MULT         reduce using rule 92 (expr -> div .)
    OP_DIV          reduce using rule 92 (expr -> div .)
    OP_SUM          reduce using rule 92 (expr -> div .)
    OP_SUB          reduce using rule 92 (expr -> div .)
    COMA            reduce using rule 92 (expr -> div .)
    PARDER          reduce using rule 92 (expr -> div .)
    OP_EQUAL        reduce using rule 92 (expr -> div .)
    OP_GREATER      reduce using rule 92 (expr -> div .)
    OP_SMALLER      reduce using rule 92 (expr -> div .)
    OP_AND          reduce using rule 92 (expr -> div .)
    OP_OR           reduce using rule 92 (expr -> div .)
    TO              reduce using rule 92 (expr -> div .)
    THEN            reduce using rule 92 (expr -> div .)
    BRADER          reduce using rule 92 (expr -> div .)


state 79

    (93) expr -> sum .

    PUNTOCOMA       reduce using rule 93 (expr -> sum .)
    OP_MULT         reduce using rule 93 (expr -> sum .)
    OP_DIV          reduce using rule 93 (expr -> sum .)
    OP_SUM          reduce using rule 93 (expr -> sum .)
    OP_SUB          reduce using rule 93 (expr -> sum .)
    COMA            reduce using rule 93 (expr -> sum .)
    PARDER          reduce using rule 93 (expr -> sum .)
    OP_EQUAL        reduce using rule 93 (expr -> sum .)
    OP_GREATER      reduce using rule 93 (expr -> sum .)
    OP_SMALLER      reduce using rule 93 (expr -> sum .)
    OP_AND          reduce using rule 93 (expr -> sum .)
    OP_OR           reduce using rule 93 (expr -> sum .)
    TO              reduce using rule 93 (expr -> sum .)
    THEN            reduce using rule 93 (expr -> sum .)
    BRADER          reduce using rule 93 (expr -> sum .)


state 80

    (38) continue_down -> CONDOWN valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 117
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 81

    (39) continue_right -> CONRIGHT valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 118
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 82

    (40) continue_left -> CONLEFT valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 119
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 83

    (41) pos -> POS PARIZQ . valor COMA valor PARDER PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 120
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 84

    (42) posx -> POSX valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 121
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 85

    (43) posy -> POSY valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 122
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 86

    (44) use_color -> USECOLOR valor . PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PUNTOCOMA       shift and go to state 123
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 87

    (45) down -> DOWN PUNTOCOMA .

    DEF             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    PUT             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    ADD             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    CONUP           reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    CONDOWN         reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    CONRIGHT        reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    CONLEFT         reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    POS             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    POSX            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    POSY            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    USECOLOR        reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    DOWN            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    UP              reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    BEGIN           reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    FOR             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    CASE            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    REPEAT          reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    WHILE           reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    EQUAL           reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    AND             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    OR              reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    GREATER         reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    SMALLER         reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    SUBSTR          reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    RANDOM          reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    MULT            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    DIV             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    SUM             reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    PROC            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    VARIABLE        reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    $end            reduce using rule 45 (down -> DOWN PUNTOCOMA .)
    BRADER          reduce using rule 45 (down -> DOWN PUNTOCOMA .)


state 88

    (46) up -> UP PUNTOCOMA .

    DEF             reduce using rule 46 (up -> UP PUNTOCOMA .)
    PUT             reduce using rule 46 (up -> UP PUNTOCOMA .)
    ADD             reduce using rule 46 (up -> UP PUNTOCOMA .)
    CONUP           reduce using rule 46 (up -> UP PUNTOCOMA .)
    CONDOWN         reduce using rule 46 (up -> UP PUNTOCOMA .)
    CONRIGHT        reduce using rule 46 (up -> UP PUNTOCOMA .)
    CONLEFT         reduce using rule 46 (up -> UP PUNTOCOMA .)
    POS             reduce using rule 46 (up -> UP PUNTOCOMA .)
    POSX            reduce using rule 46 (up -> UP PUNTOCOMA .)
    POSY            reduce using rule 46 (up -> UP PUNTOCOMA .)
    USECOLOR        reduce using rule 46 (up -> UP PUNTOCOMA .)
    DOWN            reduce using rule 46 (up -> UP PUNTOCOMA .)
    UP              reduce using rule 46 (up -> UP PUNTOCOMA .)
    BEGIN           reduce using rule 46 (up -> UP PUNTOCOMA .)
    FOR             reduce using rule 46 (up -> UP PUNTOCOMA .)
    CASE            reduce using rule 46 (up -> UP PUNTOCOMA .)
    REPEAT          reduce using rule 46 (up -> UP PUNTOCOMA .)
    WHILE           reduce using rule 46 (up -> UP PUNTOCOMA .)
    EQUAL           reduce using rule 46 (up -> UP PUNTOCOMA .)
    AND             reduce using rule 46 (up -> UP PUNTOCOMA .)
    OR              reduce using rule 46 (up -> UP PUNTOCOMA .)
    GREATER         reduce using rule 46 (up -> UP PUNTOCOMA .)
    SMALLER         reduce using rule 46 (up -> UP PUNTOCOMA .)
    SUBSTR          reduce using rule 46 (up -> UP PUNTOCOMA .)
    RANDOM          reduce using rule 46 (up -> UP PUNTOCOMA .)
    MULT            reduce using rule 46 (up -> UP PUNTOCOMA .)
    DIV             reduce using rule 46 (up -> UP PUNTOCOMA .)
    SUM             reduce using rule 46 (up -> UP PUNTOCOMA .)
    PROC            reduce using rule 46 (up -> UP PUNTOCOMA .)
    VARIABLE        reduce using rule 46 (up -> UP PUNTOCOMA .)
    $end            reduce using rule 46 (up -> UP PUNTOCOMA .)
    BRADER          reduce using rule 46 (up -> UP PUNTOCOMA .)


state 89

    (47) beginning -> BEGIN PUNTOCOMA .

    DEF             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    PUT             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    ADD             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    CONUP           reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    CONDOWN         reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    CONRIGHT        reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    CONLEFT         reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    POS             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    POSX            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    POSY            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    USECOLOR        reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    DOWN            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    UP              reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    BEGIN           reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    FOR             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    CASE            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    REPEAT          reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    WHILE           reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    EQUAL           reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    AND             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    OR              reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    GREATER         reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    SMALLER         reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    SUBSTR          reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    RANDOM          reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    MULT            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    DIV             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    SUM             reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    PROC            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    VARIABLE        reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    $end            reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)
    BRADER          reduce using rule 47 (beginning -> BEGIN PUNTOCOMA .)


state 90

    (48) for_loop -> FOR VARIABLE . PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    PARIZQ          shift and go to state 124


state 91

    (49) case -> CASE VARIABLE . when_cases end_case
    (50) when_cases -> . when_cases when_case
    (51) when_cases -> . when_case
    (52) when_case -> . WHEN valor THEN BRAIZQ sentencias BRADER

    WHEN            shift and go to state 127

    when_cases                     shift and go to state 125
    when_case                      shift and go to state 126

state 92

    (55) repeat_until -> REPEAT BRAIZQ . sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 128
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 93

    (56) while -> WHILE BRAIZQ . condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    condicion                      shift and go to state 129
    valor                          shift and go to state 130
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 94

    (57) equal -> EQUAL PARIZQ . valor COMA valor PARDER
    (58) equal -> EQUAL PARIZQ . condicion COMA condicion PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 136
    condicion                      shift and go to state 137
    expr                           shift and go to state 71
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 95

    (59) and -> AND PARIZQ . valor COMA valor PARDER
    (60) and -> AND PARIZQ . condicion COMA condicion PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 138
    condicion                      shift and go to state 139
    expr                           shift and go to state 71
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 96

    (61) or -> OR PARIZQ . valor COMA valor PARDER
    (62) or -> OR PARIZQ . condicion COMA condicion PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 140
    condicion                      shift and go to state 141
    expr                           shift and go to state 71
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 97

    (63) greater -> GREATER PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 142
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 98

    (64) smaller -> SMALLER PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 143
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 99

    (65) substr -> SUBSTR PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 144
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 100

    (66) random -> RANDOM PARIZQ . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 145
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 101

    (67) mult -> MULT PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 146
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 102

    (68) div -> DIV PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 147
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 103

    (69) sum -> SUM PARIZQ . valor COMA valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 148
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 104

    (70) proc -> PROC VARIABLE . PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> PROC VARIABLE . PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA

    PARIZQ          shift and go to state 149


state 105

    (33) def_variable -> DEF PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    COMA            shift and go to state 150


state 106

    (74) invocacion_proc -> VARIABLE PARIZQ lista_argumentos . PARDER PUNTOCOMA

    PARDER          shift and go to state 151


state 107

    (75) invocacion_proc -> VARIABLE PARIZQ PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 152


state 108

    (76) lista_argumentos -> valor .
    (77) lista_argumentos -> valor . COMA lista_argumentos
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          reduce using rule 76 (lista_argumentos -> valor .)
    COMA            shift and go to state 153
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 109

    (34) put_variable -> PUT PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    COMA            shift and go to state 154


state 110

    (35) add_variable -> ADD PARIZQ VARIABLE . PARDER PUNTOCOMA
    (36) add_variable -> ADD PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    PARDER          shift and go to state 155
    COMA            shift and go to state 156


state 111

    (37) continue_up -> CONUP valor PUNTOCOMA .

    DEF             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    PUT             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    ADD             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    CONUP           reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    CONDOWN         reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    CONLEFT         reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    POS             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    POSX            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    POSY            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    USECOLOR        reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    DOWN            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    UP              reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    BEGIN           reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    FOR             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    CASE            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    REPEAT          reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    WHILE           reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    EQUAL           reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    AND             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    OR              reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    GREATER         reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    SMALLER         reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    SUBSTR          reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    RANDOM          reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    MULT            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    DIV             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    SUM             reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    PROC            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    VARIABLE        reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    $end            reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)
    BRADER          reduce using rule 37 (continue_up -> CONUP valor PUNTOCOMA .)


state 112

    (85) expr -> valor OP_MULT . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 157
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 113

    (86) expr -> valor OP_DIV . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 158
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 114

    (87) expr -> valor OP_SUM . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 159
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 115

    (88) expr -> valor OP_SUB . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 160
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 116

    (83) expr -> ADD PARIZQ . VARIABLE PARDER
    (84) expr -> ADD PARIZQ . VARIABLE COMA valor PARDER

    VARIABLE        shift and go to state 161


state 117

    (38) continue_down -> CONDOWN valor PUNTOCOMA .

    DEF             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    PUT             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    ADD             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONUP           reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONDOWN         reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONLEFT         reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POS             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POSX            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POSY            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    USECOLOR        reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    DOWN            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    UP              reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    BEGIN           reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    FOR             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CASE            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    REPEAT          reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    WHILE           reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    EQUAL           reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    AND             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    OR              reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    GREATER         reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SMALLER         reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SUBSTR          reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    RANDOM          reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    MULT            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    DIV             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SUM             reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    PROC            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    VARIABLE        reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    $end            reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)
    BRADER          reduce using rule 38 (continue_down -> CONDOWN valor PUNTOCOMA .)


state 118

    (39) continue_right -> CONRIGHT valor PUNTOCOMA .

    DEF             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    PUT             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    ADD             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONUP           reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONDOWN         reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONLEFT         reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POS             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POSX            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POSY            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    USECOLOR        reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    DOWN            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    UP              reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    BEGIN           reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    FOR             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CASE            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    REPEAT          reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    WHILE           reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    EQUAL           reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    AND             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    OR              reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    GREATER         reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SMALLER         reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SUBSTR          reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    RANDOM          reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    MULT            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    DIV             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SUM             reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    PROC            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    VARIABLE        reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    $end            reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    BRADER          reduce using rule 39 (continue_right -> CONRIGHT valor PUNTOCOMA .)


state 119

    (40) continue_left -> CONLEFT valor PUNTOCOMA .

    DEF             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    PUT             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    ADD             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONUP           reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONDOWN         reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONLEFT         reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POS             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POSX            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POSY            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    USECOLOR        reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    DOWN            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    UP              reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    BEGIN           reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    FOR             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CASE            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    REPEAT          reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    WHILE           reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    EQUAL           reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    AND             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    OR              reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    GREATER         reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SMALLER         reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SUBSTR          reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    RANDOM          reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    MULT            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    DIV             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SUM             reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    PROC            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    VARIABLE        reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    $end            reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)
    BRADER          reduce using rule 40 (continue_left -> CONLEFT valor PUNTOCOMA .)


state 120

    (41) pos -> POS PARIZQ valor . COMA valor PARDER PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 162
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 121

    (42) posx -> POSX valor PUNTOCOMA .

    DEF             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    PUT             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    ADD             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    CONUP           reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    CONDOWN         reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    CONLEFT         reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    POS             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    POSX            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    POSY            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    USECOLOR        reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    DOWN            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    UP              reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    BEGIN           reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    FOR             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    CASE            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    REPEAT          reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    WHILE           reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    EQUAL           reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    AND             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    OR              reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    GREATER         reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    SMALLER         reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    SUBSTR          reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    RANDOM          reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    MULT            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    DIV             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    SUM             reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    PROC            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    VARIABLE        reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    $end            reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)
    BRADER          reduce using rule 42 (posx -> POSX valor PUNTOCOMA .)


state 122

    (43) posy -> POSY valor PUNTOCOMA .

    DEF             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    PUT             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    ADD             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    CONUP           reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    CONDOWN         reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    CONLEFT         reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    POS             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    POSX            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    POSY            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    USECOLOR        reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    DOWN            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    UP              reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    BEGIN           reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    FOR             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    CASE            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    REPEAT          reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    WHILE           reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    EQUAL           reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    AND             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    OR              reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    GREATER         reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    SMALLER         reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    SUBSTR          reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    RANDOM          reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    MULT            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    DIV             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    SUM             reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    PROC            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    VARIABLE        reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    $end            reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)
    BRADER          reduce using rule 43 (posy -> POSY valor PUNTOCOMA .)


state 123

    (44) use_color -> USECOLOR valor PUNTOCOMA .

    DEF             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    PUT             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    ADD             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONUP           reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONDOWN         reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONLEFT         reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    POS             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    POSX            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    POSY            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    USECOLOR        reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    DOWN            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    UP              reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    BEGIN           reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    FOR             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    CASE            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    REPEAT          reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    WHILE           reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    EQUAL           reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    AND             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    OR              reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    GREATER         reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    SMALLER         reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    SUBSTR          reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    RANDOM          reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    MULT            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    DIV             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    SUM             reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    PROC            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    VARIABLE        reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    $end            reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)
    BRADER          reduce using rule 44 (use_color -> USECOLOR valor PUNTOCOMA .)


state 124

    (48) for_loop -> FOR VARIABLE PARIZQ . valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 163
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 125

    (49) case -> CASE VARIABLE when_cases . end_case
    (50) when_cases -> when_cases . when_case
    (53) end_case -> . ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA
    (54) end_case -> . END CASE PUNTOCOMA
    (52) when_case -> . WHEN valor THEN BRAIZQ sentencias BRADER

    ELSE            shift and go to state 166
    END             shift and go to state 167
    WHEN            shift and go to state 127

    end_case                       shift and go to state 164
    when_case                      shift and go to state 165

state 126

    (51) when_cases -> when_case .

    ELSE            reduce using rule 51 (when_cases -> when_case .)
    END             reduce using rule 51 (when_cases -> when_case .)
    WHEN            reduce using rule 51 (when_cases -> when_case .)


state 127

    (52) when_case -> WHEN . valor THEN BRAIZQ sentencias BRADER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 168
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 128

    (55) repeat_until -> REPEAT BRAIZQ sentencias . BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA

    BRADER          shift and go to state 169


state 129

    (56) while -> WHILE BRAIZQ condicion . BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    BRADER          shift and go to state 170


state 130

    (94) condicion -> valor . OP_EQUAL valor
    (95) condicion -> valor . OP_GREATER valor
    (96) condicion -> valor . OP_SMALLER valor
    (97) condicion -> valor . OP_AND valor
    (98) condicion -> valor . OP_OR valor
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    OP_EQUAL        shift and go to state 171
    OP_GREATER      shift and go to state 172
    OP_SMALLER      shift and go to state 173
    OP_AND          shift and go to state 174
    OP_OR           shift and go to state 175
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 131

    (99) condicion -> equal .

    BRADER          reduce using rule 99 (condicion -> equal .)
    COMA            reduce using rule 99 (condicion -> equal .)
    PARDER          reduce using rule 99 (condicion -> equal .)


state 132

    (100) condicion -> greater .

    BRADER          reduce using rule 100 (condicion -> greater .)
    COMA            reduce using rule 100 (condicion -> greater .)
    PARDER          reduce using rule 100 (condicion -> greater .)


state 133

    (101) condicion -> smaller .

    BRADER          reduce using rule 101 (condicion -> smaller .)
    COMA            reduce using rule 101 (condicion -> smaller .)
    PARDER          reduce using rule 101 (condicion -> smaller .)


state 134

    (102) condicion -> and .

    BRADER          reduce using rule 102 (condicion -> and .)
    COMA            reduce using rule 102 (condicion -> and .)
    PARDER          reduce using rule 102 (condicion -> and .)


state 135

    (103) condicion -> or .

    BRADER          reduce using rule 103 (condicion -> or .)
    COMA            reduce using rule 103 (condicion -> or .)
    PARDER          reduce using rule 103 (condicion -> or .)


state 136

    (57) equal -> EQUAL PARIZQ valor . COMA valor PARDER
    (94) condicion -> valor . OP_EQUAL valor
    (95) condicion -> valor . OP_GREATER valor
    (96) condicion -> valor . OP_SMALLER valor
    (97) condicion -> valor . OP_AND valor
    (98) condicion -> valor . OP_OR valor
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 176
    OP_EQUAL        shift and go to state 171
    OP_GREATER      shift and go to state 172
    OP_SMALLER      shift and go to state 173
    OP_AND          shift and go to state 174
    OP_OR           shift and go to state 175
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 137

    (58) equal -> EQUAL PARIZQ condicion . COMA condicion PARDER

    COMA            shift and go to state 177


state 138

    (59) and -> AND PARIZQ valor . COMA valor PARDER
    (94) condicion -> valor . OP_EQUAL valor
    (95) condicion -> valor . OP_GREATER valor
    (96) condicion -> valor . OP_SMALLER valor
    (97) condicion -> valor . OP_AND valor
    (98) condicion -> valor . OP_OR valor
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 178
    OP_EQUAL        shift and go to state 171
    OP_GREATER      shift and go to state 172
    OP_SMALLER      shift and go to state 173
    OP_AND          shift and go to state 174
    OP_OR           shift and go to state 175
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 139

    (60) and -> AND PARIZQ condicion . COMA condicion PARDER

    COMA            shift and go to state 179


state 140

    (61) or -> OR PARIZQ valor . COMA valor PARDER
    (94) condicion -> valor . OP_EQUAL valor
    (95) condicion -> valor . OP_GREATER valor
    (96) condicion -> valor . OP_SMALLER valor
    (97) condicion -> valor . OP_AND valor
    (98) condicion -> valor . OP_OR valor
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 180
    OP_EQUAL        shift and go to state 171
    OP_GREATER      shift and go to state 172
    OP_SMALLER      shift and go to state 173
    OP_AND          shift and go to state 174
    OP_OR           shift and go to state 175
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 141

    (62) or -> OR PARIZQ condicion . COMA condicion PARDER

    COMA            shift and go to state 181


state 142

    (63) greater -> GREATER PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 182
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 143

    (64) smaller -> SMALLER PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 183
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 144

    (65) substr -> SUBSTR PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 184
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 145

    (66) random -> RANDOM PARIZQ valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 185
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 146

    (67) mult -> MULT PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 186
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 147

    (68) div -> DIV PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 187
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 148

    (69) sum -> SUM PARIZQ valor . COMA valor PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    COMA            shift and go to state 188
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 149

    (70) proc -> PROC VARIABLE PARIZQ . lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> PROC VARIABLE PARIZQ . PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (72) lista_parametros -> . VARIABLE
    (73) lista_parametros -> . VARIABLE COMA lista_parametros

    PARDER          shift and go to state 191
    VARIABLE        shift and go to state 189

    lista_parametros               shift and go to state 190

state 150

    (33) def_variable -> DEF PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 192
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 151

    (74) invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 193


state 152

    (75) invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .

    DEF             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    PUT             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    ADD             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    CONUP           reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    POS             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    POSX            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    POSY            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    DOWN            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    UP              reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    FOR             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    CASE            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    WHILE           reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    AND             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    OR              reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    GREATER         reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    MULT            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    DIV             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    SUM             reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    PROC            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    $end            reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)
    BRADER          reduce using rule 75 (invocacion_proc -> VARIABLE PARIZQ PARDER PUNTOCOMA .)


state 153

    (77) lista_argumentos -> valor COMA . lista_argumentos
    (76) lista_argumentos -> . valor
    (77) lista_argumentos -> . valor COMA lista_argumentos
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 108
    lista_argumentos               shift and go to state 194
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 154

    (34) put_variable -> PUT PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 195
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 155

    (35) add_variable -> ADD PARIZQ VARIABLE PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 196


state 156

    (36) add_variable -> ADD PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 197
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 157

    (85) expr -> valor OP_MULT valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIV resolved as shift
  ! shift/reduce conflict for OP_SUM resolved as shift
  ! shift/reduce conflict for OP_SUB resolved as shift
    PUNTOCOMA       reduce using rule 85 (expr -> valor OP_MULT valor .)
    COMA            reduce using rule 85 (expr -> valor OP_MULT valor .)
    PARDER          reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_EQUAL        reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_GREATER      reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_SMALLER      reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_AND          reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_OR           reduce using rule 85 (expr -> valor OP_MULT valor .)
    TO              reduce using rule 85 (expr -> valor OP_MULT valor .)
    THEN            reduce using rule 85 (expr -> valor OP_MULT valor .)
    BRADER          reduce using rule 85 (expr -> valor OP_MULT valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115

  ! OP_MULT         [ reduce using rule 85 (expr -> valor OP_MULT valor .) ]
  ! OP_DIV          [ reduce using rule 85 (expr -> valor OP_MULT valor .) ]
  ! OP_SUM          [ reduce using rule 85 (expr -> valor OP_MULT valor .) ]
  ! OP_SUB          [ reduce using rule 85 (expr -> valor OP_MULT valor .) ]


state 158

    (86) expr -> valor OP_DIV valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIV resolved as shift
  ! shift/reduce conflict for OP_SUM resolved as shift
  ! shift/reduce conflict for OP_SUB resolved as shift
    PUNTOCOMA       reduce using rule 86 (expr -> valor OP_DIV valor .)
    COMA            reduce using rule 86 (expr -> valor OP_DIV valor .)
    PARDER          reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_EQUAL        reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_GREATER      reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_SMALLER      reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_AND          reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_OR           reduce using rule 86 (expr -> valor OP_DIV valor .)
    TO              reduce using rule 86 (expr -> valor OP_DIV valor .)
    THEN            reduce using rule 86 (expr -> valor OP_DIV valor .)
    BRADER          reduce using rule 86 (expr -> valor OP_DIV valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115

  ! OP_MULT         [ reduce using rule 86 (expr -> valor OP_DIV valor .) ]
  ! OP_DIV          [ reduce using rule 86 (expr -> valor OP_DIV valor .) ]
  ! OP_SUM          [ reduce using rule 86 (expr -> valor OP_DIV valor .) ]
  ! OP_SUB          [ reduce using rule 86 (expr -> valor OP_DIV valor .) ]


state 159

    (87) expr -> valor OP_SUM valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIV resolved as shift
  ! shift/reduce conflict for OP_SUM resolved as shift
  ! shift/reduce conflict for OP_SUB resolved as shift
    PUNTOCOMA       reduce using rule 87 (expr -> valor OP_SUM valor .)
    COMA            reduce using rule 87 (expr -> valor OP_SUM valor .)
    PARDER          reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_EQUAL        reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_GREATER      reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_SMALLER      reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_AND          reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_OR           reduce using rule 87 (expr -> valor OP_SUM valor .)
    TO              reduce using rule 87 (expr -> valor OP_SUM valor .)
    THEN            reduce using rule 87 (expr -> valor OP_SUM valor .)
    BRADER          reduce using rule 87 (expr -> valor OP_SUM valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115

  ! OP_MULT         [ reduce using rule 87 (expr -> valor OP_SUM valor .) ]
  ! OP_DIV          [ reduce using rule 87 (expr -> valor OP_SUM valor .) ]
  ! OP_SUM          [ reduce using rule 87 (expr -> valor OP_SUM valor .) ]
  ! OP_SUB          [ reduce using rule 87 (expr -> valor OP_SUM valor .) ]


state 160

    (88) expr -> valor OP_SUB valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

  ! shift/reduce conflict for OP_MULT resolved as shift
  ! shift/reduce conflict for OP_DIV resolved as shift
  ! shift/reduce conflict for OP_SUM resolved as shift
  ! shift/reduce conflict for OP_SUB resolved as shift
    PUNTOCOMA       reduce using rule 88 (expr -> valor OP_SUB valor .)
    COMA            reduce using rule 88 (expr -> valor OP_SUB valor .)
    PARDER          reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_EQUAL        reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_GREATER      reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_SMALLER      reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_AND          reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_OR           reduce using rule 88 (expr -> valor OP_SUB valor .)
    TO              reduce using rule 88 (expr -> valor OP_SUB valor .)
    THEN            reduce using rule 88 (expr -> valor OP_SUB valor .)
    BRADER          reduce using rule 88 (expr -> valor OP_SUB valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115

  ! OP_MULT         [ reduce using rule 88 (expr -> valor OP_SUB valor .) ]
  ! OP_DIV          [ reduce using rule 88 (expr -> valor OP_SUB valor .) ]
  ! OP_SUM          [ reduce using rule 88 (expr -> valor OP_SUB valor .) ]
  ! OP_SUB          [ reduce using rule 88 (expr -> valor OP_SUB valor .) ]


state 161

    (83) expr -> ADD PARIZQ VARIABLE . PARDER
    (84) expr -> ADD PARIZQ VARIABLE . COMA valor PARDER

    PARDER          shift and go to state 198
    COMA            shift and go to state 199


state 162

    (41) pos -> POS PARIZQ valor COMA . valor PARDER PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 200
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 163

    (48) for_loop -> FOR VARIABLE PARIZQ valor . TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    TO              shift and go to state 201
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 164

    (49) case -> CASE VARIABLE when_cases end_case .

    DEF             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    PUT             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    ADD             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    CONUP           reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    CONDOWN         reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    CONRIGHT        reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    CONLEFT         reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    POS             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    POSX            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    POSY            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    USECOLOR        reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    DOWN            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    UP              reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    BEGIN           reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    FOR             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    CASE            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    REPEAT          reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    WHILE           reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    EQUAL           reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    AND             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    OR              reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    GREATER         reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    SMALLER         reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    SUBSTR          reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    RANDOM          reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    MULT            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    DIV             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    SUM             reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    PROC            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    VARIABLE        reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    $end            reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)
    BRADER          reduce using rule 49 (case -> CASE VARIABLE when_cases end_case .)


state 165

    (50) when_cases -> when_cases when_case .

    ELSE            reduce using rule 50 (when_cases -> when_cases when_case .)
    END             reduce using rule 50 (when_cases -> when_cases when_case .)
    WHEN            reduce using rule 50 (when_cases -> when_cases when_case .)


state 166

    (53) end_case -> ELSE . BRAIZQ sentencias BRADER END CASE PUNTOCOMA

    BRAIZQ          shift and go to state 202


state 167

    (54) end_case -> END . CASE PUNTOCOMA

    CASE            shift and go to state 203


state 168

    (52) when_case -> WHEN valor . THEN BRAIZQ sentencias BRADER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    THEN            shift and go to state 204
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 169

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER . UNTIL BRAIZQ condicion BRADER PUNTOCOMA

    UNTIL           shift and go to state 205


state 170

    (56) while -> WHILE BRAIZQ condicion BRADER . BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    BRAIZQ          shift and go to state 206


state 171

    (94) condicion -> valor OP_EQUAL . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 207
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 172

    (95) condicion -> valor OP_GREATER . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 208
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 173

    (96) condicion -> valor OP_SMALLER . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 209
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 174

    (97) condicion -> valor OP_AND . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 210
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 175

    (98) condicion -> valor OP_OR . valor
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 211
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 176

    (57) equal -> EQUAL PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 212
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 177

    (58) equal -> EQUAL PARIZQ condicion COMA . condicion PARDER
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    condicion                      shift and go to state 213
    valor                          shift and go to state 130
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 178

    (59) and -> AND PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 214
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 179

    (60) and -> AND PARIZQ condicion COMA . condicion PARDER
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    condicion                      shift and go to state 215
    valor                          shift and go to state 130
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 180

    (61) or -> OR PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 216
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 181

    (62) or -> OR PARIZQ condicion COMA . condicion PARDER
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    condicion                      shift and go to state 217
    valor                          shift and go to state 130
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 182

    (63) greater -> GREATER PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 218
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 183

    (64) smaller -> SMALLER PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 219
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 184

    (65) substr -> SUBSTR PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 220
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 185

    (66) random -> RANDOM PARIZQ valor PARDER .

    DEF             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    PUT             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    ADD             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    CONUP           reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    CONDOWN         reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    CONRIGHT        reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    CONLEFT         reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    POS             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    POSX            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    POSY            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    USECOLOR        reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    DOWN            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    UP              reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    BEGIN           reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    FOR             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    CASE            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    REPEAT          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    WHILE           reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    EQUAL           reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    AND             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OR              reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    GREATER         reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    SMALLER         reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    SUBSTR          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    RANDOM          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    MULT            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    DIV             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    SUM             reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    PROC            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    VARIABLE        reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    $end            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    BRADER          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    PUNTOCOMA       reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_MULT         reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_DIV          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_SUM          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_SUB          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    COMA            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    PARDER          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_EQUAL        reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_GREATER      reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_SMALLER      reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_AND          reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    OP_OR           reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    TO              reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)
    THEN            reduce using rule 66 (random -> RANDOM PARIZQ valor PARDER .)


state 186

    (67) mult -> MULT PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 221
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 187

    (68) div -> DIV PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 222
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 188

    (69) sum -> SUM PARIZQ valor COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 223
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 189

    (72) lista_parametros -> VARIABLE .
    (73) lista_parametros -> VARIABLE . COMA lista_parametros

    PARDER          reduce using rule 72 (lista_parametros -> VARIABLE .)
    COMA            shift and go to state 224


state 190

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros . PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA

    PARDER          shift and go to state 225


state 191

    (71) proc -> PROC VARIABLE PARIZQ PARDER . BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA

    BRAIZQ          shift and go to state 226


state 192

    (33) def_variable -> DEF PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 227
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 193

    (74) invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .

    DEF             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    PUT             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    ADD             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    CONUP           reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    POS             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    POSX            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    POSY            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    DOWN            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    UP              reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    FOR             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    CASE            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    WHILE           reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    AND             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    OR              reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    GREATER         reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    MULT            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    DIV             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    SUM             reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    PROC            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    $end            reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)
    BRADER          reduce using rule 74 (invocacion_proc -> VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA .)


state 194

    (77) lista_argumentos -> valor COMA lista_argumentos .

    PARDER          reduce using rule 77 (lista_argumentos -> valor COMA lista_argumentos .)


state 195

    (34) put_variable -> PUT PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 228
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 196

    (35) add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .

    DEF             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    PUT             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    ADD             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONUP           reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POS             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POSX            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POSY            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    DOWN            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    UP              reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    FOR             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CASE            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    WHILE           reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    AND             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    OR              reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    GREATER         reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    MULT            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    DIV             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SUM             reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    PROC            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    $end            reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    BRADER          reduce using rule 35 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)


state 197

    (36) add_variable -> ADD PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 229
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 198

    (83) expr -> ADD PARIZQ VARIABLE PARDER .

    PUNTOCOMA       reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_MULT         reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_DIV          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_SUM          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_SUB          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    COMA            reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    PARDER          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_EQUAL        reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_GREATER      reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_SMALLER      reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_AND          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    OP_OR           reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    TO              reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    THEN            reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)
    BRADER          reduce using rule 83 (expr -> ADD PARIZQ VARIABLE PARDER .)


state 199

    (84) expr -> ADD PARIZQ VARIABLE COMA . valor PARDER
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 230
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 200

    (41) pos -> POS PARIZQ valor COMA valor . PARDER PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 231
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 201

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO . valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    valor                          shift and go to state 232
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 202

    (53) end_case -> ELSE BRAIZQ . sentencias BRADER END CASE PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 233
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 203

    (54) end_case -> END CASE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 234


state 204

    (52) when_case -> WHEN valor THEN . BRAIZQ sentencias BRADER

    BRAIZQ          shift and go to state 235


state 205

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL . BRAIZQ condicion BRADER PUNTOCOMA

    BRAIZQ          shift and go to state 236


state 206

    (56) while -> WHILE BRAIZQ condicion BRADER BRAIZQ . sentencias BRADER WHEND PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 237
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 207

    (94) condicion -> valor OP_EQUAL valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    BRADER          reduce using rule 94 (condicion -> valor OP_EQUAL valor .)
    COMA            reduce using rule 94 (condicion -> valor OP_EQUAL valor .)
    PARDER          reduce using rule 94 (condicion -> valor OP_EQUAL valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 208

    (95) condicion -> valor OP_GREATER valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    BRADER          reduce using rule 95 (condicion -> valor OP_GREATER valor .)
    COMA            reduce using rule 95 (condicion -> valor OP_GREATER valor .)
    PARDER          reduce using rule 95 (condicion -> valor OP_GREATER valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 209

    (96) condicion -> valor OP_SMALLER valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    BRADER          reduce using rule 96 (condicion -> valor OP_SMALLER valor .)
    COMA            reduce using rule 96 (condicion -> valor OP_SMALLER valor .)
    PARDER          reduce using rule 96 (condicion -> valor OP_SMALLER valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 210

    (97) condicion -> valor OP_AND valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    BRADER          reduce using rule 97 (condicion -> valor OP_AND valor .)
    COMA            reduce using rule 97 (condicion -> valor OP_AND valor .)
    PARDER          reduce using rule 97 (condicion -> valor OP_AND valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 211

    (98) condicion -> valor OP_OR valor .
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    BRADER          reduce using rule 98 (condicion -> valor OP_OR valor .)
    COMA            reduce using rule 98 (condicion -> valor OP_OR valor .)
    PARDER          reduce using rule 98 (condicion -> valor OP_OR valor .)
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 212

    (57) equal -> EQUAL PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 238
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 213

    (58) equal -> EQUAL PARIZQ condicion COMA condicion . PARDER

    PARDER          shift and go to state 239


state 214

    (59) and -> AND PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 240
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 215

    (60) and -> AND PARIZQ condicion COMA condicion . PARDER

    PARDER          shift and go to state 241


state 216

    (61) or -> OR PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 242
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 217

    (62) or -> OR PARIZQ condicion COMA condicion . PARDER

    PARDER          shift and go to state 243


state 218

    (63) greater -> GREATER PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 244
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 219

    (64) smaller -> SMALLER PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 245
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 220

    (65) substr -> SUBSTR PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 246
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 221

    (67) mult -> MULT PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 247
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 222

    (68) div -> DIV PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 248
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 223

    (69) sum -> SUM PARIZQ valor COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 249
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 224

    (73) lista_parametros -> VARIABLE COMA . lista_parametros
    (72) lista_parametros -> . VARIABLE
    (73) lista_parametros -> . VARIABLE COMA lista_parametros

    VARIABLE        shift and go to state 189

    lista_parametros               shift and go to state 250

state 225

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER . BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA

    BRAIZQ          shift and go to state 251


state 226

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ . sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 252
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 227

    (33) def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 253


state 228

    (34) put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 254


state 229

    (36) add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 255


state 230

    (84) expr -> ADD PARIZQ VARIABLE COMA valor . PARDER
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 256
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 231

    (41) pos -> POS PARIZQ valor COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 257


state 232

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor . PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (85) expr -> valor . OP_MULT valor
    (86) expr -> valor . OP_DIV valor
    (87) expr -> valor . OP_SUM valor
    (88) expr -> valor . OP_SUB valor

    PARDER          shift and go to state 258
    OP_MULT         shift and go to state 112
    OP_DIV          shift and go to state 113
    OP_SUM          shift and go to state 114
    OP_SUB          shift and go to state 115


state 233

    (53) end_case -> ELSE BRAIZQ sentencias . BRADER END CASE PUNTOCOMA

    BRADER          shift and go to state 259


state 234

    (54) end_case -> END CASE PUNTOCOMA .

    DEF             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    PUT             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    ADD             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    CONUP           reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    CONDOWN         reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    CONRIGHT        reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    CONLEFT         reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    POS             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    POSX            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    POSY            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    USECOLOR        reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    DOWN            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    UP              reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    BEGIN           reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    FOR             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    CASE            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    REPEAT          reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    WHILE           reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    EQUAL           reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    AND             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    OR              reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    GREATER         reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    SMALLER         reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    SUBSTR          reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    RANDOM          reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    MULT            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    DIV             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    SUM             reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    PROC            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    VARIABLE        reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    $end            reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)
    BRADER          reduce using rule 54 (end_case -> END CASE PUNTOCOMA .)


state 235

    (52) when_case -> WHEN valor THEN BRAIZQ . sentencias BRADER
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 260
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 236

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ . condicion BRADER PUNTOCOMA
    (94) condicion -> . valor OP_EQUAL valor
    (95) condicion -> . valor OP_GREATER valor
    (96) condicion -> . valor OP_SMALLER valor
    (97) condicion -> . valor OP_AND valor
    (98) condicion -> . valor OP_OR valor
    (99) condicion -> . equal
    (100) condicion -> . greater
    (101) condicion -> . smaller
    (102) condicion -> . and
    (103) condicion -> . or
    (78) valor -> . NUMBER
    (79) valor -> . VARIABLE
    (80) valor -> . expr
    (81) valor -> . TRUE
    (82) valor -> . FALSE
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (83) expr -> . ADD PARIZQ VARIABLE PARDER
    (84) expr -> . ADD PARIZQ VARIABLE COMA valor PARDER
    (85) expr -> . valor OP_MULT valor
    (86) expr -> . valor OP_DIV valor
    (87) expr -> . valor OP_SUM valor
    (88) expr -> . valor OP_SUB valor
    (89) expr -> . substr
    (90) expr -> . random
    (91) expr -> . mult
    (92) expr -> . div
    (93) expr -> . sum
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER

    NUMBER          shift and go to state 69
    VARIABLE        shift and go to state 70
    TRUE            shift and go to state 72
    FALSE           shift and go to state 73
    EQUAL           shift and go to state 52
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    AND             shift and go to state 53
    OR              shift and go to state 54
    ADD             shift and go to state 74
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61

    condicion                      shift and go to state 261
    valor                          shift and go to state 130
    equal                          shift and go to state 131
    greater                        shift and go to state 132
    smaller                        shift and go to state 133
    and                            shift and go to state 134
    or                             shift and go to state 135
    expr                           shift and go to state 71
    substr                         shift and go to state 75
    random                         shift and go to state 76
    mult                           shift and go to state 77
    div                            shift and go to state 78
    sum                            shift and go to state 79

state 237

    (56) while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias . BRADER WHEND PUNTOCOMA

    BRADER          shift and go to state 262


state 238

    (57) equal -> EQUAL PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 57 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)


state 239

    (58) equal -> EQUAL PARIZQ condicion COMA condicion PARDER .

    DEF             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    PUT             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    ADD             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    CONUP           reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    CONDOWN         reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    CONRIGHT        reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    CONLEFT         reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    POS             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    POSX            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    POSY            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    USECOLOR        reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    DOWN            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    UP              reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    BEGIN           reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    FOR             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    CASE            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    REPEAT          reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    WHILE           reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    EQUAL           reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    AND             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    OR              reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    GREATER         reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    SMALLER         reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    SUBSTR          reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    RANDOM          reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    MULT            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    DIV             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    SUM             reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    PROC            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    VARIABLE        reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    $end            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    BRADER          reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    COMA            reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)
    PARDER          reduce using rule 58 (equal -> EQUAL PARIZQ condicion COMA condicion PARDER .)


state 240

    (59) and -> AND PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 59 (and -> AND PARIZQ valor COMA valor PARDER .)


state 241

    (60) and -> AND PARIZQ condicion COMA condicion PARDER .

    DEF             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    PUT             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    ADD             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    CONUP           reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    CONDOWN         reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    CONRIGHT        reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    CONLEFT         reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    POS             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    POSX            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    POSY            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    USECOLOR        reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    DOWN            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    UP              reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    BEGIN           reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    FOR             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    CASE            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    REPEAT          reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    WHILE           reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    EQUAL           reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    AND             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    OR              reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    GREATER         reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    SMALLER         reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    SUBSTR          reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    RANDOM          reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    MULT            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    DIV             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    SUM             reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    PROC            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    VARIABLE        reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    $end            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    BRADER          reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    COMA            reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)
    PARDER          reduce using rule 60 (and -> AND PARIZQ condicion COMA condicion PARDER .)


state 242

    (61) or -> OR PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 61 (or -> OR PARIZQ valor COMA valor PARDER .)


state 243

    (62) or -> OR PARIZQ condicion COMA condicion PARDER .

    DEF             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    PUT             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    ADD             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    CONUP           reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    CONDOWN         reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    CONRIGHT        reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    CONLEFT         reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    POS             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    POSX            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    POSY            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    USECOLOR        reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    DOWN            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    UP              reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    BEGIN           reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    FOR             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    CASE            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    REPEAT          reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    WHILE           reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    EQUAL           reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    AND             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    OR              reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    GREATER         reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    SMALLER         reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    SUBSTR          reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    RANDOM          reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    MULT            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    DIV             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    SUM             reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    PROC            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    VARIABLE        reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    $end            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    BRADER          reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    COMA            reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)
    PARDER          reduce using rule 62 (or -> OR PARIZQ condicion COMA condicion PARDER .)


state 244

    (63) greater -> GREATER PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 63 (greater -> GREATER PARIZQ valor COMA valor PARDER .)


state 245

    (64) smaller -> SMALLER PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 64 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)


state 246

    (65) substr -> SUBSTR PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    PUNTOCOMA       reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_MULT         reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_DIV          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_SUM          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_SUB          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_EQUAL        reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_GREATER      reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_SMALLER      reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_AND          reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OP_OR           reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    TO              reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    THEN            reduce using rule 65 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)


state 247

    (67) mult -> MULT PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    PUNTOCOMA       reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_MULT         reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_DIV          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_SUM          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_SUB          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_EQUAL        reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_GREATER      reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_SMALLER      reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_AND          reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OP_OR           reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    TO              reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    THEN            reduce using rule 67 (mult -> MULT PARIZQ valor COMA valor PARDER .)


state 248

    (68) div -> DIV PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    PUNTOCOMA       reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_MULT         reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_DIV          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_SUM          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_SUB          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_EQUAL        reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_GREATER      reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_SMALLER      reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_AND          reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OP_OR           reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    TO              reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)
    THEN            reduce using rule 68 (div -> DIV PARIZQ valor COMA valor PARDER .)


state 249

    (69) sum -> SUM PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    PROC            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    VARIABLE        reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    PUNTOCOMA       reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_MULT         reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_DIV          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_SUM          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_SUB          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    COMA            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_EQUAL        reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_GREATER      reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_SMALLER      reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_AND          reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OP_OR           reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    TO              reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    THEN            reduce using rule 69 (sum -> SUM PARIZQ valor COMA valor PARDER .)


state 250

    (73) lista_parametros -> VARIABLE COMA lista_parametros .

    PARDER          reduce using rule 73 (lista_parametros -> VARIABLE COMA lista_parametros .)


state 251

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ . sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 263
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 252

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias . BRADER PUNTOCOMA END PUNTOCOMA

    BRADER          shift and go to state 264


state 253

    (33) def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PROC            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 33 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 254

    (34) put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PROC            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 34 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 255

    (36) add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PROC            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 36 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 256

    (84) expr -> ADD PARIZQ VARIABLE COMA valor PARDER .

    PUNTOCOMA       reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_MULT         reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_DIV          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_SUM          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_SUB          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    COMA            reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    PARDER          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_EQUAL        reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_GREATER      reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_SMALLER      reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_AND          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    OP_OR           reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    TO              reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    THEN            reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)
    BRADER          reduce using rule 84 (expr -> ADD PARIZQ VARIABLE COMA valor PARDER .)


state 257

    (41) pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    PROC            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    VARIABLE        reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 41 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)


state 258

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER . LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    LOOP            shift and go to state 265


state 259

    (53) end_case -> ELSE BRAIZQ sentencias BRADER . END CASE PUNTOCOMA

    END             shift and go to state 266


state 260

    (52) when_case -> WHEN valor THEN BRAIZQ sentencias . BRADER

    BRADER          shift and go to state 267


state 261

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion . BRADER PUNTOCOMA

    BRADER          shift and go to state 268


state 262

    (56) while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER . WHEND PUNTOCOMA

    WHEND           shift and go to state 269


state 263

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias . BRADER PUNTOCOMA END PUNTOCOMA

    BRADER          shift and go to state 270


state 264

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER . PUNTOCOMA END PUNTOCOMA

    PUNTOCOMA       shift and go to state 271


state 265

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP . BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    BRAIZQ          shift and go to state 272


state 266

    (53) end_case -> ELSE BRAIZQ sentencias BRADER END . CASE PUNTOCOMA

    CASE            shift and go to state 273


state 267

    (52) when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .

    ELSE            reduce using rule 52 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)
    END             reduce using rule 52 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)
    WHEN            reduce using rule 52 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)


state 268

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 274


state 269

    (56) while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND . PUNTOCOMA

    PUNTOCOMA       shift and go to state 275


state 270

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER . PUNTOCOMA END PUNTOCOMA

    PUNTOCOMA       shift and go to state 276


state 271

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA . END PUNTOCOMA

    END             shift and go to state 277


state 272

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ . sentencias BRADER END LOOP PUNTOCOMA
    (1) sentencias -> . sentencia
    (2) sentencias -> . sentencia sentencias
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) sentencia -> . proc
    (32) sentencia -> . invocacion_proc
    (33) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (34) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (36) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (37) continue_up -> . CONUP valor PUNTOCOMA
    (38) continue_down -> . CONDOWN valor PUNTOCOMA
    (39) continue_right -> . CONRIGHT valor PUNTOCOMA
    (40) continue_left -> . CONLEFT valor PUNTOCOMA
    (41) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (42) posx -> . POSX valor PUNTOCOMA
    (43) posy -> . POSY valor PUNTOCOMA
    (44) use_color -> . USECOLOR valor PUNTOCOMA
    (45) down -> . DOWN PUNTOCOMA
    (46) up -> . UP PUNTOCOMA
    (47) beginning -> . BEGIN PUNTOCOMA
    (48) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (49) case -> . CASE VARIABLE when_cases end_case
    (55) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA
    (56) while -> . WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (57) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) equal -> . EQUAL PARIZQ condicion COMA condicion PARDER
    (59) and -> . AND PARIZQ valor COMA valor PARDER
    (60) and -> . AND PARIZQ condicion COMA condicion PARDER
    (61) or -> . OR PARIZQ valor COMA valor PARDER
    (62) or -> . OR PARIZQ condicion COMA condicion PARDER
    (63) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (64) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (65) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (66) random -> . RANDOM PARIZQ valor PARDER
    (67) mult -> . MULT PARIZQ valor COMA valor PARDER
    (68) div -> . DIV PARIZQ valor COMA valor PARDER
    (69) sum -> . SUM PARIZQ valor COMA valor PARDER
    (70) proc -> . PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (71) proc -> . PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA
    (74) invocacion_proc -> . VARIABLE PARIZQ lista_argumentos PARDER PUNTOCOMA
    (75) invocacion_proc -> . VARIABLE PARIZQ PARDER PUNTOCOMA

    DEF             shift and go to state 33
    PUT             shift and go to state 35
    ADD             shift and go to state 36
    CONUP           shift and go to state 37
    CONDOWN         shift and go to state 38
    CONRIGHT        shift and go to state 39
    CONLEFT         shift and go to state 40
    POS             shift and go to state 41
    POSX            shift and go to state 42
    POSY            shift and go to state 43
    USECOLOR        shift and go to state 44
    DOWN            shift and go to state 45
    UP              shift and go to state 46
    BEGIN           shift and go to state 47
    FOR             shift and go to state 48
    CASE            shift and go to state 49
    REPEAT          shift and go to state 50
    WHILE           shift and go to state 51
    EQUAL           shift and go to state 52
    AND             shift and go to state 53
    OR              shift and go to state 54
    GREATER         shift and go to state 55
    SMALLER         shift and go to state 56
    SUBSTR          shift and go to state 57
    RANDOM          shift and go to state 58
    MULT            shift and go to state 59
    DIV             shift and go to state 60
    SUM             shift and go to state 61
    PROC            shift and go to state 62
    VARIABLE        shift and go to state 34

    sentencias                     shift and go to state 278
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30
    proc                           shift and go to state 31
    invocacion_proc                shift and go to state 32

state 273

    (53) end_case -> ELSE BRAIZQ sentencias BRADER END CASE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 279


state 274

    (55) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .

    DEF             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    PUT             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    ADD             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    CONUP           reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    CONDOWN         reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    CONRIGHT        reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    CONLEFT         reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    POS             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    POSX            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    POSY            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    USECOLOR        reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    DOWN            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    UP              reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    BEGIN           reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    FOR             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    CASE            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    REPEAT          reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    WHILE           reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    EQUAL           reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    AND             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    OR              reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    GREATER         reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    SMALLER         reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    SUBSTR          reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    RANDOM          reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    MULT            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    DIV             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    SUM             reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    PROC            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    VARIABLE        reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    $end            reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)
    BRADER          reduce using rule 55 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL BRAIZQ condicion BRADER PUNTOCOMA .)


state 275

    (56) while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .

    DEF             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    PUT             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    ADD             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONUP           reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONDOWN         reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONRIGHT        reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONLEFT         reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POS             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POSX            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POSY            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    USECOLOR        reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    DOWN            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    UP              reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    BEGIN           reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    FOR             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CASE            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    REPEAT          reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    WHILE           reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    EQUAL           reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    AND             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    OR              reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    GREATER         reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SMALLER         reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SUBSTR          reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    RANDOM          reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    MULT            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    DIV             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SUM             reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    PROC            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    VARIABLE        reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    $end            reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    BRADER          reduce using rule 56 (while -> WHILE BRAIZQ condicion BRADER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)


state 276

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA . END PUNTOCOMA

    END             shift and go to state 280


state 277

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END . PUNTOCOMA

    PUNTOCOMA       shift and go to state 281


state 278

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias . BRADER END LOOP PUNTOCOMA

    BRADER          shift and go to state 282


state 279

    (53) end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .

    DEF             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    PUT             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    ADD             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONUP           reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONDOWN         reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONRIGHT        reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONLEFT         reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POS             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POSX            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POSY            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    USECOLOR        reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    DOWN            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    UP              reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    BEGIN           reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    FOR             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CASE            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    REPEAT          reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    WHILE           reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    EQUAL           reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    AND             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    OR              reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    GREATER         reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SMALLER         reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SUBSTR          reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    RANDOM          reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    MULT            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    DIV             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SUM             reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    PROC            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    VARIABLE        reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    $end            reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    BRADER          reduce using rule 53 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)


state 280

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END . PUNTOCOMA

    PUNTOCOMA       shift and go to state 283


state 281

    (71) proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .

    DEF             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    PUT             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    ADD             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONUP           reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONDOWN         reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONRIGHT        reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONLEFT         reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POS             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POSX            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POSY            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    USECOLOR        reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    DOWN            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    UP              reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    BEGIN           reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    FOR             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CASE            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    REPEAT          reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    WHILE           reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    EQUAL           reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    AND             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    OR              reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    GREATER         reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SMALLER         reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SUBSTR          reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    RANDOM          reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    MULT            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    DIV             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SUM             reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    PROC            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    VARIABLE        reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    $end            reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    BRADER          reduce using rule 71 (proc -> PROC VARIABLE PARIZQ PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)


state 282

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER . END LOOP PUNTOCOMA

    END             shift and go to state 284


state 283

    (70) proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .

    DEF             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    PUT             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    ADD             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONUP           reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONDOWN         reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONRIGHT        reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CONLEFT         reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POS             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POSX            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    POSY            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    USECOLOR        reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    DOWN            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    UP              reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    BEGIN           reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    FOR             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    CASE            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    REPEAT          reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    WHILE           reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    EQUAL           reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    AND             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    OR              reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    GREATER         reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SMALLER         reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SUBSTR          reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    RANDOM          reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    MULT            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    DIV             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    SUM             reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    PROC            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    VARIABLE        reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    $end            reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)
    BRADER          reduce using rule 70 (proc -> PROC VARIABLE PARIZQ lista_parametros PARDER BRAIZQ sentencias BRADER PUNTOCOMA END PUNTOCOMA .)


state 284

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END . LOOP PUNTOCOMA

    LOOP            shift and go to state 285


state 285

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP . PUNTOCOMA

    PUNTOCOMA       shift and go to state 286


state 286

    (48) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .

    DEF             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    PUT             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    ADD             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONUP           reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONDOWN         reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONRIGHT        reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONLEFT         reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POS             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POSX            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POSY            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    USECOLOR        reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    DOWN            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    UP              reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    BEGIN           reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    FOR             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CASE            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    REPEAT          reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    WHILE           reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    EQUAL           reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    AND             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    OR              reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    GREATER         reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SMALLER         reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SUBSTR          reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    RANDOM          reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    MULT            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    DIV             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SUM             reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    PROC            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    VARIABLE        reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    $end            reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    BRADER          reduce using rule 48 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OP_MULT in state 157 resolved as shift
WARNING: shift/reduce conflict for OP_DIV in state 157 resolved as shift
WARNING: shift/reduce conflict for OP_SUM in state 157 resolved as shift
WARNING: shift/reduce conflict for OP_SUB in state 157 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 158 resolved as shift
WARNING: shift/reduce conflict for OP_DIV in state 158 resolved as shift
WARNING: shift/reduce conflict for OP_SUM in state 158 resolved as shift
WARNING: shift/reduce conflict for OP_SUB in state 158 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 159 resolved as shift
WARNING: shift/reduce conflict for OP_DIV in state 159 resolved as shift
WARNING: shift/reduce conflict for OP_SUM in state 159 resolved as shift
WARNING: shift/reduce conflict for OP_SUB in state 159 resolved as shift
WARNING: shift/reduce conflict for OP_MULT in state 160 resolved as shift
WARNING: shift/reduce conflict for OP_DIV in state 160 resolved as shift
WARNING: shift/reduce conflict for OP_SUM in state 160 resolved as shift
WARNING: shift/reduce conflict for OP_SUB in state 160 resolved as shift
