Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    PROC
    TEXT

Grammar

Rule 0     S' -> sentencias
Rule 1     sentencias -> sentencia sentencias
Rule 2     sentencias -> sentencia
Rule 3     sentencia -> def_variable
Rule 4     sentencia -> put_variable
Rule 5     sentencia -> add_variable
Rule 6     sentencia -> continue_up
Rule 7     sentencia -> continue_down
Rule 8     sentencia -> continue_right
Rule 9     sentencia -> continue_left
Rule 10    sentencia -> pos
Rule 11    sentencia -> posx
Rule 12    sentencia -> posy
Rule 13    sentencia -> use_color
Rule 14    sentencia -> down
Rule 15    sentencia -> up
Rule 16    sentencia -> beginning
Rule 17    sentencia -> for_loop
Rule 18    sentencia -> case
Rule 19    sentencia -> repeat_until
Rule 20    sentencia -> while
Rule 21    sentencia -> equal
Rule 22    sentencia -> and
Rule 23    sentencia -> or
Rule 24    sentencia -> greater
Rule 25    sentencia -> smaller
Rule 26    sentencia -> substr
Rule 27    sentencia -> random
Rule 28    sentencia -> mult
Rule 29    sentencia -> div
Rule 30    sentencia -> sum
Rule 31    def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 32    put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 33    add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA
Rule 34    add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
Rule 35    continue_up -> CONUP valor PUNTOCOMA
Rule 36    continue_down -> CONDOWN valor PUNTOCOMA
Rule 37    continue_right -> CONRIGHT valor PUNTOCOMA
Rule 38    continue_left -> CONLEFT valor PUNTOCOMA
Rule 39    pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA
Rule 40    posx -> POSX valor PUNTOCOMA
Rule 41    posy -> POSY valor PUNTOCOMA
Rule 42    use_color -> USECOLOR valor PUNTOCOMA
Rule 43    down -> DOWN PUNTOCOMA
Rule 44    up -> UP PUNTOCOMA
Rule 45    beginning -> BEGIN PUNTOCOMA
Rule 46    for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
Rule 47    case -> CASE VARIABLE when_cases end_case
Rule 48    when_cases -> when_cases when_case
Rule 49    when_cases -> when_case
Rule 50    when_case -> WHEN valor THEN BRAIZQ sentencias BRADER
Rule 51    end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA
Rule 52    end_case -> END CASE PUNTOCOMA
Rule 53    repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
Rule 54    while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
Rule 55    equal -> EQUAL PARIZQ valor COMA valor PARDER
Rule 56    and -> AND PARIZQ valor COMA valor PARDER
Rule 57    or -> OR PARIZQ valor COMA valor PARDER
Rule 58    greater -> GREATER PARIZQ valor COMA valor PARDER
Rule 59    smaller -> SMALLER PARIZQ valor COMA valor PARDER
Rule 60    substr -> SUBSTR PARIZQ valor COMA valor PARDER
Rule 61    random -> RANDOM PARIZQ valor PARDER
Rule 62    mult -> MULT PARIZQ valor COMA valor PARDER
Rule 63    div -> DIV PARIZQ valor COMA valor PARDER
Rule 64    sum -> SUM PARIZQ valor COMA valor PARDER
Rule 65    valor -> NUMBER
Rule 66    valor -> VARIABLE
Rule 67    valor -> expr
Rule 68    valor -> TRUE
Rule 69    valor -> FALSE
Rule 70    expr -> valor MULT valor
Rule 71    expr -> valor DIV valor
Rule 72    expr -> valor SUM valor
Rule 73    expr -> valor SUBSTR valor
Rule 74    condicion -> equal
Rule 75    condicion -> greater
Rule 76    condicion -> smaller
Rule 77    condicion -> and
Rule 78    condicion -> or

Terminals, with rules where they appear

ADD                  : 33 34
AND                  : 56
BEGIN                : 45
BRADER               : 46 50 51 53 54
BRAIZQ               : 46 50 51 53 54
CASE                 : 47 51 52
COMA                 : 31 32 34 39 55 56 57 58 59 60 62 63 64
COMMENT              : 
CONDOWN              : 36
CONLEFT              : 38
CONRIGHT             : 37
CONUP                : 35
DEF                  : 31
DIV                  : 63 71
DOWN                 : 43
ELSE                 : 51
END                  : 46 51 52
EQUAL                : 55
FALSE                : 69
FOR                  : 46
GREATER              : 58
LOOP                 : 46 46
MULT                 : 62 70
NUMBER               : 65
OR                   : 57
PARDER               : 31 32 33 34 39 46 53 54 55 56 57 58 59 60 61 62 63 64
PARIZQ               : 31 32 33 34 39 46 53 54 55 56 57 58 59 60 61 62 63 64
POS                  : 39
POSX                 : 40
POSY                 : 41
PROC                 : 
PUNTOCOMA            : 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 51 52 53 54
PUT                  : 32
RANDOM               : 61
REPEAT               : 53
SMALLER              : 59
SUBSTR               : 60 73
SUM                  : 64 72
TEXT                 : 
THEN                 : 50
TO                   : 46
TRUE                 : 68
UNTIL                : 53
UP                   : 44
USECOLOR             : 42
VARIABLE             : 31 32 33 34 46 47 66
WHEN                 : 50
WHEND                : 54
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

add_variable         : 5
and                  : 22 77
beginning            : 16
case                 : 18
condicion            : 53 54
continue_down        : 7
continue_left        : 9
continue_right       : 8
continue_up          : 6
def_variable         : 3
div                  : 29
down                 : 14
end_case             : 47
equal                : 21 74
expr                 : 67
for_loop             : 17
greater              : 24 75
mult                 : 28
or                   : 23 78
pos                  : 10
posx                 : 11
posy                 : 12
put_variable         : 4
random               : 27
repeat_until         : 19
sentencia            : 1 2
sentencias           : 1 46 50 51 53 54 0
smaller              : 25 76
substr               : 26
sum                  : 30
up                   : 15
use_color            : 13
valor                : 31 32 34 35 36 37 38 39 39 40 41 42 46 46 50 55 55 56 56 57 57 58 58 59 59 60 60 61 62 62 63 63 64 64 70 70 71 71 72 72 73 73
when_case            : 48 49
when_cases           : 47 48
while                : 20

Parsing method: LALR

state 0

    (0) S' -> . sentencias
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 1
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 1

    (0) S' -> sentencias .



state 2

    (1) sentencias -> sentencia . sentencias
    (2) sentencias -> sentencia .
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    $end            reduce using rule 2 (sentencias -> sentencia .)
    BRADER          reduce using rule 2 (sentencias -> sentencia .)
    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencia                      shift and go to state 2
    sentencias                     shift and go to state 59
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 3

    (3) sentencia -> def_variable .

    DEF             reduce using rule 3 (sentencia -> def_variable .)
    PUT             reduce using rule 3 (sentencia -> def_variable .)
    ADD             reduce using rule 3 (sentencia -> def_variable .)
    CONUP           reduce using rule 3 (sentencia -> def_variable .)
    CONDOWN         reduce using rule 3 (sentencia -> def_variable .)
    CONRIGHT        reduce using rule 3 (sentencia -> def_variable .)
    CONLEFT         reduce using rule 3 (sentencia -> def_variable .)
    POS             reduce using rule 3 (sentencia -> def_variable .)
    POSX            reduce using rule 3 (sentencia -> def_variable .)
    POSY            reduce using rule 3 (sentencia -> def_variable .)
    USECOLOR        reduce using rule 3 (sentencia -> def_variable .)
    DOWN            reduce using rule 3 (sentencia -> def_variable .)
    UP              reduce using rule 3 (sentencia -> def_variable .)
    BEGIN           reduce using rule 3 (sentencia -> def_variable .)
    FOR             reduce using rule 3 (sentencia -> def_variable .)
    CASE            reduce using rule 3 (sentencia -> def_variable .)
    REPEAT          reduce using rule 3 (sentencia -> def_variable .)
    WHILE           reduce using rule 3 (sentencia -> def_variable .)
    EQUAL           reduce using rule 3 (sentencia -> def_variable .)
    AND             reduce using rule 3 (sentencia -> def_variable .)
    OR              reduce using rule 3 (sentencia -> def_variable .)
    GREATER         reduce using rule 3 (sentencia -> def_variable .)
    SMALLER         reduce using rule 3 (sentencia -> def_variable .)
    SUBSTR          reduce using rule 3 (sentencia -> def_variable .)
    RANDOM          reduce using rule 3 (sentencia -> def_variable .)
    MULT            reduce using rule 3 (sentencia -> def_variable .)
    DIV             reduce using rule 3 (sentencia -> def_variable .)
    SUM             reduce using rule 3 (sentencia -> def_variable .)
    $end            reduce using rule 3 (sentencia -> def_variable .)
    BRADER          reduce using rule 3 (sentencia -> def_variable .)


state 4

    (4) sentencia -> put_variable .

    DEF             reduce using rule 4 (sentencia -> put_variable .)
    PUT             reduce using rule 4 (sentencia -> put_variable .)
    ADD             reduce using rule 4 (sentencia -> put_variable .)
    CONUP           reduce using rule 4 (sentencia -> put_variable .)
    CONDOWN         reduce using rule 4 (sentencia -> put_variable .)
    CONRIGHT        reduce using rule 4 (sentencia -> put_variable .)
    CONLEFT         reduce using rule 4 (sentencia -> put_variable .)
    POS             reduce using rule 4 (sentencia -> put_variable .)
    POSX            reduce using rule 4 (sentencia -> put_variable .)
    POSY            reduce using rule 4 (sentencia -> put_variable .)
    USECOLOR        reduce using rule 4 (sentencia -> put_variable .)
    DOWN            reduce using rule 4 (sentencia -> put_variable .)
    UP              reduce using rule 4 (sentencia -> put_variable .)
    BEGIN           reduce using rule 4 (sentencia -> put_variable .)
    FOR             reduce using rule 4 (sentencia -> put_variable .)
    CASE            reduce using rule 4 (sentencia -> put_variable .)
    REPEAT          reduce using rule 4 (sentencia -> put_variable .)
    WHILE           reduce using rule 4 (sentencia -> put_variable .)
    EQUAL           reduce using rule 4 (sentencia -> put_variable .)
    AND             reduce using rule 4 (sentencia -> put_variable .)
    OR              reduce using rule 4 (sentencia -> put_variable .)
    GREATER         reduce using rule 4 (sentencia -> put_variable .)
    SMALLER         reduce using rule 4 (sentencia -> put_variable .)
    SUBSTR          reduce using rule 4 (sentencia -> put_variable .)
    RANDOM          reduce using rule 4 (sentencia -> put_variable .)
    MULT            reduce using rule 4 (sentencia -> put_variable .)
    DIV             reduce using rule 4 (sentencia -> put_variable .)
    SUM             reduce using rule 4 (sentencia -> put_variable .)
    $end            reduce using rule 4 (sentencia -> put_variable .)
    BRADER          reduce using rule 4 (sentencia -> put_variable .)


state 5

    (5) sentencia -> add_variable .

    DEF             reduce using rule 5 (sentencia -> add_variable .)
    PUT             reduce using rule 5 (sentencia -> add_variable .)
    ADD             reduce using rule 5 (sentencia -> add_variable .)
    CONUP           reduce using rule 5 (sentencia -> add_variable .)
    CONDOWN         reduce using rule 5 (sentencia -> add_variable .)
    CONRIGHT        reduce using rule 5 (sentencia -> add_variable .)
    CONLEFT         reduce using rule 5 (sentencia -> add_variable .)
    POS             reduce using rule 5 (sentencia -> add_variable .)
    POSX            reduce using rule 5 (sentencia -> add_variable .)
    POSY            reduce using rule 5 (sentencia -> add_variable .)
    USECOLOR        reduce using rule 5 (sentencia -> add_variable .)
    DOWN            reduce using rule 5 (sentencia -> add_variable .)
    UP              reduce using rule 5 (sentencia -> add_variable .)
    BEGIN           reduce using rule 5 (sentencia -> add_variable .)
    FOR             reduce using rule 5 (sentencia -> add_variable .)
    CASE            reduce using rule 5 (sentencia -> add_variable .)
    REPEAT          reduce using rule 5 (sentencia -> add_variable .)
    WHILE           reduce using rule 5 (sentencia -> add_variable .)
    EQUAL           reduce using rule 5 (sentencia -> add_variable .)
    AND             reduce using rule 5 (sentencia -> add_variable .)
    OR              reduce using rule 5 (sentencia -> add_variable .)
    GREATER         reduce using rule 5 (sentencia -> add_variable .)
    SMALLER         reduce using rule 5 (sentencia -> add_variable .)
    SUBSTR          reduce using rule 5 (sentencia -> add_variable .)
    RANDOM          reduce using rule 5 (sentencia -> add_variable .)
    MULT            reduce using rule 5 (sentencia -> add_variable .)
    DIV             reduce using rule 5 (sentencia -> add_variable .)
    SUM             reduce using rule 5 (sentencia -> add_variable .)
    $end            reduce using rule 5 (sentencia -> add_variable .)
    BRADER          reduce using rule 5 (sentencia -> add_variable .)


state 6

    (6) sentencia -> continue_up .

    DEF             reduce using rule 6 (sentencia -> continue_up .)
    PUT             reduce using rule 6 (sentencia -> continue_up .)
    ADD             reduce using rule 6 (sentencia -> continue_up .)
    CONUP           reduce using rule 6 (sentencia -> continue_up .)
    CONDOWN         reduce using rule 6 (sentencia -> continue_up .)
    CONRIGHT        reduce using rule 6 (sentencia -> continue_up .)
    CONLEFT         reduce using rule 6 (sentencia -> continue_up .)
    POS             reduce using rule 6 (sentencia -> continue_up .)
    POSX            reduce using rule 6 (sentencia -> continue_up .)
    POSY            reduce using rule 6 (sentencia -> continue_up .)
    USECOLOR        reduce using rule 6 (sentencia -> continue_up .)
    DOWN            reduce using rule 6 (sentencia -> continue_up .)
    UP              reduce using rule 6 (sentencia -> continue_up .)
    BEGIN           reduce using rule 6 (sentencia -> continue_up .)
    FOR             reduce using rule 6 (sentencia -> continue_up .)
    CASE            reduce using rule 6 (sentencia -> continue_up .)
    REPEAT          reduce using rule 6 (sentencia -> continue_up .)
    WHILE           reduce using rule 6 (sentencia -> continue_up .)
    EQUAL           reduce using rule 6 (sentencia -> continue_up .)
    AND             reduce using rule 6 (sentencia -> continue_up .)
    OR              reduce using rule 6 (sentencia -> continue_up .)
    GREATER         reduce using rule 6 (sentencia -> continue_up .)
    SMALLER         reduce using rule 6 (sentencia -> continue_up .)
    SUBSTR          reduce using rule 6 (sentencia -> continue_up .)
    RANDOM          reduce using rule 6 (sentencia -> continue_up .)
    MULT            reduce using rule 6 (sentencia -> continue_up .)
    DIV             reduce using rule 6 (sentencia -> continue_up .)
    SUM             reduce using rule 6 (sentencia -> continue_up .)
    $end            reduce using rule 6 (sentencia -> continue_up .)
    BRADER          reduce using rule 6 (sentencia -> continue_up .)


state 7

    (7) sentencia -> continue_down .

    DEF             reduce using rule 7 (sentencia -> continue_down .)
    PUT             reduce using rule 7 (sentencia -> continue_down .)
    ADD             reduce using rule 7 (sentencia -> continue_down .)
    CONUP           reduce using rule 7 (sentencia -> continue_down .)
    CONDOWN         reduce using rule 7 (sentencia -> continue_down .)
    CONRIGHT        reduce using rule 7 (sentencia -> continue_down .)
    CONLEFT         reduce using rule 7 (sentencia -> continue_down .)
    POS             reduce using rule 7 (sentencia -> continue_down .)
    POSX            reduce using rule 7 (sentencia -> continue_down .)
    POSY            reduce using rule 7 (sentencia -> continue_down .)
    USECOLOR        reduce using rule 7 (sentencia -> continue_down .)
    DOWN            reduce using rule 7 (sentencia -> continue_down .)
    UP              reduce using rule 7 (sentencia -> continue_down .)
    BEGIN           reduce using rule 7 (sentencia -> continue_down .)
    FOR             reduce using rule 7 (sentencia -> continue_down .)
    CASE            reduce using rule 7 (sentencia -> continue_down .)
    REPEAT          reduce using rule 7 (sentencia -> continue_down .)
    WHILE           reduce using rule 7 (sentencia -> continue_down .)
    EQUAL           reduce using rule 7 (sentencia -> continue_down .)
    AND             reduce using rule 7 (sentencia -> continue_down .)
    OR              reduce using rule 7 (sentencia -> continue_down .)
    GREATER         reduce using rule 7 (sentencia -> continue_down .)
    SMALLER         reduce using rule 7 (sentencia -> continue_down .)
    SUBSTR          reduce using rule 7 (sentencia -> continue_down .)
    RANDOM          reduce using rule 7 (sentencia -> continue_down .)
    MULT            reduce using rule 7 (sentencia -> continue_down .)
    DIV             reduce using rule 7 (sentencia -> continue_down .)
    SUM             reduce using rule 7 (sentencia -> continue_down .)
    $end            reduce using rule 7 (sentencia -> continue_down .)
    BRADER          reduce using rule 7 (sentencia -> continue_down .)


state 8

    (8) sentencia -> continue_right .

    DEF             reduce using rule 8 (sentencia -> continue_right .)
    PUT             reduce using rule 8 (sentencia -> continue_right .)
    ADD             reduce using rule 8 (sentencia -> continue_right .)
    CONUP           reduce using rule 8 (sentencia -> continue_right .)
    CONDOWN         reduce using rule 8 (sentencia -> continue_right .)
    CONRIGHT        reduce using rule 8 (sentencia -> continue_right .)
    CONLEFT         reduce using rule 8 (sentencia -> continue_right .)
    POS             reduce using rule 8 (sentencia -> continue_right .)
    POSX            reduce using rule 8 (sentencia -> continue_right .)
    POSY            reduce using rule 8 (sentencia -> continue_right .)
    USECOLOR        reduce using rule 8 (sentencia -> continue_right .)
    DOWN            reduce using rule 8 (sentencia -> continue_right .)
    UP              reduce using rule 8 (sentencia -> continue_right .)
    BEGIN           reduce using rule 8 (sentencia -> continue_right .)
    FOR             reduce using rule 8 (sentencia -> continue_right .)
    CASE            reduce using rule 8 (sentencia -> continue_right .)
    REPEAT          reduce using rule 8 (sentencia -> continue_right .)
    WHILE           reduce using rule 8 (sentencia -> continue_right .)
    EQUAL           reduce using rule 8 (sentencia -> continue_right .)
    AND             reduce using rule 8 (sentencia -> continue_right .)
    OR              reduce using rule 8 (sentencia -> continue_right .)
    GREATER         reduce using rule 8 (sentencia -> continue_right .)
    SMALLER         reduce using rule 8 (sentencia -> continue_right .)
    SUBSTR          reduce using rule 8 (sentencia -> continue_right .)
    RANDOM          reduce using rule 8 (sentencia -> continue_right .)
    MULT            reduce using rule 8 (sentencia -> continue_right .)
    DIV             reduce using rule 8 (sentencia -> continue_right .)
    SUM             reduce using rule 8 (sentencia -> continue_right .)
    $end            reduce using rule 8 (sentencia -> continue_right .)
    BRADER          reduce using rule 8 (sentencia -> continue_right .)


state 9

    (9) sentencia -> continue_left .

    DEF             reduce using rule 9 (sentencia -> continue_left .)
    PUT             reduce using rule 9 (sentencia -> continue_left .)
    ADD             reduce using rule 9 (sentencia -> continue_left .)
    CONUP           reduce using rule 9 (sentencia -> continue_left .)
    CONDOWN         reduce using rule 9 (sentencia -> continue_left .)
    CONRIGHT        reduce using rule 9 (sentencia -> continue_left .)
    CONLEFT         reduce using rule 9 (sentencia -> continue_left .)
    POS             reduce using rule 9 (sentencia -> continue_left .)
    POSX            reduce using rule 9 (sentencia -> continue_left .)
    POSY            reduce using rule 9 (sentencia -> continue_left .)
    USECOLOR        reduce using rule 9 (sentencia -> continue_left .)
    DOWN            reduce using rule 9 (sentencia -> continue_left .)
    UP              reduce using rule 9 (sentencia -> continue_left .)
    BEGIN           reduce using rule 9 (sentencia -> continue_left .)
    FOR             reduce using rule 9 (sentencia -> continue_left .)
    CASE            reduce using rule 9 (sentencia -> continue_left .)
    REPEAT          reduce using rule 9 (sentencia -> continue_left .)
    WHILE           reduce using rule 9 (sentencia -> continue_left .)
    EQUAL           reduce using rule 9 (sentencia -> continue_left .)
    AND             reduce using rule 9 (sentencia -> continue_left .)
    OR              reduce using rule 9 (sentencia -> continue_left .)
    GREATER         reduce using rule 9 (sentencia -> continue_left .)
    SMALLER         reduce using rule 9 (sentencia -> continue_left .)
    SUBSTR          reduce using rule 9 (sentencia -> continue_left .)
    RANDOM          reduce using rule 9 (sentencia -> continue_left .)
    MULT            reduce using rule 9 (sentencia -> continue_left .)
    DIV             reduce using rule 9 (sentencia -> continue_left .)
    SUM             reduce using rule 9 (sentencia -> continue_left .)
    $end            reduce using rule 9 (sentencia -> continue_left .)
    BRADER          reduce using rule 9 (sentencia -> continue_left .)


state 10

    (10) sentencia -> pos .

    DEF             reduce using rule 10 (sentencia -> pos .)
    PUT             reduce using rule 10 (sentencia -> pos .)
    ADD             reduce using rule 10 (sentencia -> pos .)
    CONUP           reduce using rule 10 (sentencia -> pos .)
    CONDOWN         reduce using rule 10 (sentencia -> pos .)
    CONRIGHT        reduce using rule 10 (sentencia -> pos .)
    CONLEFT         reduce using rule 10 (sentencia -> pos .)
    POS             reduce using rule 10 (sentencia -> pos .)
    POSX            reduce using rule 10 (sentencia -> pos .)
    POSY            reduce using rule 10 (sentencia -> pos .)
    USECOLOR        reduce using rule 10 (sentencia -> pos .)
    DOWN            reduce using rule 10 (sentencia -> pos .)
    UP              reduce using rule 10 (sentencia -> pos .)
    BEGIN           reduce using rule 10 (sentencia -> pos .)
    FOR             reduce using rule 10 (sentencia -> pos .)
    CASE            reduce using rule 10 (sentencia -> pos .)
    REPEAT          reduce using rule 10 (sentencia -> pos .)
    WHILE           reduce using rule 10 (sentencia -> pos .)
    EQUAL           reduce using rule 10 (sentencia -> pos .)
    AND             reduce using rule 10 (sentencia -> pos .)
    OR              reduce using rule 10 (sentencia -> pos .)
    GREATER         reduce using rule 10 (sentencia -> pos .)
    SMALLER         reduce using rule 10 (sentencia -> pos .)
    SUBSTR          reduce using rule 10 (sentencia -> pos .)
    RANDOM          reduce using rule 10 (sentencia -> pos .)
    MULT            reduce using rule 10 (sentencia -> pos .)
    DIV             reduce using rule 10 (sentencia -> pos .)
    SUM             reduce using rule 10 (sentencia -> pos .)
    $end            reduce using rule 10 (sentencia -> pos .)
    BRADER          reduce using rule 10 (sentencia -> pos .)


state 11

    (11) sentencia -> posx .

    DEF             reduce using rule 11 (sentencia -> posx .)
    PUT             reduce using rule 11 (sentencia -> posx .)
    ADD             reduce using rule 11 (sentencia -> posx .)
    CONUP           reduce using rule 11 (sentencia -> posx .)
    CONDOWN         reduce using rule 11 (sentencia -> posx .)
    CONRIGHT        reduce using rule 11 (sentencia -> posx .)
    CONLEFT         reduce using rule 11 (sentencia -> posx .)
    POS             reduce using rule 11 (sentencia -> posx .)
    POSX            reduce using rule 11 (sentencia -> posx .)
    POSY            reduce using rule 11 (sentencia -> posx .)
    USECOLOR        reduce using rule 11 (sentencia -> posx .)
    DOWN            reduce using rule 11 (sentencia -> posx .)
    UP              reduce using rule 11 (sentencia -> posx .)
    BEGIN           reduce using rule 11 (sentencia -> posx .)
    FOR             reduce using rule 11 (sentencia -> posx .)
    CASE            reduce using rule 11 (sentencia -> posx .)
    REPEAT          reduce using rule 11 (sentencia -> posx .)
    WHILE           reduce using rule 11 (sentencia -> posx .)
    EQUAL           reduce using rule 11 (sentencia -> posx .)
    AND             reduce using rule 11 (sentencia -> posx .)
    OR              reduce using rule 11 (sentencia -> posx .)
    GREATER         reduce using rule 11 (sentencia -> posx .)
    SMALLER         reduce using rule 11 (sentencia -> posx .)
    SUBSTR          reduce using rule 11 (sentencia -> posx .)
    RANDOM          reduce using rule 11 (sentencia -> posx .)
    MULT            reduce using rule 11 (sentencia -> posx .)
    DIV             reduce using rule 11 (sentencia -> posx .)
    SUM             reduce using rule 11 (sentencia -> posx .)
    $end            reduce using rule 11 (sentencia -> posx .)
    BRADER          reduce using rule 11 (sentencia -> posx .)


state 12

    (12) sentencia -> posy .

    DEF             reduce using rule 12 (sentencia -> posy .)
    PUT             reduce using rule 12 (sentencia -> posy .)
    ADD             reduce using rule 12 (sentencia -> posy .)
    CONUP           reduce using rule 12 (sentencia -> posy .)
    CONDOWN         reduce using rule 12 (sentencia -> posy .)
    CONRIGHT        reduce using rule 12 (sentencia -> posy .)
    CONLEFT         reduce using rule 12 (sentencia -> posy .)
    POS             reduce using rule 12 (sentencia -> posy .)
    POSX            reduce using rule 12 (sentencia -> posy .)
    POSY            reduce using rule 12 (sentencia -> posy .)
    USECOLOR        reduce using rule 12 (sentencia -> posy .)
    DOWN            reduce using rule 12 (sentencia -> posy .)
    UP              reduce using rule 12 (sentencia -> posy .)
    BEGIN           reduce using rule 12 (sentencia -> posy .)
    FOR             reduce using rule 12 (sentencia -> posy .)
    CASE            reduce using rule 12 (sentencia -> posy .)
    REPEAT          reduce using rule 12 (sentencia -> posy .)
    WHILE           reduce using rule 12 (sentencia -> posy .)
    EQUAL           reduce using rule 12 (sentencia -> posy .)
    AND             reduce using rule 12 (sentencia -> posy .)
    OR              reduce using rule 12 (sentencia -> posy .)
    GREATER         reduce using rule 12 (sentencia -> posy .)
    SMALLER         reduce using rule 12 (sentencia -> posy .)
    SUBSTR          reduce using rule 12 (sentencia -> posy .)
    RANDOM          reduce using rule 12 (sentencia -> posy .)
    MULT            reduce using rule 12 (sentencia -> posy .)
    DIV             reduce using rule 12 (sentencia -> posy .)
    SUM             reduce using rule 12 (sentencia -> posy .)
    $end            reduce using rule 12 (sentencia -> posy .)
    BRADER          reduce using rule 12 (sentencia -> posy .)


state 13

    (13) sentencia -> use_color .

    DEF             reduce using rule 13 (sentencia -> use_color .)
    PUT             reduce using rule 13 (sentencia -> use_color .)
    ADD             reduce using rule 13 (sentencia -> use_color .)
    CONUP           reduce using rule 13 (sentencia -> use_color .)
    CONDOWN         reduce using rule 13 (sentencia -> use_color .)
    CONRIGHT        reduce using rule 13 (sentencia -> use_color .)
    CONLEFT         reduce using rule 13 (sentencia -> use_color .)
    POS             reduce using rule 13 (sentencia -> use_color .)
    POSX            reduce using rule 13 (sentencia -> use_color .)
    POSY            reduce using rule 13 (sentencia -> use_color .)
    USECOLOR        reduce using rule 13 (sentencia -> use_color .)
    DOWN            reduce using rule 13 (sentencia -> use_color .)
    UP              reduce using rule 13 (sentencia -> use_color .)
    BEGIN           reduce using rule 13 (sentencia -> use_color .)
    FOR             reduce using rule 13 (sentencia -> use_color .)
    CASE            reduce using rule 13 (sentencia -> use_color .)
    REPEAT          reduce using rule 13 (sentencia -> use_color .)
    WHILE           reduce using rule 13 (sentencia -> use_color .)
    EQUAL           reduce using rule 13 (sentencia -> use_color .)
    AND             reduce using rule 13 (sentencia -> use_color .)
    OR              reduce using rule 13 (sentencia -> use_color .)
    GREATER         reduce using rule 13 (sentencia -> use_color .)
    SMALLER         reduce using rule 13 (sentencia -> use_color .)
    SUBSTR          reduce using rule 13 (sentencia -> use_color .)
    RANDOM          reduce using rule 13 (sentencia -> use_color .)
    MULT            reduce using rule 13 (sentencia -> use_color .)
    DIV             reduce using rule 13 (sentencia -> use_color .)
    SUM             reduce using rule 13 (sentencia -> use_color .)
    $end            reduce using rule 13 (sentencia -> use_color .)
    BRADER          reduce using rule 13 (sentencia -> use_color .)


state 14

    (14) sentencia -> down .

    DEF             reduce using rule 14 (sentencia -> down .)
    PUT             reduce using rule 14 (sentencia -> down .)
    ADD             reduce using rule 14 (sentencia -> down .)
    CONUP           reduce using rule 14 (sentencia -> down .)
    CONDOWN         reduce using rule 14 (sentencia -> down .)
    CONRIGHT        reduce using rule 14 (sentencia -> down .)
    CONLEFT         reduce using rule 14 (sentencia -> down .)
    POS             reduce using rule 14 (sentencia -> down .)
    POSX            reduce using rule 14 (sentencia -> down .)
    POSY            reduce using rule 14 (sentencia -> down .)
    USECOLOR        reduce using rule 14 (sentencia -> down .)
    DOWN            reduce using rule 14 (sentencia -> down .)
    UP              reduce using rule 14 (sentencia -> down .)
    BEGIN           reduce using rule 14 (sentencia -> down .)
    FOR             reduce using rule 14 (sentencia -> down .)
    CASE            reduce using rule 14 (sentencia -> down .)
    REPEAT          reduce using rule 14 (sentencia -> down .)
    WHILE           reduce using rule 14 (sentencia -> down .)
    EQUAL           reduce using rule 14 (sentencia -> down .)
    AND             reduce using rule 14 (sentencia -> down .)
    OR              reduce using rule 14 (sentencia -> down .)
    GREATER         reduce using rule 14 (sentencia -> down .)
    SMALLER         reduce using rule 14 (sentencia -> down .)
    SUBSTR          reduce using rule 14 (sentencia -> down .)
    RANDOM          reduce using rule 14 (sentencia -> down .)
    MULT            reduce using rule 14 (sentencia -> down .)
    DIV             reduce using rule 14 (sentencia -> down .)
    SUM             reduce using rule 14 (sentencia -> down .)
    $end            reduce using rule 14 (sentencia -> down .)
    BRADER          reduce using rule 14 (sentencia -> down .)


state 15

    (15) sentencia -> up .

    DEF             reduce using rule 15 (sentencia -> up .)
    PUT             reduce using rule 15 (sentencia -> up .)
    ADD             reduce using rule 15 (sentencia -> up .)
    CONUP           reduce using rule 15 (sentencia -> up .)
    CONDOWN         reduce using rule 15 (sentencia -> up .)
    CONRIGHT        reduce using rule 15 (sentencia -> up .)
    CONLEFT         reduce using rule 15 (sentencia -> up .)
    POS             reduce using rule 15 (sentencia -> up .)
    POSX            reduce using rule 15 (sentencia -> up .)
    POSY            reduce using rule 15 (sentencia -> up .)
    USECOLOR        reduce using rule 15 (sentencia -> up .)
    DOWN            reduce using rule 15 (sentencia -> up .)
    UP              reduce using rule 15 (sentencia -> up .)
    BEGIN           reduce using rule 15 (sentencia -> up .)
    FOR             reduce using rule 15 (sentencia -> up .)
    CASE            reduce using rule 15 (sentencia -> up .)
    REPEAT          reduce using rule 15 (sentencia -> up .)
    WHILE           reduce using rule 15 (sentencia -> up .)
    EQUAL           reduce using rule 15 (sentencia -> up .)
    AND             reduce using rule 15 (sentencia -> up .)
    OR              reduce using rule 15 (sentencia -> up .)
    GREATER         reduce using rule 15 (sentencia -> up .)
    SMALLER         reduce using rule 15 (sentencia -> up .)
    SUBSTR          reduce using rule 15 (sentencia -> up .)
    RANDOM          reduce using rule 15 (sentencia -> up .)
    MULT            reduce using rule 15 (sentencia -> up .)
    DIV             reduce using rule 15 (sentencia -> up .)
    SUM             reduce using rule 15 (sentencia -> up .)
    $end            reduce using rule 15 (sentencia -> up .)
    BRADER          reduce using rule 15 (sentencia -> up .)


state 16

    (16) sentencia -> beginning .

    DEF             reduce using rule 16 (sentencia -> beginning .)
    PUT             reduce using rule 16 (sentencia -> beginning .)
    ADD             reduce using rule 16 (sentencia -> beginning .)
    CONUP           reduce using rule 16 (sentencia -> beginning .)
    CONDOWN         reduce using rule 16 (sentencia -> beginning .)
    CONRIGHT        reduce using rule 16 (sentencia -> beginning .)
    CONLEFT         reduce using rule 16 (sentencia -> beginning .)
    POS             reduce using rule 16 (sentencia -> beginning .)
    POSX            reduce using rule 16 (sentencia -> beginning .)
    POSY            reduce using rule 16 (sentencia -> beginning .)
    USECOLOR        reduce using rule 16 (sentencia -> beginning .)
    DOWN            reduce using rule 16 (sentencia -> beginning .)
    UP              reduce using rule 16 (sentencia -> beginning .)
    BEGIN           reduce using rule 16 (sentencia -> beginning .)
    FOR             reduce using rule 16 (sentencia -> beginning .)
    CASE            reduce using rule 16 (sentencia -> beginning .)
    REPEAT          reduce using rule 16 (sentencia -> beginning .)
    WHILE           reduce using rule 16 (sentencia -> beginning .)
    EQUAL           reduce using rule 16 (sentencia -> beginning .)
    AND             reduce using rule 16 (sentencia -> beginning .)
    OR              reduce using rule 16 (sentencia -> beginning .)
    GREATER         reduce using rule 16 (sentencia -> beginning .)
    SMALLER         reduce using rule 16 (sentencia -> beginning .)
    SUBSTR          reduce using rule 16 (sentencia -> beginning .)
    RANDOM          reduce using rule 16 (sentencia -> beginning .)
    MULT            reduce using rule 16 (sentencia -> beginning .)
    DIV             reduce using rule 16 (sentencia -> beginning .)
    SUM             reduce using rule 16 (sentencia -> beginning .)
    $end            reduce using rule 16 (sentencia -> beginning .)
    BRADER          reduce using rule 16 (sentencia -> beginning .)


state 17

    (17) sentencia -> for_loop .

    DEF             reduce using rule 17 (sentencia -> for_loop .)
    PUT             reduce using rule 17 (sentencia -> for_loop .)
    ADD             reduce using rule 17 (sentencia -> for_loop .)
    CONUP           reduce using rule 17 (sentencia -> for_loop .)
    CONDOWN         reduce using rule 17 (sentencia -> for_loop .)
    CONRIGHT        reduce using rule 17 (sentencia -> for_loop .)
    CONLEFT         reduce using rule 17 (sentencia -> for_loop .)
    POS             reduce using rule 17 (sentencia -> for_loop .)
    POSX            reduce using rule 17 (sentencia -> for_loop .)
    POSY            reduce using rule 17 (sentencia -> for_loop .)
    USECOLOR        reduce using rule 17 (sentencia -> for_loop .)
    DOWN            reduce using rule 17 (sentencia -> for_loop .)
    UP              reduce using rule 17 (sentencia -> for_loop .)
    BEGIN           reduce using rule 17 (sentencia -> for_loop .)
    FOR             reduce using rule 17 (sentencia -> for_loop .)
    CASE            reduce using rule 17 (sentencia -> for_loop .)
    REPEAT          reduce using rule 17 (sentencia -> for_loop .)
    WHILE           reduce using rule 17 (sentencia -> for_loop .)
    EQUAL           reduce using rule 17 (sentencia -> for_loop .)
    AND             reduce using rule 17 (sentencia -> for_loop .)
    OR              reduce using rule 17 (sentencia -> for_loop .)
    GREATER         reduce using rule 17 (sentencia -> for_loop .)
    SMALLER         reduce using rule 17 (sentencia -> for_loop .)
    SUBSTR          reduce using rule 17 (sentencia -> for_loop .)
    RANDOM          reduce using rule 17 (sentencia -> for_loop .)
    MULT            reduce using rule 17 (sentencia -> for_loop .)
    DIV             reduce using rule 17 (sentencia -> for_loop .)
    SUM             reduce using rule 17 (sentencia -> for_loop .)
    $end            reduce using rule 17 (sentencia -> for_loop .)
    BRADER          reduce using rule 17 (sentencia -> for_loop .)


state 18

    (18) sentencia -> case .

    DEF             reduce using rule 18 (sentencia -> case .)
    PUT             reduce using rule 18 (sentencia -> case .)
    ADD             reduce using rule 18 (sentencia -> case .)
    CONUP           reduce using rule 18 (sentencia -> case .)
    CONDOWN         reduce using rule 18 (sentencia -> case .)
    CONRIGHT        reduce using rule 18 (sentencia -> case .)
    CONLEFT         reduce using rule 18 (sentencia -> case .)
    POS             reduce using rule 18 (sentencia -> case .)
    POSX            reduce using rule 18 (sentencia -> case .)
    POSY            reduce using rule 18 (sentencia -> case .)
    USECOLOR        reduce using rule 18 (sentencia -> case .)
    DOWN            reduce using rule 18 (sentencia -> case .)
    UP              reduce using rule 18 (sentencia -> case .)
    BEGIN           reduce using rule 18 (sentencia -> case .)
    FOR             reduce using rule 18 (sentencia -> case .)
    CASE            reduce using rule 18 (sentencia -> case .)
    REPEAT          reduce using rule 18 (sentencia -> case .)
    WHILE           reduce using rule 18 (sentencia -> case .)
    EQUAL           reduce using rule 18 (sentencia -> case .)
    AND             reduce using rule 18 (sentencia -> case .)
    OR              reduce using rule 18 (sentencia -> case .)
    GREATER         reduce using rule 18 (sentencia -> case .)
    SMALLER         reduce using rule 18 (sentencia -> case .)
    SUBSTR          reduce using rule 18 (sentencia -> case .)
    RANDOM          reduce using rule 18 (sentencia -> case .)
    MULT            reduce using rule 18 (sentencia -> case .)
    DIV             reduce using rule 18 (sentencia -> case .)
    SUM             reduce using rule 18 (sentencia -> case .)
    $end            reduce using rule 18 (sentencia -> case .)
    BRADER          reduce using rule 18 (sentencia -> case .)


state 19

    (19) sentencia -> repeat_until .

    DEF             reduce using rule 19 (sentencia -> repeat_until .)
    PUT             reduce using rule 19 (sentencia -> repeat_until .)
    ADD             reduce using rule 19 (sentencia -> repeat_until .)
    CONUP           reduce using rule 19 (sentencia -> repeat_until .)
    CONDOWN         reduce using rule 19 (sentencia -> repeat_until .)
    CONRIGHT        reduce using rule 19 (sentencia -> repeat_until .)
    CONLEFT         reduce using rule 19 (sentencia -> repeat_until .)
    POS             reduce using rule 19 (sentencia -> repeat_until .)
    POSX            reduce using rule 19 (sentencia -> repeat_until .)
    POSY            reduce using rule 19 (sentencia -> repeat_until .)
    USECOLOR        reduce using rule 19 (sentencia -> repeat_until .)
    DOWN            reduce using rule 19 (sentencia -> repeat_until .)
    UP              reduce using rule 19 (sentencia -> repeat_until .)
    BEGIN           reduce using rule 19 (sentencia -> repeat_until .)
    FOR             reduce using rule 19 (sentencia -> repeat_until .)
    CASE            reduce using rule 19 (sentencia -> repeat_until .)
    REPEAT          reduce using rule 19 (sentencia -> repeat_until .)
    WHILE           reduce using rule 19 (sentencia -> repeat_until .)
    EQUAL           reduce using rule 19 (sentencia -> repeat_until .)
    AND             reduce using rule 19 (sentencia -> repeat_until .)
    OR              reduce using rule 19 (sentencia -> repeat_until .)
    GREATER         reduce using rule 19 (sentencia -> repeat_until .)
    SMALLER         reduce using rule 19 (sentencia -> repeat_until .)
    SUBSTR          reduce using rule 19 (sentencia -> repeat_until .)
    RANDOM          reduce using rule 19 (sentencia -> repeat_until .)
    MULT            reduce using rule 19 (sentencia -> repeat_until .)
    DIV             reduce using rule 19 (sentencia -> repeat_until .)
    SUM             reduce using rule 19 (sentencia -> repeat_until .)
    $end            reduce using rule 19 (sentencia -> repeat_until .)
    BRADER          reduce using rule 19 (sentencia -> repeat_until .)


state 20

    (20) sentencia -> while .

    DEF             reduce using rule 20 (sentencia -> while .)
    PUT             reduce using rule 20 (sentencia -> while .)
    ADD             reduce using rule 20 (sentencia -> while .)
    CONUP           reduce using rule 20 (sentencia -> while .)
    CONDOWN         reduce using rule 20 (sentencia -> while .)
    CONRIGHT        reduce using rule 20 (sentencia -> while .)
    CONLEFT         reduce using rule 20 (sentencia -> while .)
    POS             reduce using rule 20 (sentencia -> while .)
    POSX            reduce using rule 20 (sentencia -> while .)
    POSY            reduce using rule 20 (sentencia -> while .)
    USECOLOR        reduce using rule 20 (sentencia -> while .)
    DOWN            reduce using rule 20 (sentencia -> while .)
    UP              reduce using rule 20 (sentencia -> while .)
    BEGIN           reduce using rule 20 (sentencia -> while .)
    FOR             reduce using rule 20 (sentencia -> while .)
    CASE            reduce using rule 20 (sentencia -> while .)
    REPEAT          reduce using rule 20 (sentencia -> while .)
    WHILE           reduce using rule 20 (sentencia -> while .)
    EQUAL           reduce using rule 20 (sentencia -> while .)
    AND             reduce using rule 20 (sentencia -> while .)
    OR              reduce using rule 20 (sentencia -> while .)
    GREATER         reduce using rule 20 (sentencia -> while .)
    SMALLER         reduce using rule 20 (sentencia -> while .)
    SUBSTR          reduce using rule 20 (sentencia -> while .)
    RANDOM          reduce using rule 20 (sentencia -> while .)
    MULT            reduce using rule 20 (sentencia -> while .)
    DIV             reduce using rule 20 (sentencia -> while .)
    SUM             reduce using rule 20 (sentencia -> while .)
    $end            reduce using rule 20 (sentencia -> while .)
    BRADER          reduce using rule 20 (sentencia -> while .)


state 21

    (21) sentencia -> equal .

    DEF             reduce using rule 21 (sentencia -> equal .)
    PUT             reduce using rule 21 (sentencia -> equal .)
    ADD             reduce using rule 21 (sentencia -> equal .)
    CONUP           reduce using rule 21 (sentencia -> equal .)
    CONDOWN         reduce using rule 21 (sentencia -> equal .)
    CONRIGHT        reduce using rule 21 (sentencia -> equal .)
    CONLEFT         reduce using rule 21 (sentencia -> equal .)
    POS             reduce using rule 21 (sentencia -> equal .)
    POSX            reduce using rule 21 (sentencia -> equal .)
    POSY            reduce using rule 21 (sentencia -> equal .)
    USECOLOR        reduce using rule 21 (sentencia -> equal .)
    DOWN            reduce using rule 21 (sentencia -> equal .)
    UP              reduce using rule 21 (sentencia -> equal .)
    BEGIN           reduce using rule 21 (sentencia -> equal .)
    FOR             reduce using rule 21 (sentencia -> equal .)
    CASE            reduce using rule 21 (sentencia -> equal .)
    REPEAT          reduce using rule 21 (sentencia -> equal .)
    WHILE           reduce using rule 21 (sentencia -> equal .)
    EQUAL           reduce using rule 21 (sentencia -> equal .)
    AND             reduce using rule 21 (sentencia -> equal .)
    OR              reduce using rule 21 (sentencia -> equal .)
    GREATER         reduce using rule 21 (sentencia -> equal .)
    SMALLER         reduce using rule 21 (sentencia -> equal .)
    SUBSTR          reduce using rule 21 (sentencia -> equal .)
    RANDOM          reduce using rule 21 (sentencia -> equal .)
    MULT            reduce using rule 21 (sentencia -> equal .)
    DIV             reduce using rule 21 (sentencia -> equal .)
    SUM             reduce using rule 21 (sentencia -> equal .)
    $end            reduce using rule 21 (sentencia -> equal .)
    BRADER          reduce using rule 21 (sentencia -> equal .)


state 22

    (22) sentencia -> and .

    DEF             reduce using rule 22 (sentencia -> and .)
    PUT             reduce using rule 22 (sentencia -> and .)
    ADD             reduce using rule 22 (sentencia -> and .)
    CONUP           reduce using rule 22 (sentencia -> and .)
    CONDOWN         reduce using rule 22 (sentencia -> and .)
    CONRIGHT        reduce using rule 22 (sentencia -> and .)
    CONLEFT         reduce using rule 22 (sentencia -> and .)
    POS             reduce using rule 22 (sentencia -> and .)
    POSX            reduce using rule 22 (sentencia -> and .)
    POSY            reduce using rule 22 (sentencia -> and .)
    USECOLOR        reduce using rule 22 (sentencia -> and .)
    DOWN            reduce using rule 22 (sentencia -> and .)
    UP              reduce using rule 22 (sentencia -> and .)
    BEGIN           reduce using rule 22 (sentencia -> and .)
    FOR             reduce using rule 22 (sentencia -> and .)
    CASE            reduce using rule 22 (sentencia -> and .)
    REPEAT          reduce using rule 22 (sentencia -> and .)
    WHILE           reduce using rule 22 (sentencia -> and .)
    EQUAL           reduce using rule 22 (sentencia -> and .)
    AND             reduce using rule 22 (sentencia -> and .)
    OR              reduce using rule 22 (sentencia -> and .)
    GREATER         reduce using rule 22 (sentencia -> and .)
    SMALLER         reduce using rule 22 (sentencia -> and .)
    SUBSTR          reduce using rule 22 (sentencia -> and .)
    RANDOM          reduce using rule 22 (sentencia -> and .)
    MULT            reduce using rule 22 (sentencia -> and .)
    DIV             reduce using rule 22 (sentencia -> and .)
    SUM             reduce using rule 22 (sentencia -> and .)
    $end            reduce using rule 22 (sentencia -> and .)
    BRADER          reduce using rule 22 (sentencia -> and .)


state 23

    (23) sentencia -> or .

    DEF             reduce using rule 23 (sentencia -> or .)
    PUT             reduce using rule 23 (sentencia -> or .)
    ADD             reduce using rule 23 (sentencia -> or .)
    CONUP           reduce using rule 23 (sentencia -> or .)
    CONDOWN         reduce using rule 23 (sentencia -> or .)
    CONRIGHT        reduce using rule 23 (sentencia -> or .)
    CONLEFT         reduce using rule 23 (sentencia -> or .)
    POS             reduce using rule 23 (sentencia -> or .)
    POSX            reduce using rule 23 (sentencia -> or .)
    POSY            reduce using rule 23 (sentencia -> or .)
    USECOLOR        reduce using rule 23 (sentencia -> or .)
    DOWN            reduce using rule 23 (sentencia -> or .)
    UP              reduce using rule 23 (sentencia -> or .)
    BEGIN           reduce using rule 23 (sentencia -> or .)
    FOR             reduce using rule 23 (sentencia -> or .)
    CASE            reduce using rule 23 (sentencia -> or .)
    REPEAT          reduce using rule 23 (sentencia -> or .)
    WHILE           reduce using rule 23 (sentencia -> or .)
    EQUAL           reduce using rule 23 (sentencia -> or .)
    AND             reduce using rule 23 (sentencia -> or .)
    OR              reduce using rule 23 (sentencia -> or .)
    GREATER         reduce using rule 23 (sentencia -> or .)
    SMALLER         reduce using rule 23 (sentencia -> or .)
    SUBSTR          reduce using rule 23 (sentencia -> or .)
    RANDOM          reduce using rule 23 (sentencia -> or .)
    MULT            reduce using rule 23 (sentencia -> or .)
    DIV             reduce using rule 23 (sentencia -> or .)
    SUM             reduce using rule 23 (sentencia -> or .)
    $end            reduce using rule 23 (sentencia -> or .)
    BRADER          reduce using rule 23 (sentencia -> or .)


state 24

    (24) sentencia -> greater .

    DEF             reduce using rule 24 (sentencia -> greater .)
    PUT             reduce using rule 24 (sentencia -> greater .)
    ADD             reduce using rule 24 (sentencia -> greater .)
    CONUP           reduce using rule 24 (sentencia -> greater .)
    CONDOWN         reduce using rule 24 (sentencia -> greater .)
    CONRIGHT        reduce using rule 24 (sentencia -> greater .)
    CONLEFT         reduce using rule 24 (sentencia -> greater .)
    POS             reduce using rule 24 (sentencia -> greater .)
    POSX            reduce using rule 24 (sentencia -> greater .)
    POSY            reduce using rule 24 (sentencia -> greater .)
    USECOLOR        reduce using rule 24 (sentencia -> greater .)
    DOWN            reduce using rule 24 (sentencia -> greater .)
    UP              reduce using rule 24 (sentencia -> greater .)
    BEGIN           reduce using rule 24 (sentencia -> greater .)
    FOR             reduce using rule 24 (sentencia -> greater .)
    CASE            reduce using rule 24 (sentencia -> greater .)
    REPEAT          reduce using rule 24 (sentencia -> greater .)
    WHILE           reduce using rule 24 (sentencia -> greater .)
    EQUAL           reduce using rule 24 (sentencia -> greater .)
    AND             reduce using rule 24 (sentencia -> greater .)
    OR              reduce using rule 24 (sentencia -> greater .)
    GREATER         reduce using rule 24 (sentencia -> greater .)
    SMALLER         reduce using rule 24 (sentencia -> greater .)
    SUBSTR          reduce using rule 24 (sentencia -> greater .)
    RANDOM          reduce using rule 24 (sentencia -> greater .)
    MULT            reduce using rule 24 (sentencia -> greater .)
    DIV             reduce using rule 24 (sentencia -> greater .)
    SUM             reduce using rule 24 (sentencia -> greater .)
    $end            reduce using rule 24 (sentencia -> greater .)
    BRADER          reduce using rule 24 (sentencia -> greater .)


state 25

    (25) sentencia -> smaller .

    DEF             reduce using rule 25 (sentencia -> smaller .)
    PUT             reduce using rule 25 (sentencia -> smaller .)
    ADD             reduce using rule 25 (sentencia -> smaller .)
    CONUP           reduce using rule 25 (sentencia -> smaller .)
    CONDOWN         reduce using rule 25 (sentencia -> smaller .)
    CONRIGHT        reduce using rule 25 (sentencia -> smaller .)
    CONLEFT         reduce using rule 25 (sentencia -> smaller .)
    POS             reduce using rule 25 (sentencia -> smaller .)
    POSX            reduce using rule 25 (sentencia -> smaller .)
    POSY            reduce using rule 25 (sentencia -> smaller .)
    USECOLOR        reduce using rule 25 (sentencia -> smaller .)
    DOWN            reduce using rule 25 (sentencia -> smaller .)
    UP              reduce using rule 25 (sentencia -> smaller .)
    BEGIN           reduce using rule 25 (sentencia -> smaller .)
    FOR             reduce using rule 25 (sentencia -> smaller .)
    CASE            reduce using rule 25 (sentencia -> smaller .)
    REPEAT          reduce using rule 25 (sentencia -> smaller .)
    WHILE           reduce using rule 25 (sentencia -> smaller .)
    EQUAL           reduce using rule 25 (sentencia -> smaller .)
    AND             reduce using rule 25 (sentencia -> smaller .)
    OR              reduce using rule 25 (sentencia -> smaller .)
    GREATER         reduce using rule 25 (sentencia -> smaller .)
    SMALLER         reduce using rule 25 (sentencia -> smaller .)
    SUBSTR          reduce using rule 25 (sentencia -> smaller .)
    RANDOM          reduce using rule 25 (sentencia -> smaller .)
    MULT            reduce using rule 25 (sentencia -> smaller .)
    DIV             reduce using rule 25 (sentencia -> smaller .)
    SUM             reduce using rule 25 (sentencia -> smaller .)
    $end            reduce using rule 25 (sentencia -> smaller .)
    BRADER          reduce using rule 25 (sentencia -> smaller .)


state 26

    (26) sentencia -> substr .

    DEF             reduce using rule 26 (sentencia -> substr .)
    PUT             reduce using rule 26 (sentencia -> substr .)
    ADD             reduce using rule 26 (sentencia -> substr .)
    CONUP           reduce using rule 26 (sentencia -> substr .)
    CONDOWN         reduce using rule 26 (sentencia -> substr .)
    CONRIGHT        reduce using rule 26 (sentencia -> substr .)
    CONLEFT         reduce using rule 26 (sentencia -> substr .)
    POS             reduce using rule 26 (sentencia -> substr .)
    POSX            reduce using rule 26 (sentencia -> substr .)
    POSY            reduce using rule 26 (sentencia -> substr .)
    USECOLOR        reduce using rule 26 (sentencia -> substr .)
    DOWN            reduce using rule 26 (sentencia -> substr .)
    UP              reduce using rule 26 (sentencia -> substr .)
    BEGIN           reduce using rule 26 (sentencia -> substr .)
    FOR             reduce using rule 26 (sentencia -> substr .)
    CASE            reduce using rule 26 (sentencia -> substr .)
    REPEAT          reduce using rule 26 (sentencia -> substr .)
    WHILE           reduce using rule 26 (sentencia -> substr .)
    EQUAL           reduce using rule 26 (sentencia -> substr .)
    AND             reduce using rule 26 (sentencia -> substr .)
    OR              reduce using rule 26 (sentencia -> substr .)
    GREATER         reduce using rule 26 (sentencia -> substr .)
    SMALLER         reduce using rule 26 (sentencia -> substr .)
    SUBSTR          reduce using rule 26 (sentencia -> substr .)
    RANDOM          reduce using rule 26 (sentencia -> substr .)
    MULT            reduce using rule 26 (sentencia -> substr .)
    DIV             reduce using rule 26 (sentencia -> substr .)
    SUM             reduce using rule 26 (sentencia -> substr .)
    $end            reduce using rule 26 (sentencia -> substr .)
    BRADER          reduce using rule 26 (sentencia -> substr .)


state 27

    (27) sentencia -> random .

    DEF             reduce using rule 27 (sentencia -> random .)
    PUT             reduce using rule 27 (sentencia -> random .)
    ADD             reduce using rule 27 (sentencia -> random .)
    CONUP           reduce using rule 27 (sentencia -> random .)
    CONDOWN         reduce using rule 27 (sentencia -> random .)
    CONRIGHT        reduce using rule 27 (sentencia -> random .)
    CONLEFT         reduce using rule 27 (sentencia -> random .)
    POS             reduce using rule 27 (sentencia -> random .)
    POSX            reduce using rule 27 (sentencia -> random .)
    POSY            reduce using rule 27 (sentencia -> random .)
    USECOLOR        reduce using rule 27 (sentencia -> random .)
    DOWN            reduce using rule 27 (sentencia -> random .)
    UP              reduce using rule 27 (sentencia -> random .)
    BEGIN           reduce using rule 27 (sentencia -> random .)
    FOR             reduce using rule 27 (sentencia -> random .)
    CASE            reduce using rule 27 (sentencia -> random .)
    REPEAT          reduce using rule 27 (sentencia -> random .)
    WHILE           reduce using rule 27 (sentencia -> random .)
    EQUAL           reduce using rule 27 (sentencia -> random .)
    AND             reduce using rule 27 (sentencia -> random .)
    OR              reduce using rule 27 (sentencia -> random .)
    GREATER         reduce using rule 27 (sentencia -> random .)
    SMALLER         reduce using rule 27 (sentencia -> random .)
    SUBSTR          reduce using rule 27 (sentencia -> random .)
    RANDOM          reduce using rule 27 (sentencia -> random .)
    MULT            reduce using rule 27 (sentencia -> random .)
    DIV             reduce using rule 27 (sentencia -> random .)
    SUM             reduce using rule 27 (sentencia -> random .)
    $end            reduce using rule 27 (sentencia -> random .)
    BRADER          reduce using rule 27 (sentencia -> random .)


state 28

    (28) sentencia -> mult .

    DEF             reduce using rule 28 (sentencia -> mult .)
    PUT             reduce using rule 28 (sentencia -> mult .)
    ADD             reduce using rule 28 (sentencia -> mult .)
    CONUP           reduce using rule 28 (sentencia -> mult .)
    CONDOWN         reduce using rule 28 (sentencia -> mult .)
    CONRIGHT        reduce using rule 28 (sentencia -> mult .)
    CONLEFT         reduce using rule 28 (sentencia -> mult .)
    POS             reduce using rule 28 (sentencia -> mult .)
    POSX            reduce using rule 28 (sentencia -> mult .)
    POSY            reduce using rule 28 (sentencia -> mult .)
    USECOLOR        reduce using rule 28 (sentencia -> mult .)
    DOWN            reduce using rule 28 (sentencia -> mult .)
    UP              reduce using rule 28 (sentencia -> mult .)
    BEGIN           reduce using rule 28 (sentencia -> mult .)
    FOR             reduce using rule 28 (sentencia -> mult .)
    CASE            reduce using rule 28 (sentencia -> mult .)
    REPEAT          reduce using rule 28 (sentencia -> mult .)
    WHILE           reduce using rule 28 (sentencia -> mult .)
    EQUAL           reduce using rule 28 (sentencia -> mult .)
    AND             reduce using rule 28 (sentencia -> mult .)
    OR              reduce using rule 28 (sentencia -> mult .)
    GREATER         reduce using rule 28 (sentencia -> mult .)
    SMALLER         reduce using rule 28 (sentencia -> mult .)
    SUBSTR          reduce using rule 28 (sentencia -> mult .)
    RANDOM          reduce using rule 28 (sentencia -> mult .)
    MULT            reduce using rule 28 (sentencia -> mult .)
    DIV             reduce using rule 28 (sentencia -> mult .)
    SUM             reduce using rule 28 (sentencia -> mult .)
    $end            reduce using rule 28 (sentencia -> mult .)
    BRADER          reduce using rule 28 (sentencia -> mult .)


state 29

    (29) sentencia -> div .

    DEF             reduce using rule 29 (sentencia -> div .)
    PUT             reduce using rule 29 (sentencia -> div .)
    ADD             reduce using rule 29 (sentencia -> div .)
    CONUP           reduce using rule 29 (sentencia -> div .)
    CONDOWN         reduce using rule 29 (sentencia -> div .)
    CONRIGHT        reduce using rule 29 (sentencia -> div .)
    CONLEFT         reduce using rule 29 (sentencia -> div .)
    POS             reduce using rule 29 (sentencia -> div .)
    POSX            reduce using rule 29 (sentencia -> div .)
    POSY            reduce using rule 29 (sentencia -> div .)
    USECOLOR        reduce using rule 29 (sentencia -> div .)
    DOWN            reduce using rule 29 (sentencia -> div .)
    UP              reduce using rule 29 (sentencia -> div .)
    BEGIN           reduce using rule 29 (sentencia -> div .)
    FOR             reduce using rule 29 (sentencia -> div .)
    CASE            reduce using rule 29 (sentencia -> div .)
    REPEAT          reduce using rule 29 (sentencia -> div .)
    WHILE           reduce using rule 29 (sentencia -> div .)
    EQUAL           reduce using rule 29 (sentencia -> div .)
    AND             reduce using rule 29 (sentencia -> div .)
    OR              reduce using rule 29 (sentencia -> div .)
    GREATER         reduce using rule 29 (sentencia -> div .)
    SMALLER         reduce using rule 29 (sentencia -> div .)
    SUBSTR          reduce using rule 29 (sentencia -> div .)
    RANDOM          reduce using rule 29 (sentencia -> div .)
    MULT            reduce using rule 29 (sentencia -> div .)
    DIV             reduce using rule 29 (sentencia -> div .)
    SUM             reduce using rule 29 (sentencia -> div .)
    $end            reduce using rule 29 (sentencia -> div .)
    BRADER          reduce using rule 29 (sentencia -> div .)


state 30

    (30) sentencia -> sum .

    DEF             reduce using rule 30 (sentencia -> sum .)
    PUT             reduce using rule 30 (sentencia -> sum .)
    ADD             reduce using rule 30 (sentencia -> sum .)
    CONUP           reduce using rule 30 (sentencia -> sum .)
    CONDOWN         reduce using rule 30 (sentencia -> sum .)
    CONRIGHT        reduce using rule 30 (sentencia -> sum .)
    CONLEFT         reduce using rule 30 (sentencia -> sum .)
    POS             reduce using rule 30 (sentencia -> sum .)
    POSX            reduce using rule 30 (sentencia -> sum .)
    POSY            reduce using rule 30 (sentencia -> sum .)
    USECOLOR        reduce using rule 30 (sentencia -> sum .)
    DOWN            reduce using rule 30 (sentencia -> sum .)
    UP              reduce using rule 30 (sentencia -> sum .)
    BEGIN           reduce using rule 30 (sentencia -> sum .)
    FOR             reduce using rule 30 (sentencia -> sum .)
    CASE            reduce using rule 30 (sentencia -> sum .)
    REPEAT          reduce using rule 30 (sentencia -> sum .)
    WHILE           reduce using rule 30 (sentencia -> sum .)
    EQUAL           reduce using rule 30 (sentencia -> sum .)
    AND             reduce using rule 30 (sentencia -> sum .)
    OR              reduce using rule 30 (sentencia -> sum .)
    GREATER         reduce using rule 30 (sentencia -> sum .)
    SMALLER         reduce using rule 30 (sentencia -> sum .)
    SUBSTR          reduce using rule 30 (sentencia -> sum .)
    RANDOM          reduce using rule 30 (sentencia -> sum .)
    MULT            reduce using rule 30 (sentencia -> sum .)
    DIV             reduce using rule 30 (sentencia -> sum .)
    SUM             reduce using rule 30 (sentencia -> sum .)
    $end            reduce using rule 30 (sentencia -> sum .)
    BRADER          reduce using rule 30 (sentencia -> sum .)


state 31

    (31) def_variable -> DEF . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 60


state 32

    (32) put_variable -> PUT . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 61


state 33

    (33) add_variable -> ADD . PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> ADD . PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 62


state 34

    (35) continue_up -> CONUP . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 63
    expr                           shift and go to state 66

state 35

    (36) continue_down -> CONDOWN . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 69
    expr                           shift and go to state 66

state 36

    (37) continue_right -> CONRIGHT . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 70
    expr                           shift and go to state 66

state 37

    (38) continue_left -> CONLEFT . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 71
    expr                           shift and go to state 66

state 38

    (39) pos -> POS . PARIZQ valor COMA valor PARDER PUNTOCOMA

    PARIZQ          shift and go to state 72


state 39

    (40) posx -> POSX . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 73
    expr                           shift and go to state 66

state 40

    (41) posy -> POSY . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 74
    expr                           shift and go to state 66

state 41

    (42) use_color -> USECOLOR . valor PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 75
    expr                           shift and go to state 66

state 42

    (43) down -> DOWN . PUNTOCOMA

    PUNTOCOMA       shift and go to state 76


state 43

    (44) up -> UP . PUNTOCOMA

    PUNTOCOMA       shift and go to state 77


state 44

    (45) beginning -> BEGIN . PUNTOCOMA

    PUNTOCOMA       shift and go to state 78


state 45

    (46) for_loop -> FOR . VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    VARIABLE        shift and go to state 79


state 46

    (47) case -> CASE . VARIABLE when_cases end_case

    VARIABLE        shift and go to state 80


state 47

    (53) repeat_until -> REPEAT . BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA

    BRAIZQ          shift and go to state 81


state 48

    (54) while -> WHILE . PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    PARIZQ          shift and go to state 82


state 49

    (55) equal -> EQUAL . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 83


state 50

    (56) and -> AND . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 84


state 51

    (57) or -> OR . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 85


state 52

    (58) greater -> GREATER . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 86


state 53

    (59) smaller -> SMALLER . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 87


state 54

    (60) substr -> SUBSTR . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 88


state 55

    (61) random -> RANDOM . PARIZQ valor PARDER

    PARIZQ          shift and go to state 89


state 56

    (62) mult -> MULT . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 90


state 57

    (63) div -> DIV . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 91


state 58

    (64) sum -> SUM . PARIZQ valor COMA valor PARDER

    PARIZQ          shift and go to state 92


state 59

    (1) sentencias -> sentencia sentencias .

    $end            reduce using rule 1 (sentencias -> sentencia sentencias .)
    BRADER          reduce using rule 1 (sentencias -> sentencia sentencias .)


state 60

    (31) def_variable -> DEF PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 93


state 61

    (32) put_variable -> PUT PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 94


state 62

    (33) add_variable -> ADD PARIZQ . VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> ADD PARIZQ . VARIABLE COMA valor PARDER PUNTOCOMA

    VARIABLE        shift and go to state 95


state 63

    (35) continue_up -> CONUP valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 96
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 64

    (65) valor -> NUMBER .

    PUNTOCOMA       reduce using rule 65 (valor -> NUMBER .)
    MULT            reduce using rule 65 (valor -> NUMBER .)
    DIV             reduce using rule 65 (valor -> NUMBER .)
    SUM             reduce using rule 65 (valor -> NUMBER .)
    SUBSTR          reduce using rule 65 (valor -> NUMBER .)
    COMA            reduce using rule 65 (valor -> NUMBER .)
    PARDER          reduce using rule 65 (valor -> NUMBER .)
    TO              reduce using rule 65 (valor -> NUMBER .)
    THEN            reduce using rule 65 (valor -> NUMBER .)


state 65

    (66) valor -> VARIABLE .

    PUNTOCOMA       reduce using rule 66 (valor -> VARIABLE .)
    MULT            reduce using rule 66 (valor -> VARIABLE .)
    DIV             reduce using rule 66 (valor -> VARIABLE .)
    SUM             reduce using rule 66 (valor -> VARIABLE .)
    SUBSTR          reduce using rule 66 (valor -> VARIABLE .)
    COMA            reduce using rule 66 (valor -> VARIABLE .)
    PARDER          reduce using rule 66 (valor -> VARIABLE .)
    TO              reduce using rule 66 (valor -> VARIABLE .)
    THEN            reduce using rule 66 (valor -> VARIABLE .)


state 66

    (67) valor -> expr .

    PUNTOCOMA       reduce using rule 67 (valor -> expr .)
    MULT            reduce using rule 67 (valor -> expr .)
    DIV             reduce using rule 67 (valor -> expr .)
    SUM             reduce using rule 67 (valor -> expr .)
    SUBSTR          reduce using rule 67 (valor -> expr .)
    COMA            reduce using rule 67 (valor -> expr .)
    PARDER          reduce using rule 67 (valor -> expr .)
    TO              reduce using rule 67 (valor -> expr .)
    THEN            reduce using rule 67 (valor -> expr .)


state 67

    (68) valor -> TRUE .

    PUNTOCOMA       reduce using rule 68 (valor -> TRUE .)
    MULT            reduce using rule 68 (valor -> TRUE .)
    DIV             reduce using rule 68 (valor -> TRUE .)
    SUM             reduce using rule 68 (valor -> TRUE .)
    SUBSTR          reduce using rule 68 (valor -> TRUE .)
    COMA            reduce using rule 68 (valor -> TRUE .)
    PARDER          reduce using rule 68 (valor -> TRUE .)
    TO              reduce using rule 68 (valor -> TRUE .)
    THEN            reduce using rule 68 (valor -> TRUE .)


state 68

    (69) valor -> FALSE .

    PUNTOCOMA       reduce using rule 69 (valor -> FALSE .)
    MULT            reduce using rule 69 (valor -> FALSE .)
    DIV             reduce using rule 69 (valor -> FALSE .)
    SUM             reduce using rule 69 (valor -> FALSE .)
    SUBSTR          reduce using rule 69 (valor -> FALSE .)
    COMA            reduce using rule 69 (valor -> FALSE .)
    PARDER          reduce using rule 69 (valor -> FALSE .)
    TO              reduce using rule 69 (valor -> FALSE .)
    THEN            reduce using rule 69 (valor -> FALSE .)


state 69

    (36) continue_down -> CONDOWN valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 101
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 70

    (37) continue_right -> CONRIGHT valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 102
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 71

    (38) continue_left -> CONLEFT valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 103
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 72

    (39) pos -> POS PARIZQ . valor COMA valor PARDER PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 104
    expr                           shift and go to state 66

state 73

    (40) posx -> POSX valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 105
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 74

    (41) posy -> POSY valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 106
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 75

    (42) use_color -> USECOLOR valor . PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PUNTOCOMA       shift and go to state 107
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 76

    (43) down -> DOWN PUNTOCOMA .

    DEF             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    PUT             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    ADD             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    CONUP           reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    CONDOWN         reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    CONRIGHT        reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    CONLEFT         reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    POS             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    POSX            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    POSY            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    USECOLOR        reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    DOWN            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    UP              reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    BEGIN           reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    FOR             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    CASE            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    REPEAT          reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    WHILE           reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    EQUAL           reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    AND             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    OR              reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    GREATER         reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    SMALLER         reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    SUBSTR          reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    RANDOM          reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    MULT            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    DIV             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    SUM             reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    $end            reduce using rule 43 (down -> DOWN PUNTOCOMA .)
    BRADER          reduce using rule 43 (down -> DOWN PUNTOCOMA .)


state 77

    (44) up -> UP PUNTOCOMA .

    DEF             reduce using rule 44 (up -> UP PUNTOCOMA .)
    PUT             reduce using rule 44 (up -> UP PUNTOCOMA .)
    ADD             reduce using rule 44 (up -> UP PUNTOCOMA .)
    CONUP           reduce using rule 44 (up -> UP PUNTOCOMA .)
    CONDOWN         reduce using rule 44 (up -> UP PUNTOCOMA .)
    CONRIGHT        reduce using rule 44 (up -> UP PUNTOCOMA .)
    CONLEFT         reduce using rule 44 (up -> UP PUNTOCOMA .)
    POS             reduce using rule 44 (up -> UP PUNTOCOMA .)
    POSX            reduce using rule 44 (up -> UP PUNTOCOMA .)
    POSY            reduce using rule 44 (up -> UP PUNTOCOMA .)
    USECOLOR        reduce using rule 44 (up -> UP PUNTOCOMA .)
    DOWN            reduce using rule 44 (up -> UP PUNTOCOMA .)
    UP              reduce using rule 44 (up -> UP PUNTOCOMA .)
    BEGIN           reduce using rule 44 (up -> UP PUNTOCOMA .)
    FOR             reduce using rule 44 (up -> UP PUNTOCOMA .)
    CASE            reduce using rule 44 (up -> UP PUNTOCOMA .)
    REPEAT          reduce using rule 44 (up -> UP PUNTOCOMA .)
    WHILE           reduce using rule 44 (up -> UP PUNTOCOMA .)
    EQUAL           reduce using rule 44 (up -> UP PUNTOCOMA .)
    AND             reduce using rule 44 (up -> UP PUNTOCOMA .)
    OR              reduce using rule 44 (up -> UP PUNTOCOMA .)
    GREATER         reduce using rule 44 (up -> UP PUNTOCOMA .)
    SMALLER         reduce using rule 44 (up -> UP PUNTOCOMA .)
    SUBSTR          reduce using rule 44 (up -> UP PUNTOCOMA .)
    RANDOM          reduce using rule 44 (up -> UP PUNTOCOMA .)
    MULT            reduce using rule 44 (up -> UP PUNTOCOMA .)
    DIV             reduce using rule 44 (up -> UP PUNTOCOMA .)
    SUM             reduce using rule 44 (up -> UP PUNTOCOMA .)
    $end            reduce using rule 44 (up -> UP PUNTOCOMA .)
    BRADER          reduce using rule 44 (up -> UP PUNTOCOMA .)


state 78

    (45) beginning -> BEGIN PUNTOCOMA .

    DEF             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    PUT             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    ADD             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    CONUP           reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    CONDOWN         reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    CONRIGHT        reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    CONLEFT         reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    POS             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    POSX            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    POSY            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    USECOLOR        reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    DOWN            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    UP              reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    BEGIN           reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    FOR             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    CASE            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    REPEAT          reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    WHILE           reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    EQUAL           reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    AND             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    OR              reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    GREATER         reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    SMALLER         reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    SUBSTR          reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    RANDOM          reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    MULT            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    DIV             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    SUM             reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    $end            reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)
    BRADER          reduce using rule 45 (beginning -> BEGIN PUNTOCOMA .)


state 79

    (46) for_loop -> FOR VARIABLE . PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    PARIZQ          shift and go to state 108


state 80

    (47) case -> CASE VARIABLE . when_cases end_case
    (48) when_cases -> . when_cases when_case
    (49) when_cases -> . when_case
    (50) when_case -> . WHEN valor THEN BRAIZQ sentencias BRADER

    WHEN            shift and go to state 111

    when_cases                     shift and go to state 109
    when_case                      shift and go to state 110

state 81

    (53) repeat_until -> REPEAT BRAIZQ . sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 112
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 82

    (54) while -> WHILE PARIZQ . condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (74) condicion -> . equal
    (75) condicion -> . greater
    (76) condicion -> . smaller
    (77) condicion -> . and
    (78) condicion -> . or
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER

    EQUAL           shift and go to state 49
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    AND             shift and go to state 50
    OR              shift and go to state 51

    condicion                      shift and go to state 113
    equal                          shift and go to state 114
    greater                        shift and go to state 115
    smaller                        shift and go to state 116
    and                            shift and go to state 117
    or                             shift and go to state 118

state 83

    (55) equal -> EQUAL PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 119
    expr                           shift and go to state 66

state 84

    (56) and -> AND PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 120
    expr                           shift and go to state 66

state 85

    (57) or -> OR PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 121
    expr                           shift and go to state 66

state 86

    (58) greater -> GREATER PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 122
    expr                           shift and go to state 66

state 87

    (59) smaller -> SMALLER PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 123
    expr                           shift and go to state 66

state 88

    (60) substr -> SUBSTR PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 124
    expr                           shift and go to state 66

state 89

    (61) random -> RANDOM PARIZQ . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 125
    expr                           shift and go to state 66

state 90

    (62) mult -> MULT PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 126
    expr                           shift and go to state 66

state 91

    (63) div -> DIV PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 127
    expr                           shift and go to state 66

state 92

    (64) sum -> SUM PARIZQ . valor COMA valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 128
    expr                           shift and go to state 66

state 93

    (31) def_variable -> DEF PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    COMA            shift and go to state 129


state 94

    (32) put_variable -> PUT PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    COMA            shift and go to state 130


state 95

    (33) add_variable -> ADD PARIZQ VARIABLE . PARDER PUNTOCOMA
    (34) add_variable -> ADD PARIZQ VARIABLE . COMA valor PARDER PUNTOCOMA

    PARDER          shift and go to state 131
    COMA            shift and go to state 132


state 96

    (35) continue_up -> CONUP valor PUNTOCOMA .

    DEF             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    PUT             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    ADD             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    CONUP           reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    CONDOWN         reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    CONLEFT         reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    POS             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    POSX            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    POSY            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    USECOLOR        reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    DOWN            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    UP              reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    BEGIN           reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    FOR             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    CASE            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    REPEAT          reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    WHILE           reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    EQUAL           reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    AND             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    OR              reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    GREATER         reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    SMALLER         reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    SUBSTR          reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    RANDOM          reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    MULT            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    DIV             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    SUM             reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    $end            reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)
    BRADER          reduce using rule 35 (continue_up -> CONUP valor PUNTOCOMA .)


state 97

    (70) expr -> valor MULT . valor
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 133
    expr                           shift and go to state 66

state 98

    (71) expr -> valor DIV . valor
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 134
    expr                           shift and go to state 66

state 99

    (72) expr -> valor SUM . valor
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 135
    expr                           shift and go to state 66

state 100

    (73) expr -> valor SUBSTR . valor
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 136
    expr                           shift and go to state 66

state 101

    (36) continue_down -> CONDOWN valor PUNTOCOMA .

    DEF             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    PUT             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    ADD             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONUP           reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONDOWN         reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CONLEFT         reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POS             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POSX            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    POSY            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    USECOLOR        reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    DOWN            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    UP              reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    BEGIN           reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    FOR             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    CASE            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    REPEAT          reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    WHILE           reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    EQUAL           reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    AND             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    OR              reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    GREATER         reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SMALLER         reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SUBSTR          reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    RANDOM          reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    MULT            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    DIV             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    SUM             reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    $end            reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)
    BRADER          reduce using rule 36 (continue_down -> CONDOWN valor PUNTOCOMA .)


state 102

    (37) continue_right -> CONRIGHT valor PUNTOCOMA .

    DEF             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    PUT             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    ADD             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONUP           reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONDOWN         reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CONLEFT         reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POS             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POSX            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    POSY            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    USECOLOR        reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    DOWN            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    UP              reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    BEGIN           reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    FOR             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    CASE            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    REPEAT          reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    WHILE           reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    EQUAL           reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    AND             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    OR              reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    GREATER         reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SMALLER         reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SUBSTR          reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    RANDOM          reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    MULT            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    DIV             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    SUM             reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    $end            reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)
    BRADER          reduce using rule 37 (continue_right -> CONRIGHT valor PUNTOCOMA .)


state 103

    (38) continue_left -> CONLEFT valor PUNTOCOMA .

    DEF             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    PUT             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    ADD             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONUP           reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONDOWN         reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CONLEFT         reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POS             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POSX            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    POSY            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    USECOLOR        reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    DOWN            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    UP              reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    BEGIN           reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    FOR             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    CASE            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    REPEAT          reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    WHILE           reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    EQUAL           reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    AND             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    OR              reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    GREATER         reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SMALLER         reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SUBSTR          reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    RANDOM          reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    MULT            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    DIV             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    SUM             reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    $end            reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)
    BRADER          reduce using rule 38 (continue_left -> CONLEFT valor PUNTOCOMA .)


state 104

    (39) pos -> POS PARIZQ valor . COMA valor PARDER PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 137
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 105

    (40) posx -> POSX valor PUNTOCOMA .

    DEF             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    PUT             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    ADD             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    CONUP           reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    CONDOWN         reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    CONLEFT         reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    POS             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    POSX            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    POSY            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    USECOLOR        reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    DOWN            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    UP              reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    BEGIN           reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    FOR             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    CASE            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    REPEAT          reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    WHILE           reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    EQUAL           reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    AND             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    OR              reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    GREATER         reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    SMALLER         reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    SUBSTR          reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    RANDOM          reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    MULT            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    DIV             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    SUM             reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    $end            reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)
    BRADER          reduce using rule 40 (posx -> POSX valor PUNTOCOMA .)


state 106

    (41) posy -> POSY valor PUNTOCOMA .

    DEF             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    PUT             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    ADD             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    CONUP           reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    CONDOWN         reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    CONLEFT         reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    POS             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    POSX            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    POSY            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    USECOLOR        reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    DOWN            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    UP              reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    BEGIN           reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    FOR             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    CASE            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    REPEAT          reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    WHILE           reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    EQUAL           reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    AND             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    OR              reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    GREATER         reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    SMALLER         reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    SUBSTR          reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    RANDOM          reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    MULT            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    DIV             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    SUM             reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    $end            reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)
    BRADER          reduce using rule 41 (posy -> POSY valor PUNTOCOMA .)


state 107

    (42) use_color -> USECOLOR valor PUNTOCOMA .

    DEF             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    PUT             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    ADD             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONUP           reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONDOWN         reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONRIGHT        reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    CONLEFT         reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    POS             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    POSX            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    POSY            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    USECOLOR        reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    DOWN            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    UP              reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    BEGIN           reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    FOR             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    CASE            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    REPEAT          reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    WHILE           reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    EQUAL           reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    AND             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    OR              reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    GREATER         reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    SMALLER         reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    SUBSTR          reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    RANDOM          reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    MULT            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    DIV             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    SUM             reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    $end            reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)
    BRADER          reduce using rule 42 (use_color -> USECOLOR valor PUNTOCOMA .)


state 108

    (46) for_loop -> FOR VARIABLE PARIZQ . valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 138
    expr                           shift and go to state 66

state 109

    (47) case -> CASE VARIABLE when_cases . end_case
    (48) when_cases -> when_cases . when_case
    (51) end_case -> . ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA
    (52) end_case -> . END CASE PUNTOCOMA
    (50) when_case -> . WHEN valor THEN BRAIZQ sentencias BRADER

    ELSE            shift and go to state 141
    END             shift and go to state 142
    WHEN            shift and go to state 111

    end_case                       shift and go to state 139
    when_case                      shift and go to state 140

state 110

    (49) when_cases -> when_case .

    ELSE            reduce using rule 49 (when_cases -> when_case .)
    END             reduce using rule 49 (when_cases -> when_case .)
    WHEN            reduce using rule 49 (when_cases -> when_case .)


state 111

    (50) when_case -> WHEN . valor THEN BRAIZQ sentencias BRADER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 143
    expr                           shift and go to state 66

state 112

    (53) repeat_until -> REPEAT BRAIZQ sentencias . BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA

    BRADER          shift and go to state 144


state 113

    (54) while -> WHILE PARIZQ condicion . PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    PARDER          shift and go to state 145


state 114

    (74) condicion -> equal .

    PARDER          reduce using rule 74 (condicion -> equal .)


state 115

    (75) condicion -> greater .

    PARDER          reduce using rule 75 (condicion -> greater .)


state 116

    (76) condicion -> smaller .

    PARDER          reduce using rule 76 (condicion -> smaller .)


state 117

    (77) condicion -> and .

    PARDER          reduce using rule 77 (condicion -> and .)


state 118

    (78) condicion -> or .

    PARDER          reduce using rule 78 (condicion -> or .)


state 119

    (55) equal -> EQUAL PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 146
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 120

    (56) and -> AND PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 147
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 121

    (57) or -> OR PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 148
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 122

    (58) greater -> GREATER PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 149
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 123

    (59) smaller -> SMALLER PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 150
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 124

    (60) substr -> SUBSTR PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 151
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 125

    (61) random -> RANDOM PARIZQ valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 152
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 126

    (62) mult -> MULT PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 153
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 127

    (63) div -> DIV PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 154
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 128

    (64) sum -> SUM PARIZQ valor . COMA valor PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    COMA            shift and go to state 155
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 129

    (31) def_variable -> DEF PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 156
    expr                           shift and go to state 66

state 130

    (32) put_variable -> PUT PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 157
    expr                           shift and go to state 66

state 131

    (33) add_variable -> ADD PARIZQ VARIABLE PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 158


state 132

    (34) add_variable -> ADD PARIZQ VARIABLE COMA . valor PARDER PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 159
    expr                           shift and go to state 66

state 133

    (70) expr -> valor MULT valor .
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUBSTR resolved as shift
    PUNTOCOMA       reduce using rule 70 (expr -> valor MULT valor .)
    COMA            reduce using rule 70 (expr -> valor MULT valor .)
    PARDER          reduce using rule 70 (expr -> valor MULT valor .)
    TO              reduce using rule 70 (expr -> valor MULT valor .)
    THEN            reduce using rule 70 (expr -> valor MULT valor .)
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100

  ! MULT            [ reduce using rule 70 (expr -> valor MULT valor .) ]
  ! DIV             [ reduce using rule 70 (expr -> valor MULT valor .) ]
  ! SUM             [ reduce using rule 70 (expr -> valor MULT valor .) ]
  ! SUBSTR          [ reduce using rule 70 (expr -> valor MULT valor .) ]


state 134

    (71) expr -> valor DIV valor .
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUBSTR resolved as shift
    PUNTOCOMA       reduce using rule 71 (expr -> valor DIV valor .)
    COMA            reduce using rule 71 (expr -> valor DIV valor .)
    PARDER          reduce using rule 71 (expr -> valor DIV valor .)
    TO              reduce using rule 71 (expr -> valor DIV valor .)
    THEN            reduce using rule 71 (expr -> valor DIV valor .)
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100

  ! MULT            [ reduce using rule 71 (expr -> valor DIV valor .) ]
  ! DIV             [ reduce using rule 71 (expr -> valor DIV valor .) ]
  ! SUM             [ reduce using rule 71 (expr -> valor DIV valor .) ]
  ! SUBSTR          [ reduce using rule 71 (expr -> valor DIV valor .) ]


state 135

    (72) expr -> valor SUM valor .
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUBSTR resolved as shift
    PUNTOCOMA       reduce using rule 72 (expr -> valor SUM valor .)
    COMA            reduce using rule 72 (expr -> valor SUM valor .)
    PARDER          reduce using rule 72 (expr -> valor SUM valor .)
    TO              reduce using rule 72 (expr -> valor SUM valor .)
    THEN            reduce using rule 72 (expr -> valor SUM valor .)
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100

  ! MULT            [ reduce using rule 72 (expr -> valor SUM valor .) ]
  ! DIV             [ reduce using rule 72 (expr -> valor SUM valor .) ]
  ! SUM             [ reduce using rule 72 (expr -> valor SUM valor .) ]
  ! SUBSTR          [ reduce using rule 72 (expr -> valor SUM valor .) ]


state 136

    (73) expr -> valor SUBSTR valor .
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUBSTR resolved as shift
    PUNTOCOMA       reduce using rule 73 (expr -> valor SUBSTR valor .)
    COMA            reduce using rule 73 (expr -> valor SUBSTR valor .)
    PARDER          reduce using rule 73 (expr -> valor SUBSTR valor .)
    TO              reduce using rule 73 (expr -> valor SUBSTR valor .)
    THEN            reduce using rule 73 (expr -> valor SUBSTR valor .)
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100

  ! MULT            [ reduce using rule 73 (expr -> valor SUBSTR valor .) ]
  ! DIV             [ reduce using rule 73 (expr -> valor SUBSTR valor .) ]
  ! SUM             [ reduce using rule 73 (expr -> valor SUBSTR valor .) ]
  ! SUBSTR          [ reduce using rule 73 (expr -> valor SUBSTR valor .) ]


state 137

    (39) pos -> POS PARIZQ valor COMA . valor PARDER PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 160
    expr                           shift and go to state 66

state 138

    (46) for_loop -> FOR VARIABLE PARIZQ valor . TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    TO              shift and go to state 161
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 139

    (47) case -> CASE VARIABLE when_cases end_case .

    DEF             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    PUT             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    ADD             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    CONUP           reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    CONDOWN         reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    CONRIGHT        reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    CONLEFT         reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    POS             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    POSX            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    POSY            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    USECOLOR        reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    DOWN            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    UP              reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    BEGIN           reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    FOR             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    CASE            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    REPEAT          reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    WHILE           reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    EQUAL           reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    AND             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    OR              reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    GREATER         reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    SMALLER         reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    SUBSTR          reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    RANDOM          reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    MULT            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    DIV             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    SUM             reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    $end            reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)
    BRADER          reduce using rule 47 (case -> CASE VARIABLE when_cases end_case .)


state 140

    (48) when_cases -> when_cases when_case .

    ELSE            reduce using rule 48 (when_cases -> when_cases when_case .)
    END             reduce using rule 48 (when_cases -> when_cases when_case .)
    WHEN            reduce using rule 48 (when_cases -> when_cases when_case .)


state 141

    (51) end_case -> ELSE . BRAIZQ sentencias BRADER END CASE PUNTOCOMA

    BRAIZQ          shift and go to state 162


state 142

    (52) end_case -> END . CASE PUNTOCOMA

    CASE            shift and go to state 163


state 143

    (50) when_case -> WHEN valor . THEN BRAIZQ sentencias BRADER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    THEN            shift and go to state 164
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 144

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER . UNTIL PARIZQ condicion PARDER PUNTOCOMA

    UNTIL           shift and go to state 165


state 145

    (54) while -> WHILE PARIZQ condicion PARDER . BRAIZQ sentencias BRADER WHEND PUNTOCOMA

    BRAIZQ          shift and go to state 166


state 146

    (55) equal -> EQUAL PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 167
    expr                           shift and go to state 66

state 147

    (56) and -> AND PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 168
    expr                           shift and go to state 66

state 148

    (57) or -> OR PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 169
    expr                           shift and go to state 66

state 149

    (58) greater -> GREATER PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 170
    expr                           shift and go to state 66

state 150

    (59) smaller -> SMALLER PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 171
    expr                           shift and go to state 66

state 151

    (60) substr -> SUBSTR PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 172
    expr                           shift and go to state 66

state 152

    (61) random -> RANDOM PARIZQ valor PARDER .

    DEF             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    PUT             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    ADD             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    CONUP           reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    CONDOWN         reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    CONRIGHT        reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    CONLEFT         reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    POS             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    POSX            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    POSY            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    USECOLOR        reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    DOWN            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    UP              reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    BEGIN           reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    FOR             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    CASE            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    REPEAT          reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    WHILE           reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    EQUAL           reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    AND             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    OR              reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    GREATER         reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    SMALLER         reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    SUBSTR          reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    RANDOM          reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    MULT            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    DIV             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    SUM             reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    $end            reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)
    BRADER          reduce using rule 61 (random -> RANDOM PARIZQ valor PARDER .)


state 153

    (62) mult -> MULT PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 173
    expr                           shift and go to state 66

state 154

    (63) div -> DIV PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 174
    expr                           shift and go to state 66

state 155

    (64) sum -> SUM PARIZQ valor COMA . valor PARDER
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 175
    expr                           shift and go to state 66

state 156

    (31) def_variable -> DEF PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 176
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 157

    (32) put_variable -> PUT PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 177
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 158

    (33) add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .

    DEF             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    PUT             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    ADD             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONUP           reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POS             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POSX            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    POSY            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    DOWN            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    UP              reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    FOR             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    CASE            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    WHILE           reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    AND             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    OR              reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    GREATER         reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    MULT            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    DIV             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    SUM             reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    $end            reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)
    BRADER          reduce using rule 33 (add_variable -> ADD PARIZQ VARIABLE PARDER PUNTOCOMA .)


state 159

    (34) add_variable -> ADD PARIZQ VARIABLE COMA valor . PARDER PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 178
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 160

    (39) pos -> POS PARIZQ valor COMA valor . PARDER PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 179
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 161

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO . valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (65) valor -> . NUMBER
    (66) valor -> . VARIABLE
    (67) valor -> . expr
    (68) valor -> . TRUE
    (69) valor -> . FALSE
    (70) expr -> . valor MULT valor
    (71) expr -> . valor DIV valor
    (72) expr -> . valor SUM valor
    (73) expr -> . valor SUBSTR valor

    NUMBER          shift and go to state 64
    VARIABLE        shift and go to state 65
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    valor                          shift and go to state 180
    expr                           shift and go to state 66

state 162

    (51) end_case -> ELSE BRAIZQ . sentencias BRADER END CASE PUNTOCOMA
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 181
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 163

    (52) end_case -> END CASE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 182


state 164

    (50) when_case -> WHEN valor THEN . BRAIZQ sentencias BRADER

    BRAIZQ          shift and go to state 183


state 165

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL . PARIZQ condicion PARDER PUNTOCOMA

    PARIZQ          shift and go to state 184


state 166

    (54) while -> WHILE PARIZQ condicion PARDER BRAIZQ . sentencias BRADER WHEND PUNTOCOMA
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 185
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 167

    (55) equal -> EQUAL PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 186
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 168

    (56) and -> AND PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 187
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 169

    (57) or -> OR PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 188
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 170

    (58) greater -> GREATER PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 189
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 171

    (59) smaller -> SMALLER PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 190
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 172

    (60) substr -> SUBSTR PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 191
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 173

    (62) mult -> MULT PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 192
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 174

    (63) div -> DIV PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 193
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 175

    (64) sum -> SUM PARIZQ valor COMA valor . PARDER
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 194
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 176

    (31) def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 195


state 177

    (32) put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 196


state 178

    (34) add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 197


state 179

    (39) pos -> POS PARIZQ valor COMA valor PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 198


state 180

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor . PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (70) expr -> valor . MULT valor
    (71) expr -> valor . DIV valor
    (72) expr -> valor . SUM valor
    (73) expr -> valor . SUBSTR valor

    PARDER          shift and go to state 199
    MULT            shift and go to state 97
    DIV             shift and go to state 98
    SUM             shift and go to state 99
    SUBSTR          shift and go to state 100


state 181

    (51) end_case -> ELSE BRAIZQ sentencias . BRADER END CASE PUNTOCOMA

    BRADER          shift and go to state 200


state 182

    (52) end_case -> END CASE PUNTOCOMA .

    DEF             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    PUT             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    ADD             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    CONUP           reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    CONDOWN         reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    CONRIGHT        reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    CONLEFT         reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    POS             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    POSX            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    POSY            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    USECOLOR        reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    DOWN            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    UP              reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    BEGIN           reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    FOR             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    CASE            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    REPEAT          reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    WHILE           reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    EQUAL           reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    AND             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    OR              reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    GREATER         reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    SMALLER         reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    SUBSTR          reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    RANDOM          reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    MULT            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    DIV             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    SUM             reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    $end            reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)
    BRADER          reduce using rule 52 (end_case -> END CASE PUNTOCOMA .)


state 183

    (50) when_case -> WHEN valor THEN BRAIZQ . sentencias BRADER
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 201
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 184

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ . condicion PARDER PUNTOCOMA
    (74) condicion -> . equal
    (75) condicion -> . greater
    (76) condicion -> . smaller
    (77) condicion -> . and
    (78) condicion -> . or
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER

    EQUAL           shift and go to state 49
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    AND             shift and go to state 50
    OR              shift and go to state 51

    condicion                      shift and go to state 202
    equal                          shift and go to state 114
    greater                        shift and go to state 115
    smaller                        shift and go to state 116
    and                            shift and go to state 117
    or                             shift and go to state 118

state 185

    (54) while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias . BRADER WHEND PUNTOCOMA

    BRADER          shift and go to state 203


state 186

    (55) equal -> EQUAL PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 55 (equal -> EQUAL PARIZQ valor COMA valor PARDER .)


state 187

    (56) and -> AND PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 56 (and -> AND PARIZQ valor COMA valor PARDER .)


state 188

    (57) or -> OR PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 57 (or -> OR PARIZQ valor COMA valor PARDER .)


state 189

    (58) greater -> GREATER PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 58 (greater -> GREATER PARIZQ valor COMA valor PARDER .)


state 190

    (59) smaller -> SMALLER PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)
    PARDER          reduce using rule 59 (smaller -> SMALLER PARIZQ valor COMA valor PARDER .)


state 191

    (60) substr -> SUBSTR PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 60 (substr -> SUBSTR PARIZQ valor COMA valor PARDER .)


state 192

    (62) mult -> MULT PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 62 (mult -> MULT PARIZQ valor COMA valor PARDER .)


state 193

    (63) div -> DIV PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 63 (div -> DIV PARIZQ valor COMA valor PARDER .)


state 194

    (64) sum -> SUM PARIZQ valor COMA valor PARDER .

    DEF             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    PUT             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    ADD             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONUP           reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONDOWN         reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONRIGHT        reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CONLEFT         reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POS             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POSX            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    POSY            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    USECOLOR        reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    DOWN            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    UP              reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    BEGIN           reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    FOR             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    CASE            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    REPEAT          reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    WHILE           reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    EQUAL           reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    AND             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    OR              reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    GREATER         reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SMALLER         reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SUBSTR          reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    RANDOM          reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    MULT            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    DIV             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    SUM             reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    $end            reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)
    BRADER          reduce using rule 64 (sum -> SUM PARIZQ valor COMA valor PARDER .)


state 195

    (31) def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 31 (def_variable -> DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 196

    (32) put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 32 (put_variable -> PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 197

    (34) add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 34 (add_variable -> ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA .)


state 198

    (39) pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .

    DEF             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    PUT             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    ADD             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONUP           reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POS             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POSX            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    POSY            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    DOWN            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    UP              reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    FOR             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    CASE            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    WHILE           reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    AND             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    OR              reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    GREATER         reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    MULT            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    DIV             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    SUM             reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    $end            reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)
    BRADER          reduce using rule 39 (pos -> POS PARIZQ valor COMA valor PARDER PUNTOCOMA .)


state 199

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER . LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    LOOP            shift and go to state 204


state 200

    (51) end_case -> ELSE BRAIZQ sentencias BRADER . END CASE PUNTOCOMA

    END             shift and go to state 205


state 201

    (50) when_case -> WHEN valor THEN BRAIZQ sentencias . BRADER

    BRADER          shift and go to state 206


state 202

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion . PARDER PUNTOCOMA

    PARDER          shift and go to state 207


state 203

    (54) while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER . WHEND PUNTOCOMA

    WHEND           shift and go to state 208


state 204

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP . BRAIZQ sentencias BRADER END LOOP PUNTOCOMA

    BRAIZQ          shift and go to state 209


state 205

    (51) end_case -> ELSE BRAIZQ sentencias BRADER END . CASE PUNTOCOMA

    CASE            shift and go to state 210


state 206

    (50) when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .

    ELSE            reduce using rule 50 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)
    END             reduce using rule 50 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)
    WHEN            reduce using rule 50 (when_case -> WHEN valor THEN BRAIZQ sentencias BRADER .)


state 207

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 211


state 208

    (54) while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND . PUNTOCOMA

    PUNTOCOMA       shift and go to state 212


state 209

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ . sentencias BRADER END LOOP PUNTOCOMA
    (1) sentencias -> . sentencia sentencias
    (2) sentencias -> . sentencia
    (3) sentencia -> . def_variable
    (4) sentencia -> . put_variable
    (5) sentencia -> . add_variable
    (6) sentencia -> . continue_up
    (7) sentencia -> . continue_down
    (8) sentencia -> . continue_right
    (9) sentencia -> . continue_left
    (10) sentencia -> . pos
    (11) sentencia -> . posx
    (12) sentencia -> . posy
    (13) sentencia -> . use_color
    (14) sentencia -> . down
    (15) sentencia -> . up
    (16) sentencia -> . beginning
    (17) sentencia -> . for_loop
    (18) sentencia -> . case
    (19) sentencia -> . repeat_until
    (20) sentencia -> . while
    (21) sentencia -> . equal
    (22) sentencia -> . and
    (23) sentencia -> . or
    (24) sentencia -> . greater
    (25) sentencia -> . smaller
    (26) sentencia -> . substr
    (27) sentencia -> . random
    (28) sentencia -> . mult
    (29) sentencia -> . div
    (30) sentencia -> . sum
    (31) def_variable -> . DEF PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (32) put_variable -> . PUT PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (33) add_variable -> . ADD PARIZQ VARIABLE PARDER PUNTOCOMA
    (34) add_variable -> . ADD PARIZQ VARIABLE COMA valor PARDER PUNTOCOMA
    (35) continue_up -> . CONUP valor PUNTOCOMA
    (36) continue_down -> . CONDOWN valor PUNTOCOMA
    (37) continue_right -> . CONRIGHT valor PUNTOCOMA
    (38) continue_left -> . CONLEFT valor PUNTOCOMA
    (39) pos -> . POS PARIZQ valor COMA valor PARDER PUNTOCOMA
    (40) posx -> . POSX valor PUNTOCOMA
    (41) posy -> . POSY valor PUNTOCOMA
    (42) use_color -> . USECOLOR valor PUNTOCOMA
    (43) down -> . DOWN PUNTOCOMA
    (44) up -> . UP PUNTOCOMA
    (45) beginning -> . BEGIN PUNTOCOMA
    (46) for_loop -> . FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA
    (47) case -> . CASE VARIABLE when_cases end_case
    (53) repeat_until -> . REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA
    (54) while -> . WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA
    (55) equal -> . EQUAL PARIZQ valor COMA valor PARDER
    (56) and -> . AND PARIZQ valor COMA valor PARDER
    (57) or -> . OR PARIZQ valor COMA valor PARDER
    (58) greater -> . GREATER PARIZQ valor COMA valor PARDER
    (59) smaller -> . SMALLER PARIZQ valor COMA valor PARDER
    (60) substr -> . SUBSTR PARIZQ valor COMA valor PARDER
    (61) random -> . RANDOM PARIZQ valor PARDER
    (62) mult -> . MULT PARIZQ valor COMA valor PARDER
    (63) div -> . DIV PARIZQ valor COMA valor PARDER
    (64) sum -> . SUM PARIZQ valor COMA valor PARDER

    DEF             shift and go to state 31
    PUT             shift and go to state 32
    ADD             shift and go to state 33
    CONUP           shift and go to state 34
    CONDOWN         shift and go to state 35
    CONRIGHT        shift and go to state 36
    CONLEFT         shift and go to state 37
    POS             shift and go to state 38
    POSX            shift and go to state 39
    POSY            shift and go to state 40
    USECOLOR        shift and go to state 41
    DOWN            shift and go to state 42
    UP              shift and go to state 43
    BEGIN           shift and go to state 44
    FOR             shift and go to state 45
    CASE            shift and go to state 46
    REPEAT          shift and go to state 47
    WHILE           shift and go to state 48
    EQUAL           shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GREATER         shift and go to state 52
    SMALLER         shift and go to state 53
    SUBSTR          shift and go to state 54
    RANDOM          shift and go to state 55
    MULT            shift and go to state 56
    DIV             shift and go to state 57
    SUM             shift and go to state 58

    sentencias                     shift and go to state 213
    sentencia                      shift and go to state 2
    def_variable                   shift and go to state 3
    put_variable                   shift and go to state 4
    add_variable                   shift and go to state 5
    continue_up                    shift and go to state 6
    continue_down                  shift and go to state 7
    continue_right                 shift and go to state 8
    continue_left                  shift and go to state 9
    pos                            shift and go to state 10
    posx                           shift and go to state 11
    posy                           shift and go to state 12
    use_color                      shift and go to state 13
    down                           shift and go to state 14
    up                             shift and go to state 15
    beginning                      shift and go to state 16
    for_loop                       shift and go to state 17
    case                           shift and go to state 18
    repeat_until                   shift and go to state 19
    while                          shift and go to state 20
    equal                          shift and go to state 21
    and                            shift and go to state 22
    or                             shift and go to state 23
    greater                        shift and go to state 24
    smaller                        shift and go to state 25
    substr                         shift and go to state 26
    random                         shift and go to state 27
    mult                           shift and go to state 28
    div                            shift and go to state 29
    sum                            shift and go to state 30

state 210

    (51) end_case -> ELSE BRAIZQ sentencias BRADER END CASE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 214


state 211

    (53) repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .

    DEF             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    PUT             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    ADD             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    CONUP           reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    CONDOWN         reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    CONRIGHT        reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    CONLEFT         reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    POS             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    POSX            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    POSY            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    USECOLOR        reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    DOWN            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    UP              reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    BEGIN           reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    FOR             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    CASE            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    REPEAT          reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    WHILE           reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    EQUAL           reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    AND             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    OR              reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    GREATER         reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    SMALLER         reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    SUBSTR          reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    RANDOM          reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    MULT            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    DIV             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    SUM             reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    $end            reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)
    BRADER          reduce using rule 53 (repeat_until -> REPEAT BRAIZQ sentencias BRADER UNTIL PARIZQ condicion PARDER PUNTOCOMA .)


state 212

    (54) while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .

    DEF             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    PUT             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    ADD             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONUP           reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONDOWN         reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONRIGHT        reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CONLEFT         reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POS             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POSX            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    POSY            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    USECOLOR        reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    DOWN            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    UP              reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    BEGIN           reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    FOR             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    CASE            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    REPEAT          reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    WHILE           reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    EQUAL           reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    AND             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    OR              reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    GREATER         reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SMALLER         reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SUBSTR          reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    RANDOM          reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    MULT            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    DIV             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    SUM             reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    $end            reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)
    BRADER          reduce using rule 54 (while -> WHILE PARIZQ condicion PARDER BRAIZQ sentencias BRADER WHEND PUNTOCOMA .)


state 213

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias . BRADER END LOOP PUNTOCOMA

    BRADER          shift and go to state 215


state 214

    (51) end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .

    DEF             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    PUT             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    ADD             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONUP           reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONDOWN         reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONRIGHT        reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CONLEFT         reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POS             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POSX            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    POSY            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    USECOLOR        reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    DOWN            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    UP              reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    BEGIN           reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    FOR             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    CASE            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    REPEAT          reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    WHILE           reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    EQUAL           reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    AND             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    OR              reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    GREATER         reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SMALLER         reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SUBSTR          reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    RANDOM          reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    MULT            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    DIV             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    SUM             reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    $end            reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)
    BRADER          reduce using rule 51 (end_case -> ELSE BRAIZQ sentencias BRADER END CASE PUNTOCOMA .)


state 215

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER . END LOOP PUNTOCOMA

    END             shift and go to state 216


state 216

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END . LOOP PUNTOCOMA

    LOOP            shift and go to state 217


state 217

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP . PUNTOCOMA

    PUNTOCOMA       shift and go to state 218


state 218

    (46) for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .

    DEF             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    PUT             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    ADD             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONUP           reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONDOWN         reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONRIGHT        reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CONLEFT         reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POS             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POSX            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    POSY            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    USECOLOR        reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    DOWN            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    UP              reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    BEGIN           reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    FOR             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    CASE            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    REPEAT          reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    WHILE           reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    EQUAL           reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    AND             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    OR              reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    GREATER         reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SMALLER         reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SUBSTR          reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    RANDOM          reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    MULT            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    DIV             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    SUM             reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    $end            reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)
    BRADER          reduce using rule 46 (for_loop -> FOR VARIABLE PARIZQ valor TO valor PARDER LOOP BRAIZQ sentencias BRADER END LOOP PUNTOCOMA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULT in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV in state 133 resolved as shift
WARNING: shift/reduce conflict for SUM in state 133 resolved as shift
WARNING: shift/reduce conflict for SUBSTR in state 133 resolved as shift
WARNING: shift/reduce conflict for MULT in state 134 resolved as shift
WARNING: shift/reduce conflict for DIV in state 134 resolved as shift
WARNING: shift/reduce conflict for SUM in state 134 resolved as shift
WARNING: shift/reduce conflict for SUBSTR in state 134 resolved as shift
WARNING: shift/reduce conflict for MULT in state 135 resolved as shift
WARNING: shift/reduce conflict for DIV in state 135 resolved as shift
WARNING: shift/reduce conflict for SUM in state 135 resolved as shift
WARNING: shift/reduce conflict for SUBSTR in state 135 resolved as shift
WARNING: shift/reduce conflict for MULT in state 136 resolved as shift
WARNING: shift/reduce conflict for DIV in state 136 resolved as shift
WARNING: shift/reduce conflict for SUM in state 136 resolved as shift
WARNING: shift/reduce conflict for SUBSTR in state 136 resolved as shift
