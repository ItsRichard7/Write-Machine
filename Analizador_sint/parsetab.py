
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND BEGIN BRADER BRAIZQ CASE COMA COMMENT CONDOWN CONLEFT CONRIGHT CONUP DEF DIV DOWN ELSE END EQUAL FALSE FOR GREATER LOOP MULT NUMBER OR PARDER PARIZQ POS POSX POSY PROC PUNTOCOMA PUT RANDOM REPEAT SMALLER SUBSTR SUM TEXT THEN TRUE UNTIL UP USECOLOR VARIABLE WHEN WHEND WHILEprogram : COMMENT statementsstatements : statement statements\n                  | statementstatement : assign_stmt\n                 | proc_stmt\n                 | for_loop\n                 | case_stmt\n                 | repeat_stmt\n                 | while_stmt\n                 | boolean_expr\n                 | move_stmt\n                 | color_stmtassign_stmt : DEF PARIZQ VARIABLE COMA NUMBER PARDER PUNTOCOMA\n                   | PUT PARIZQ VARIABLE COMA NUMBER PARDER PUNTOCOMAproc_stmt : DEF VARIABLE PARIZQ param_list PARDER proc_body END PUNTOCOMAproc_body : BRAIZQ statements BRADERparam_list : VARIABLE\n                  | VARIABLE COMA param_list\n                  | emptyfor_loop : FOR VARIABLE PARIZQ NUMBER COMA NUMBER PARDER BRAIZQ statements BRADER END LOOP PUNTOCOMAcase_stmt : CASE VARIABLE case_when_list case_else END CASE PUNTOCOMAcase_when_list : when_clause\n                      | when_clause case_when_listwhen_clause : WHEN NUMBER THEN BRAIZQ statements BRADERcase_else : ELSE BRAIZQ statements BRADER\n                 | emptyrepeat_stmt : REPEAT BRAIZQ statements BRADER UNTIL PARIZQ boolean_expr PARDER PUNTOCOMAwhile_stmt : WHILE PARIZQ boolean_expr PARDER BRAIZQ statements BRADER WHEND PUNTOCOMAboolean_expr : EQUAL PARIZQ expr COMA expr PARDER\n                    | AND PARIZQ expr COMA expr PARDER\n                    | OR PARIZQ expr COMA expr PARDER\n                    | GREATER PARIZQ expr COMA expr PARDER\n                    | SMALLER PARIZQ expr COMA expr PARDERexpr : NUMBER\n            | VARIABLE\n            | SUM PARIZQ expr COMA expr PARDER\n            | MULT PARIZQ expr COMA expr PARDER\n            | DIV PARIZQ expr COMA expr PARDER\n            | RANDOM PARIZQ NUMBER PARDERmove_stmt : CONUP NUMBER PUNTOCOMA\n                 | CONDOWN NUMBER PUNTOCOMA\n                 | CONRIGHT NUMBER PUNTOCOMA\n                 | CONLEFT NUMBER PUNTOCOMA\n                 | POSX NUMBER PUNTOCOMA\n                 | POSY NUMBER PUNTOCOMA\n                 | POS PARIZQ NUMBER COMA NUMBER PARDER PUNTOCOMAcolor_stmt : USECOLOR NUMBER PUNTOCOMAempty :'
    
_lr_action_items = {'COMMENT':([0,],[2,]),'$end':([1,3,4,5,6,7,8,9,10,11,12,13,33,74,75,76,77,78,79,81,136,141,142,143,144,146,149,151,159,160,170,171,175,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,-40,-41,-42,-43,-44,-45,-47,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,-27,-28,-20,]),'DEF':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,-12,14,-40,-41,-42,-43,-44,-45,-47,14,14,14,14,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,14,-27,-28,-20,]),'PUT':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-12,15,-40,-41,-42,-43,-44,-45,-47,15,15,15,15,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,15,-27,-28,-20,]),'FOR':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,16,-40,-41,-42,-43,-44,-45,-47,16,16,16,16,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,16,-27,-28,-20,]),'CASE':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,110,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,17,-40,-41,-42,-43,-44,-45,-47,131,17,17,17,17,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,17,-27,-28,-20,]),'REPEAT':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,18,-40,-41,-42,-43,-44,-45,-47,18,18,18,18,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,18,-27,-28,-20,]),'WHILE':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,19,-40,-41,-42,-43,-44,-45,-47,19,19,19,19,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,19,-27,-28,-20,]),'EQUAL':([2,4,5,6,7,8,9,10,11,12,13,39,40,74,75,76,77,78,79,81,111,114,128,133,134,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,20,20,-40,-41,-42,-43,-44,-45,-47,20,20,20,20,20,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,20,-27,-28,-20,]),'AND':([2,4,5,6,7,8,9,10,11,12,13,39,40,74,75,76,77,78,79,81,111,114,128,133,134,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,21,21,-40,-41,-42,-43,-44,-45,-47,21,21,21,21,21,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,21,-27,-28,-20,]),'OR':([2,4,5,6,7,8,9,10,11,12,13,39,40,74,75,76,77,78,79,81,111,114,128,133,134,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[22,22,-4,-5,-6,-7,-8,-9,-10,-11,-12,22,22,-40,-41,-42,-43,-44,-45,-47,22,22,22,22,22,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,22,-27,-28,-20,]),'GREATER':([2,4,5,6,7,8,9,10,11,12,13,39,40,74,75,76,77,78,79,81,111,114,128,133,134,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[23,23,-4,-5,-6,-7,-8,-9,-10,-11,-12,23,23,-40,-41,-42,-43,-44,-45,-47,23,23,23,23,23,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,23,-27,-28,-20,]),'SMALLER':([2,4,5,6,7,8,9,10,11,12,13,39,40,74,75,76,77,78,79,81,111,114,128,133,134,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[24,24,-4,-5,-6,-7,-8,-9,-10,-11,-12,24,24,-40,-41,-42,-43,-44,-45,-47,24,24,24,24,24,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,24,-27,-28,-20,]),'CONUP':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[25,25,-4,-5,-6,-7,-8,-9,-10,-11,-12,25,-40,-41,-42,-43,-44,-45,-47,25,25,25,25,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,25,-27,-28,-20,]),'CONDOWN':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[26,26,-4,-5,-6,-7,-8,-9,-10,-11,-12,26,-40,-41,-42,-43,-44,-45,-47,26,26,26,26,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,26,-27,-28,-20,]),'CONRIGHT':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[27,27,-4,-5,-6,-7,-8,-9,-10,-11,-12,27,-40,-41,-42,-43,-44,-45,-47,27,27,27,27,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,27,-27,-28,-20,]),'CONLEFT':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[28,28,-4,-5,-6,-7,-8,-9,-10,-11,-12,28,-40,-41,-42,-43,-44,-45,-47,28,28,28,28,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,28,-27,-28,-20,]),'POSX':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[29,29,-4,-5,-6,-7,-8,-9,-10,-11,-12,29,-40,-41,-42,-43,-44,-45,-47,29,29,29,29,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,29,-27,-28,-20,]),'POSY':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[30,30,-4,-5,-6,-7,-8,-9,-10,-11,-12,30,-40,-41,-42,-43,-44,-45,-47,30,30,30,30,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,30,-27,-28,-20,]),'POS':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[31,31,-4,-5,-6,-7,-8,-9,-10,-11,-12,31,-40,-41,-42,-43,-44,-45,-47,31,31,31,31,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,31,-27,-28,-20,]),'USECOLOR':([2,4,5,6,7,8,9,10,11,12,13,39,74,75,76,77,78,79,81,111,114,128,133,136,141,142,143,144,146,149,151,159,160,162,170,171,175,],[32,32,-4,-5,-6,-7,-8,-9,-10,-11,-12,32,-40,-41,-42,-43,-44,-45,-47,32,32,32,32,-29,-30,-31,-32,-33,-13,-14,-21,-46,-15,32,-27,-28,-20,]),'BRADER':([4,5,6,7,8,9,10,11,12,13,33,61,74,75,76,77,78,79,81,132,135,136,141,142,143,144,146,148,149,151,153,159,160,169,170,171,175,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-2,93,-40,-41,-42,-43,-44,-45,-47,152,155,-29,-30,-31,-32,-33,-13,161,-14,-21,163,-46,-15,172,-27,-28,-20,]),'PARIZQ':([14,15,19,20,21,22,23,24,31,35,37,66,67,68,69,113,],[34,36,40,41,42,43,44,45,52,55,57,96,97,98,99,134,]),'VARIABLE':([14,16,17,34,36,41,42,43,44,45,55,95,96,97,98,100,101,102,103,106,137,138,139,],[35,37,38,54,56,65,65,65,65,65,83,65,65,65,65,65,65,65,65,83,65,65,65,]),'BRAIZQ':([18,89,94,107,112,150,],[39,111,114,128,133,162,]),'NUMBER':([25,26,27,28,29,30,32,41,42,43,44,45,52,57,60,82,86,95,96,97,98,99,100,101,102,103,104,109,137,138,139,],[46,47,48,49,50,51,53,64,64,64,64,64,80,87,92,105,108,64,64,64,64,119,64,64,64,64,124,130,64,64,64,]),'WHEN':([38,59,163,],[60,60,-24,]),'SUM':([41,42,43,44,45,95,96,97,98,100,101,102,103,137,138,139,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'MULT':([41,42,43,44,45,95,96,97,98,100,101,102,103,137,138,139,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'DIV':([41,42,43,44,45,95,96,97,98,100,101,102,103,137,138,139,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'RANDOM':([41,42,43,44,45,95,96,97,98,100,101,102,103,137,138,139,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'PUNTOCOMA':([46,47,48,49,50,51,53,125,129,131,145,147,164,165,174,],[74,75,76,77,78,79,81,146,149,151,159,160,170,171,175,]),'COMA':([54,56,63,64,65,70,71,72,73,80,83,87,116,117,118,140,166,167,168,],[82,86,95,-34,-35,100,101,102,103,104,106,109,137,138,139,-39,-36,-37,-38,]),'PARDER':([55,62,64,65,83,84,85,105,106,108,115,119,120,121,122,123,124,126,130,136,140,141,142,143,144,154,156,157,158,166,167,168,],[-48,94,-34,-35,-17,107,-19,125,-48,129,136,140,141,142,143,144,145,-18,150,-29,-39,-30,-31,-32,-33,164,166,167,168,-36,-37,-38,]),'ELSE':([58,59,91,163,],[89,-22,-23,-24,]),'END':([58,59,88,90,91,127,152,161,163,172,],[-48,-22,110,-26,-23,147,-25,-16,-24,173,]),'THEN':([92,],[112,]),'UNTIL':([93,],[113,]),'WHEND':([155,],[165,]),'LOOP':([173,],[174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([2,4,39,111,114,128,133,162,],[3,33,61,132,135,148,153,169,]),'statement':([2,4,39,111,114,128,133,162,],[4,4,4,4,4,4,4,4,]),'assign_stmt':([2,4,39,111,114,128,133,162,],[5,5,5,5,5,5,5,5,]),'proc_stmt':([2,4,39,111,114,128,133,162,],[6,6,6,6,6,6,6,6,]),'for_loop':([2,4,39,111,114,128,133,162,],[7,7,7,7,7,7,7,7,]),'case_stmt':([2,4,39,111,114,128,133,162,],[8,8,8,8,8,8,8,8,]),'repeat_stmt':([2,4,39,111,114,128,133,162,],[9,9,9,9,9,9,9,9,]),'while_stmt':([2,4,39,111,114,128,133,162,],[10,10,10,10,10,10,10,10,]),'boolean_expr':([2,4,39,40,111,114,128,133,134,162,],[11,11,11,62,11,11,11,11,154,11,]),'move_stmt':([2,4,39,111,114,128,133,162,],[12,12,12,12,12,12,12,12,]),'color_stmt':([2,4,39,111,114,128,133,162,],[13,13,13,13,13,13,13,13,]),'case_when_list':([38,59,],[58,91,]),'when_clause':([38,59,],[59,59,]),'expr':([41,42,43,44,45,95,96,97,98,100,101,102,103,137,138,139,],[63,70,71,72,73,115,116,117,118,120,121,122,123,156,157,158,]),'param_list':([55,106,],[84,126,]),'empty':([55,58,106,],[85,90,85,]),'case_else':([58,],[88,]),'proc_body':([107,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> COMMENT statements','program',2,'p_program','sintactico.py',7),
  ('statements -> statement statements','statements',2,'p_statements','sintactico.py',11),
  ('statements -> statement','statements',1,'p_statements','sintactico.py',12),
  ('statement -> assign_stmt','statement',1,'p_statement','sintactico.py',16),
  ('statement -> proc_stmt','statement',1,'p_statement','sintactico.py',17),
  ('statement -> for_loop','statement',1,'p_statement','sintactico.py',18),
  ('statement -> case_stmt','statement',1,'p_statement','sintactico.py',19),
  ('statement -> repeat_stmt','statement',1,'p_statement','sintactico.py',20),
  ('statement -> while_stmt','statement',1,'p_statement','sintactico.py',21),
  ('statement -> boolean_expr','statement',1,'p_statement','sintactico.py',22),
  ('statement -> move_stmt','statement',1,'p_statement','sintactico.py',23),
  ('statement -> color_stmt','statement',1,'p_statement','sintactico.py',24),
  ('assign_stmt -> DEF PARIZQ VARIABLE COMA NUMBER PARDER PUNTOCOMA','assign_stmt',7,'p_assign_stmt','sintactico.py',28),
  ('assign_stmt -> PUT PARIZQ VARIABLE COMA NUMBER PARDER PUNTOCOMA','assign_stmt',7,'p_assign_stmt','sintactico.py',29),
  ('proc_stmt -> DEF VARIABLE PARIZQ param_list PARDER proc_body END PUNTOCOMA','proc_stmt',8,'p_proc_stmt','sintactico.py',33),
  ('proc_body -> BRAIZQ statements BRADER','proc_body',3,'p_proc_body','sintactico.py',37),
  ('param_list -> VARIABLE','param_list',1,'p_param_list','sintactico.py',41),
  ('param_list -> VARIABLE COMA param_list','param_list',3,'p_param_list','sintactico.py',42),
  ('param_list -> empty','param_list',1,'p_param_list','sintactico.py',43),
  ('for_loop -> FOR VARIABLE PARIZQ NUMBER COMA NUMBER PARDER BRAIZQ statements BRADER END LOOP PUNTOCOMA','for_loop',13,'p_for_loop','sintactico.py',47),
  ('case_stmt -> CASE VARIABLE case_when_list case_else END CASE PUNTOCOMA','case_stmt',7,'p_case_stmt','sintactico.py',51),
  ('case_when_list -> when_clause','case_when_list',1,'p_case_when_list','sintactico.py',55),
  ('case_when_list -> when_clause case_when_list','case_when_list',2,'p_case_when_list','sintactico.py',56),
  ('when_clause -> WHEN NUMBER THEN BRAIZQ statements BRADER','when_clause',6,'p_when_clause','sintactico.py',60),
  ('case_else -> ELSE BRAIZQ statements BRADER','case_else',4,'p_case_else','sintactico.py',64),
  ('case_else -> empty','case_else',1,'p_case_else','sintactico.py',65),
  ('repeat_stmt -> REPEAT BRAIZQ statements BRADER UNTIL PARIZQ boolean_expr PARDER PUNTOCOMA','repeat_stmt',9,'p_repeat_stmt','sintactico.py',69),
  ('while_stmt -> WHILE PARIZQ boolean_expr PARDER BRAIZQ statements BRADER WHEND PUNTOCOMA','while_stmt',9,'p_while_stmt','sintactico.py',73),
  ('boolean_expr -> EQUAL PARIZQ expr COMA expr PARDER','boolean_expr',6,'p_boolean_expr','sintactico.py',77),
  ('boolean_expr -> AND PARIZQ expr COMA expr PARDER','boolean_expr',6,'p_boolean_expr','sintactico.py',78),
  ('boolean_expr -> OR PARIZQ expr COMA expr PARDER','boolean_expr',6,'p_boolean_expr','sintactico.py',79),
  ('boolean_expr -> GREATER PARIZQ expr COMA expr PARDER','boolean_expr',6,'p_boolean_expr','sintactico.py',80),
  ('boolean_expr -> SMALLER PARIZQ expr COMA expr PARDER','boolean_expr',6,'p_boolean_expr','sintactico.py',81),
  ('expr -> NUMBER','expr',1,'p_expr','sintactico.py',85),
  ('expr -> VARIABLE','expr',1,'p_expr','sintactico.py',86),
  ('expr -> SUM PARIZQ expr COMA expr PARDER','expr',6,'p_expr','sintactico.py',87),
  ('expr -> MULT PARIZQ expr COMA expr PARDER','expr',6,'p_expr','sintactico.py',88),
  ('expr -> DIV PARIZQ expr COMA expr PARDER','expr',6,'p_expr','sintactico.py',89),
  ('expr -> RANDOM PARIZQ NUMBER PARDER','expr',4,'p_expr','sintactico.py',90),
  ('move_stmt -> CONUP NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',94),
  ('move_stmt -> CONDOWN NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',95),
  ('move_stmt -> CONRIGHT NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',96),
  ('move_stmt -> CONLEFT NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',97),
  ('move_stmt -> POSX NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',98),
  ('move_stmt -> POSY NUMBER PUNTOCOMA','move_stmt',3,'p_move_stmt','sintactico.py',99),
  ('move_stmt -> POS PARIZQ NUMBER COMA NUMBER PARDER PUNTOCOMA','move_stmt',7,'p_move_stmt','sintactico.py',100),
  ('color_stmt -> USECOLOR NUMBER PUNTOCOMA','color_stmt',3,'p_color_stmt','sintactico.py',104),
  ('empty -> <empty>','empty',0,'p_empty','sintactico.py',108),
]
